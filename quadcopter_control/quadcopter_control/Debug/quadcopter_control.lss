
quadcopter_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000146  00800100  00003298  0000332c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003298  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000014b  00800246  00800246  00003472  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003472  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000006c0  00000000  00000000  000034a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000b30  00000000  00000000  00003b62  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009c94  00000000  00000000  00004692  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001686  00000000  00000000  0000e326  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000036c5  00000000  00000000  0000f9ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001048  00000000  00000000  00013074  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001fa3  00000000  00000000  000140bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005b37  00000000  00000000  0001605f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000680  00000000  00000000  0001bb96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 09 01 	jmp	0x212	; 0x212 <__ctors_end>
       4:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
       8:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
       c:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <__vector_3>
      10:	0c 94 b3 0b 	jmp	0x1766	; 0x1766 <__vector_4>
      14:	0c 94 bd 0b 	jmp	0x177a	; 0x177a <__vector_5>
      18:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
      1c:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
      20:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
      24:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
      28:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
      2c:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
      30:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
      34:	0c 94 78 05 	jmp	0xaf0	; 0xaf0 <__vector_13>
      38:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
      3c:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
      40:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
      44:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
      48:	0c 94 25 10 	jmp	0x204a	; 0x204a <__vector_18>
      4c:	0c 94 60 10 	jmp	0x20c0	; 0x20c0 <__vector_19>
      50:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
      54:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
      58:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
      5c:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
      60:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
      64:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 07       	cpc	r19, r31
      96:	63 42       	sbci	r22, 0x23	; 35
      98:	36 b7       	in	r19, 0x36	; 54
      9a:	9b d8       	rcall	.-3786   	; 0xfffff1d2 <__eeprom_end+0xff7ef1d2>
      9c:	a7 1a       	sub	r10, r23
      9e:	39 68       	ori	r19, 0x89	; 137
      a0:	56 18       	sub	r5, r6
      a2:	ae ba       	out	0x1e, r10	; 30
      a4:	ab 55       	subi	r26, 0x5B	; 91
      a6:	8c 1d       	adc	r24, r12
      a8:	3c b7       	in	r19, 0x3c	; 60
      aa:	cc 57       	subi	r28, 0x7C	; 124
      ac:	63 bd       	out	0x23, r22	; 35
      ae:	6d ed       	ldi	r22, 0xDD	; 221
      b0:	fd 75       	andi	r31, 0x5D	; 93
      b2:	3e f6       	brtc	.-114    	; 0x42 <__SREG__+0x3>
      b4:	17 72       	andi	r17, 0x27	; 39
      b6:	31 bf       	out	0x31, r19	; 49
      b8:	00 00       	nop
      ba:	00 80       	ld	r0, Z
      bc:	3f 00       	.word	0x003f	; ????

000000be <__trampolines_end>:
      be:	4d 50       	subi	r20, 0x0D	; 13
      c0:	55 20       	and	r5, r5
      c2:	4e 4f       	sbci	r20, 0xFE	; 254
      c4:	4b 00       	.word	0x004b	; ????

000000c6 <_ZZ5setupE3__c_0>:
      c6:	4d 50 55 20 4f 4b 00                                MPU OK.

000000cd <_ZZ5setupE3__c>:
      cd:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 2e 2e 2e 00     Initializing....

000000dd <_ZZ10calibraESCvE3__c>:
      dd:	57 61 69 74 20 74 68 65 20 62 69 74 73 20 61 6e     Wait the bits an
      ed:	64 20 73 65 6e 64 20 73 6f 6d 65 74 68 69 6e 67     d send something
      fd:	20 61 67 61 69 6e 2e 2e 2e 0a 20 61 6d 6f 73 74      again.... amost
     10d:	72 61 73 3d 5b 00 00 40 7a 10 f3 5a 00 a0 72 4e     ras=[..@z..Z..rN
     11d:	18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4     ..........vH....
     12d:	0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00     .T.....;........
     13d:	80 96 98 00 00 00 40 42 0f 00 00 00 a0 86 01 00     ......@B........
     14d:	00 00 10 27 00 00 00 00 e8 03 00 00 00 00 64 00     ...'..........d.
     15d:	00 00 00 00 0a 00 00 00 00 00 01 00 00 00 00 00     ................
     16d:	2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1     ,v...gO.#....Y..
     17d:	b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2     .....S.:.Q.v....
     18d:	84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f     .&....b.@|o.....
     19d:	40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c     @...o....Z*.\.kl
     1ad:	f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00     .gm......G.. ...
     1bd:	d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e 08 00     .......5w.......
     1cd:	00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e     . N......3333..n
     1dd:	12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6     ...A..!..;.U....
     1ed:	db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24     ....K8..|......$
     1fd:	20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27      2.r^"....$...='
	...

0000020e <__ctors_start>:
     20e:	c7 0b       	sbc	r28, r23
     210:	d4 11       	cpse	r29, r4

00000212 <__ctors_end>:
     212:	11 24       	eor	r1, r1
     214:	1f be       	out	0x3f, r1	; 63
     216:	cf ef       	ldi	r28, 0xFF	; 255
     218:	d8 e0       	ldi	r29, 0x08	; 8
     21a:	de bf       	out	0x3e, r29	; 62
     21c:	cd bf       	out	0x3d, r28	; 61

0000021e <__do_copy_data>:
     21e:	12 e0       	ldi	r17, 0x02	; 2
     220:	a0 e0       	ldi	r26, 0x00	; 0
     222:	b1 e0       	ldi	r27, 0x01	; 1
     224:	e8 e9       	ldi	r30, 0x98	; 152
     226:	f2 e3       	ldi	r31, 0x32	; 50
     228:	02 c0       	rjmp	.+4      	; 0x22e <__do_copy_data+0x10>
     22a:	05 90       	lpm	r0, Z+
     22c:	0d 92       	st	X+, r0
     22e:	a6 34       	cpi	r26, 0x46	; 70
     230:	b1 07       	cpc	r27, r17
     232:	d9 f7       	brne	.-10     	; 0x22a <__do_copy_data+0xc>

00000234 <__do_clear_bss>:
     234:	23 e0       	ldi	r18, 0x03	; 3
     236:	a6 e4       	ldi	r26, 0x46	; 70
     238:	b2 e0       	ldi	r27, 0x02	; 2
     23a:	01 c0       	rjmp	.+2      	; 0x23e <.do_clear_bss_start>

0000023c <.do_clear_bss_loop>:
     23c:	1d 92       	st	X+, r1

0000023e <.do_clear_bss_start>:
     23e:	a1 39       	cpi	r26, 0x91	; 145
     240:	b2 07       	cpc	r27, r18
     242:	e1 f7       	brne	.-8      	; 0x23c <.do_clear_bss_loop>

00000244 <__do_global_ctors>:
     244:	12 e0       	ldi	r17, 0x02	; 2
     246:	c2 e1       	ldi	r28, 0x12	; 18
     248:	d2 e0       	ldi	r29, 0x02	; 2
     24a:	04 c0       	rjmp	.+8      	; 0x254 <__do_global_ctors+0x10>
     24c:	22 97       	sbiw	r28, 0x02	; 2
     24e:	fe 01       	movw	r30, r28
     250:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <__tablejump__>
     254:	ce 30       	cpi	r28, 0x0E	; 14
     256:	d1 07       	cpc	r29, r17
     258:	c9 f7       	brne	.-14     	; 0x24c <__do_global_ctors+0x8>
     25a:	0e 94 24 0c 	call	0x1848	; 0x1848 <main>
     25e:	0c 94 4a 19 	jmp	0x3294	; 0x3294 <_exit>

00000262 <__bad_interrupt>:
     262:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000266 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     266:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     26a:	88 e4       	ldi	r24, 0x48	; 72
     26c:	80 93 b8 00 	sts	0x00B8, r24
     270:	08 95       	ret

00000272 <i2c_start>:
{
	uint32_t  i2c_timer = 0;
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     272:	94 ea       	ldi	r25, 0xA4	; 164
     274:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
     278:	4f ef       	ldi	r20, 0xFF	; 255
     27a:	50 e0       	ldi	r21, 0x00	; 0
     27c:	60 e0       	ldi	r22, 0x00	; 0
     27e:	70 e0       	ldi	r23, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     280:	ec eb       	ldi	r30, 0xBC	; 188
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	90 81       	ld	r25, Z
     286:	99 23       	and	r25, r25
     288:	34 f0       	brlt	.+12     	; 0x296 <i2c_start+0x24>
     28a:	41 50       	subi	r20, 0x01	; 1
     28c:	51 09       	sbc	r21, r1
     28e:	61 09       	sbc	r22, r1
     290:	71 09       	sbc	r23, r1
     292:	c0 f7       	brcc	.-16     	; 0x284 <i2c_start+0x12>
     294:	04 c0       	rjmp	.+8      	; 0x29e <i2c_start+0x2c>
	if(i2c_timer == 0)
     296:	45 2b       	or	r20, r21
     298:	46 2b       	or	r20, r22
     29a:	47 2b       	or	r20, r23
     29c:	41 f1       	breq	.+80     	; 0x2ee <i2c_start+0x7c>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     29e:	90 91 b9 00 	lds	r25, 0x00B9
     2a2:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     2a4:	98 30       	cpi	r25, 0x08	; 8
     2a6:	11 f0       	breq	.+4      	; 0x2ac <i2c_start+0x3a>
     2a8:	90 31       	cpi	r25, 0x10	; 16
     2aa:	19 f5       	brne	.+70     	; 0x2f2 <i2c_start+0x80>

	// send device address
	TWDR = address;
     2ac:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     2b0:	84 e8       	ldi	r24, 0x84	; 132
     2b2:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
     2b6:	8f ef       	ldi	r24, 0xFF	; 255
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	a0 e0       	ldi	r26, 0x00	; 0
     2bc:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     2be:	ec eb       	ldi	r30, 0xBC	; 188
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	20 81       	ld	r18, Z
     2c4:	22 23       	and	r18, r18
     2c6:	2c f0       	brlt	.+10     	; 0x2d2 <i2c_start+0x60>
     2c8:	01 97       	sbiw	r24, 0x01	; 1
     2ca:	a1 09       	sbc	r26, r1
     2cc:	b1 09       	sbc	r27, r1
     2ce:	c8 f7       	brcc	.-14     	; 0x2c2 <i2c_start+0x50>
     2d0:	04 c0       	rjmp	.+8      	; 0x2da <i2c_start+0x68>
	if(i2c_timer == 0)
     2d2:	89 2b       	or	r24, r25
     2d4:	8a 2b       	or	r24, r26
     2d6:	8b 2b       	or	r24, r27
     2d8:	71 f0       	breq	.+28     	; 0x2f6 <i2c_start+0x84>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     2da:	90 91 b9 00 	lds	r25, 0x00B9
     2de:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     2e0:	98 31       	cpi	r25, 0x18	; 24
     2e2:	59 f0       	breq	.+22     	; 0x2fa <i2c_start+0x88>
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	90 34       	cpi	r25, 0x40	; 64
     2e8:	49 f4       	brne	.+18     	; 0x2fc <i2c_start+0x8a>
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	08 95       	ret

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
     2fa:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
     2fc:	08 95       	ret

000002fe <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     2fe:	84 e9       	ldi	r24, 0x94	; 148
     300:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	ec eb       	ldi	r30, 0xBC	; 188
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	20 81       	ld	r18, Z
     30e:	24 ff       	sbrs	r18, 4
     310:	05 c0       	rjmp	.+10     	; 0x31c <i2c_stop+0x1e>
     312:	01 96       	adiw	r24, 0x01	; 1
     314:	81 15       	cp	r24, r1
     316:	21 e0       	ldi	r18, 0x01	; 1
     318:	92 07       	cpc	r25, r18
     31a:	c1 f7       	brne	.-16     	; 0x30c <i2c_stop+0xe>
     31c:	08 95       	ret

0000031e <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     31e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     322:	84 e8       	ldi	r24, 0x84	; 132
     324:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
     328:	8f ef       	ldi	r24, 0xFF	; 255
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	a0 e0       	ldi	r26, 0x00	; 0
     32e:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     330:	ec eb       	ldi	r30, 0xBC	; 188
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	20 81       	ld	r18, Z
     336:	22 23       	and	r18, r18
     338:	2c f0       	brlt	.+10     	; 0x344 <i2c_write+0x26>
     33a:	01 97       	sbiw	r24, 0x01	; 1
     33c:	a1 09       	sbc	r26, r1
     33e:	b1 09       	sbc	r27, r1
     340:	c8 f7       	brcc	.-14     	; 0x334 <i2c_write+0x16>
     342:	04 c0       	rjmp	.+8      	; 0x34c <i2c_write+0x2e>
	if(i2c_timer == 0)
     344:	89 2b       	or	r24, r25
     346:	8a 2b       	or	r24, r26
     348:	8b 2b       	or	r24, r27
     34a:	41 f0       	breq	.+16     	; 0x35c <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     34c:	90 91 b9 00 	lds	r25, 0x00B9
     350:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	98 32       	cpi	r25, 0x28	; 40
     356:	19 f4       	brne	.+6      	; 0x35e <i2c_write+0x40>
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     35c:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     35e:	08 95       	ret

00000360 <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     360:	84 ec       	ldi	r24, 0xC4	; 196
     362:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
     366:	8f ef       	ldi	r24, 0xFF	; 255
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	a0 e0       	ldi	r26, 0x00	; 0
     36c:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     36e:	ec eb       	ldi	r30, 0xBC	; 188
     370:	f0 e0       	ldi	r31, 0x00	; 0
     372:	20 81       	ld	r18, Z
     374:	22 23       	and	r18, r18
     376:	2c f0       	brlt	.+10     	; 0x382 <i2c_readAck+0x22>
     378:	01 97       	sbiw	r24, 0x01	; 1
     37a:	a1 09       	sbc	r26, r1
     37c:	b1 09       	sbc	r27, r1
     37e:	c8 f7       	brcc	.-14     	; 0x372 <i2c_readAck+0x12>
     380:	04 c0       	rjmp	.+8      	; 0x38a <i2c_readAck+0x2a>
	if(i2c_timer == 0)
     382:	89 2b       	or	r24, r25
     384:	8a 2b       	or	r24, r26
     386:	8b 2b       	or	r24, r27
     388:	19 f0       	breq	.+6      	; 0x390 <i2c_readAck+0x30>
		return 0;

    return TWDR;
     38a:	80 91 bb 00 	lds	r24, 0x00BB
     38e:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     390:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
     392:	08 95       	ret

00000394 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
     394:	84 e8       	ldi	r24, 0x84	; 132
     396:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
     39a:	8f ef       	ldi	r24, 0xFF	; 255
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	a0 e0       	ldi	r26, 0x00	; 0
     3a0:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     3a2:	ec eb       	ldi	r30, 0xBC	; 188
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	20 81       	ld	r18, Z
     3a8:	22 23       	and	r18, r18
     3aa:	2c f0       	brlt	.+10     	; 0x3b6 <i2c_readNak+0x22>
     3ac:	01 97       	sbiw	r24, 0x01	; 1
     3ae:	a1 09       	sbc	r26, r1
     3b0:	b1 09       	sbc	r27, r1
     3b2:	c8 f7       	brcc	.-14     	; 0x3a6 <i2c_readNak+0x12>
     3b4:	04 c0       	rjmp	.+8      	; 0x3be <i2c_readNak+0x2a>
	if(i2c_timer == 0)
     3b6:	89 2b       	or	r24, r25
     3b8:	8a 2b       	or	r24, r26
     3ba:	8b 2b       	or	r24, r27
     3bc:	19 f0       	breq	.+6      	; 0x3c4 <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
     3be:	80 91 bb 00 	lds	r24, 0x00BB
     3c2:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     3c4:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
     3c6:	08 95       	ret

000003c8 <mpu6050_readBytes>:
volatile uint8_t buffer[14];

/*
 * read bytes from chip register
 */
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
     3c8:	df 92       	push	r13
     3ca:	ef 92       	push	r14
     3cc:	ff 92       	push	r15
     3ce:	0f 93       	push	r16
     3d0:	1f 93       	push	r17
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	18 2f       	mov	r17, r24
     3d8:	d6 2e       	mov	r13, r22
     3da:	d4 2f       	mov	r29, r20
     3dc:	c5 2f       	mov	r28, r21
	uint8_t i = 0;
	int8_t count = 0;
	if(length > 0) {
     3de:	66 23       	and	r22, r22
     3e0:	51 f1       	breq	.+84     	; 0x436 <mpu6050_readBytes+0x6e>
		//request register
		i2c_start(MPU6050_ADDR | I2C_WRITE);
     3e2:	80 ed       	ldi	r24, 0xD0	; 208
     3e4:	0e 94 39 01 	call	0x272	; 0x272 <i2c_start>
		i2c_write(regAddr);
     3e8:	81 2f       	mov	r24, r17
     3ea:	0e 94 8f 01 	call	0x31e	; 0x31e <i2c_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ee:	85 e3       	ldi	r24, 0x35	; 53
     3f0:	8a 95       	dec	r24
     3f2:	f1 f7       	brne	.-4      	; 0x3f0 <mpu6050_readBytes+0x28>
     3f4:	00 00       	nop
		_delay_us(10);
		//read data
		i2c_start(MPU6050_ADDR | I2C_READ);
     3f6:	81 ed       	ldi	r24, 0xD1	; 209
     3f8:	0e 94 39 01 	call	0x272	; 0x272 <i2c_start>
     3fc:	0d 2f       	mov	r16, r29
     3fe:	1c 2f       	mov	r17, r28
     400:	c0 e0       	ldi	r28, 0x00	; 0
     402:	d0 e0       	ldi	r29, 0x00	; 0
		for(i=0; i<length; i++) {
			count++;
			if(i==length-1)
     404:	ed 2c       	mov	r14, r13
     406:	f1 2c       	mov	r15, r1
     408:	e1 e0       	ldi	r30, 0x01	; 1
     40a:	ee 1a       	sub	r14, r30
     40c:	f1 08       	sbc	r15, r1
     40e:	ce 15       	cp	r28, r14
     410:	df 05       	cpc	r29, r15
     412:	29 f4       	brne	.+10     	; 0x41e <mpu6050_readBytes+0x56>
				data[i] = i2c_readNak();
     414:	0e 94 ca 01 	call	0x394	; 0x394 <i2c_readNak>
     418:	f8 01       	movw	r30, r16
     41a:	80 83       	st	Z, r24
     41c:	04 c0       	rjmp	.+8      	; 0x426 <mpu6050_readBytes+0x5e>
			else
				data[i] = i2c_readAck();
     41e:	0e 94 b0 01 	call	0x360	; 0x360 <i2c_readAck>
     422:	f8 01       	movw	r30, r16
     424:	80 83       	st	Z, r24
     426:	21 96       	adiw	r28, 0x01	; 1
     428:	0f 5f       	subi	r16, 0xFF	; 255
     42a:	1f 4f       	sbci	r17, 0xFF	; 255
		i2c_start(MPU6050_ADDR | I2C_WRITE);
		i2c_write(regAddr);
		_delay_us(10);
		//read data
		i2c_start(MPU6050_ADDR | I2C_READ);
		for(i=0; i<length; i++) {
     42c:	cd 15       	cp	r28, r13
     42e:	78 f3       	brcs	.-34     	; 0x40e <mpu6050_readBytes+0x46>
			if(i==length-1)
				data[i] = i2c_readNak();
			else
				data[i] = i2c_readAck();
		}
		i2c_stop();
     430:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_stop>
     434:	01 c0       	rjmp	.+2      	; 0x438 <mpu6050_readBytes+0x70>
/*
 * read bytes from chip register
 */
int8_t mpu6050_readBytes(uint8_t regAddr, uint8_t length, uint8_t *data) {
	uint8_t i = 0;
	int8_t count = 0;
     436:	d1 2c       	mov	r13, r1
				data[i] = i2c_readAck();
		}
		i2c_stop();
	}
	return count;
}
     438:	8d 2d       	mov	r24, r13
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	1f 91       	pop	r17
     440:	0f 91       	pop	r16
     442:	ff 90       	pop	r15
     444:	ef 90       	pop	r14
     446:	df 90       	pop	r13
     448:	08 95       	ret

0000044a <mpu6050_readByte>:

/*
 * read 1 byte from chip register
 */
int8_t mpu6050_readByte(uint8_t regAddr, uint8_t *data) {
     44a:	ab 01       	movw	r20, r22
    return mpu6050_readBytes(regAddr, 1, data);
     44c:	61 e0       	ldi	r22, 0x01	; 1
     44e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <mpu6050_readBytes>
}
     452:	08 95       	ret

00000454 <mpu6050_writeBytes>:

/*
 * write bytes to chip register
 */
void mpu6050_writeBytes(uint8_t regAddr, uint8_t length, uint8_t* data) {
     454:	ff 92       	push	r15
     456:	0f 93       	push	r16
     458:	1f 93       	push	r17
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	c8 2f       	mov	r28, r24
     460:	06 2f       	mov	r16, r22
     462:	f4 2e       	mov	r15, r20
     464:	15 2f       	mov	r17, r21
	if(length > 0) {
     466:	66 23       	and	r22, r22
     468:	89 f0       	breq	.+34     	; 0x48c <mpu6050_writeBytes+0x38>
		//write data
		i2c_start(MPU6050_ADDR | I2C_WRITE);
     46a:	80 ed       	ldi	r24, 0xD0	; 208
     46c:	0e 94 39 01 	call	0x272	; 0x272 <i2c_start>
		i2c_write(regAddr); //reg
     470:	8c 2f       	mov	r24, r28
     472:	0e 94 8f 01 	call	0x31e	; 0x31e <i2c_write>
     476:	cf 2d       	mov	r28, r15
     478:	d1 2f       	mov	r29, r17
		for (uint8_t i = 0; i < length; i++) {
     47a:	10 e0       	ldi	r17, 0x00	; 0
			i2c_write((uint8_t) data[i]);
     47c:	89 91       	ld	r24, Y+
     47e:	0e 94 8f 01 	call	0x31e	; 0x31e <i2c_write>
void mpu6050_writeBytes(uint8_t regAddr, uint8_t length, uint8_t* data) {
	if(length > 0) {
		//write data
		i2c_start(MPU6050_ADDR | I2C_WRITE);
		i2c_write(regAddr); //reg
		for (uint8_t i = 0; i < length; i++) {
     482:	1f 5f       	subi	r17, 0xFF	; 255
     484:	10 13       	cpse	r17, r16
     486:	fa cf       	rjmp	.-12     	; 0x47c <mpu6050_writeBytes+0x28>
			i2c_write((uint8_t) data[i]);
		}
		i2c_stop();
     488:	0e 94 7f 01 	call	0x2fe	; 0x2fe <i2c_stop>
	}
}
     48c:	df 91       	pop	r29
     48e:	cf 91       	pop	r28
     490:	1f 91       	pop	r17
     492:	0f 91       	pop	r16
     494:	ff 90       	pop	r15
     496:	08 95       	ret

00000498 <mpu6050_writeByte>:

/*
 * write 1 byte to chip register
 */
void mpu6050_writeByte(uint8_t regAddr, uint8_t data) {
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	1f 92       	push	r1
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
     4a2:	69 83       	std	Y+1, r22	; 0x01
    return mpu6050_writeBytes(regAddr, 1, &data);
     4a4:	ae 01       	movw	r20, r28
     4a6:	4f 5f       	subi	r20, 0xFF	; 255
     4a8:	5f 4f       	sbci	r21, 0xFF	; 255
     4aa:	61 e0       	ldi	r22, 0x01	; 1
     4ac:	0e 94 2a 02 	call	0x454	; 0x454 <mpu6050_writeBytes>
}
     4b0:	0f 90       	pop	r0
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	08 95       	ret

000004b8 <mpu6050_readBits>:

/*
 * read bits from chip register
 */
int8_t mpu6050_readBits(uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data) {
     4b8:	ef 92       	push	r14
     4ba:	ff 92       	push	r15
     4bc:	0f 93       	push	r16
     4be:	1f 93       	push	r17
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	1f 92       	push	r1
     4c6:	cd b7       	in	r28, 0x3d	; 61
     4c8:	de b7       	in	r29, 0x3e	; 62
     4ca:	e6 2e       	mov	r14, r22
     4cc:	f4 2e       	mov	r15, r20
     4ce:	89 01       	movw	r16, r18
    // 76543210 bit numbers
    //    xxx   args: bitStart=4, length=3
    //    010   masked
    //   -> 010 shifted
    int8_t count = 0;
    if(length > 0) {
     4d0:	44 23       	and	r20, r20
     4d2:	41 f1       	breq	.+80     	; 0x524 <mpu6050_readBits+0x6c>
		uint8_t b;
		if ((count = mpu6050_readByte(regAddr, &b)) != 0) {
     4d4:	be 01       	movw	r22, r28
     4d6:	6f 5f       	subi	r22, 0xFF	; 255
     4d8:	7f 4f       	sbci	r23, 0xFF	; 255
     4da:	0e 94 25 02 	call	0x44a	; 0x44a <mpu6050_readByte>
     4de:	88 23       	and	r24, r24
     4e0:	11 f1       	breq	.+68     	; 0x526 <mpu6050_readBits+0x6e>
			uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
     4e2:	6e 2d       	mov	r22, r14
     4e4:	70 e0       	ldi	r23, 0x00	; 0
     4e6:	6f 19       	sub	r22, r15
     4e8:	71 09       	sbc	r23, r1
     4ea:	6f 5f       	subi	r22, 0xFF	; 255
     4ec:	7f 4f       	sbci	r23, 0xFF	; 255
     4ee:	21 e0       	ldi	r18, 0x01	; 1
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <mpu6050_readBits+0x40>
     4f4:	22 0f       	add	r18, r18
     4f6:	33 1f       	adc	r19, r19
     4f8:	fa 94       	dec	r15
     4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <mpu6050_readBits+0x3c>
     4fc:	21 50       	subi	r18, 0x01	; 1
     4fe:	31 09       	sbc	r19, r1
     500:	06 2e       	mov	r0, r22
     502:	02 c0       	rjmp	.+4      	; 0x508 <mpu6050_readBits+0x50>
     504:	22 0f       	add	r18, r18
     506:	33 1f       	adc	r19, r19
     508:	0a 94       	dec	r0
     50a:	e2 f7       	brpl	.-8      	; 0x504 <mpu6050_readBits+0x4c>
			b &= mask;
     50c:	99 81       	ldd	r25, Y+1	; 0x01
     50e:	29 23       	and	r18, r25
			b >>= (bitStart - length + 1);
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	a9 01       	movw	r20, r18
     514:	02 c0       	rjmp	.+4      	; 0x51a <mpu6050_readBits+0x62>
     516:	55 95       	asr	r21
     518:	47 95       	ror	r20
     51a:	6a 95       	dec	r22
     51c:	e2 f7       	brpl	.-8      	; 0x516 <mpu6050_readBits+0x5e>
     51e:	f8 01       	movw	r30, r16
     520:	40 83       	st	Z, r20
     522:	01 c0       	rjmp	.+2      	; 0x526 <mpu6050_readBits+0x6e>
    // 01101001 read byte
    // 76543210 bit numbers
    //    xxx   args: bitStart=4, length=3
    //    010   masked
    //   -> 010 shifted
    int8_t count = 0;
     524:	80 e0       	ldi	r24, 0x00	; 0
			b >>= (bitStart - length + 1);
			*data = b;
		}
    }
    return count;
}
     526:	0f 90       	pop	r0
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	1f 91       	pop	r17
     52e:	0f 91       	pop	r16
     530:	ff 90       	pop	r15
     532:	ef 90       	pop	r14
     534:	08 95       	ret

00000536 <mpu6050_writeBits>:
}

/*
 * write bit/bits to chip register
 */
void mpu6050_writeBits(uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
     536:	ef 92       	push	r14
     538:	ff 92       	push	r15
     53a:	0f 93       	push	r16
     53c:	1f 93       	push	r17
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	1f 92       	push	r1
     544:	cd b7       	in	r28, 0x3d	; 61
     546:	de b7       	in	r29, 0x3e	; 62
     548:	18 2f       	mov	r17, r24
     54a:	e6 2e       	mov	r14, r22
     54c:	f4 2e       	mov	r15, r20
     54e:	02 2f       	mov	r16, r18
    //    xxx   args: bitStart=4, length=3
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
	if(length > 0) {
     550:	44 23       	and	r20, r20
     552:	91 f1       	breq	.+100    	; 0x5b8 <mpu6050_writeBits+0x82>
		uint8_t b = 0;
     554:	19 82       	std	Y+1, r1	; 0x01
		if (mpu6050_readByte(regAddr, &b) != 0) { //get current data
     556:	be 01       	movw	r22, r28
     558:	6f 5f       	subi	r22, 0xFF	; 255
     55a:	7f 4f       	sbci	r23, 0xFF	; 255
     55c:	0e 94 25 02 	call	0x44a	; 0x44a <mpu6050_readByte>
     560:	88 23       	and	r24, r24
     562:	51 f1       	breq	.+84     	; 0x5b8 <mpu6050_writeBits+0x82>
			uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
     564:	6e 2d       	mov	r22, r14
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	6f 19       	sub	r22, r15
     56a:	71 09       	sbc	r23, r1
     56c:	6f 5f       	subi	r22, 0xFF	; 255
     56e:	7f 4f       	sbci	r23, 0xFF	; 255
     570:	e1 e0       	ldi	r30, 0x01	; 1
     572:	f0 e0       	ldi	r31, 0x00	; 0
     574:	af 01       	movw	r20, r30
     576:	02 c0       	rjmp	.+4      	; 0x57c <mpu6050_writeBits+0x46>
     578:	44 0f       	add	r20, r20
     57a:	55 1f       	adc	r21, r21
     57c:	fa 94       	dec	r15
     57e:	e2 f7       	brpl	.-8      	; 0x578 <mpu6050_writeBits+0x42>
     580:	41 50       	subi	r20, 0x01	; 1
     582:	51 09       	sbc	r21, r1
     584:	06 2e       	mov	r0, r22
     586:	02 c0       	rjmp	.+4      	; 0x58c <mpu6050_writeBits+0x56>
     588:	44 0f       	add	r20, r20
     58a:	55 1f       	adc	r21, r21
     58c:	0a 94       	dec	r0
     58e:	e2 f7       	brpl	.-8      	; 0x588 <mpu6050_writeBits+0x52>
			data <<= (bitStart - length + 1); // shift data into correct position
     590:	20 2f       	mov	r18, r16
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	c9 01       	movw	r24, r18
     596:	02 c0       	rjmp	.+4      	; 0x59c <mpu6050_writeBits+0x66>
     598:	88 0f       	add	r24, r24
     59a:	99 1f       	adc	r25, r25
     59c:	6a 95       	dec	r22
     59e:	e2 f7       	brpl	.-8      	; 0x598 <mpu6050_writeBits+0x62>
     5a0:	bc 01       	movw	r22, r24
			data &= mask; // zero all non-important bits in data
			b &= ~(mask); // zero all important bits in existing byte
     5a2:	94 2f       	mov	r25, r20
     5a4:	90 95       	com	r25
     5a6:	89 81       	ldd	r24, Y+1	; 0x01
     5a8:	89 23       	and	r24, r25
	if(length > 0) {
		uint8_t b = 0;
		if (mpu6050_readByte(regAddr, &b) != 0) { //get current data
			uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
			data <<= (bitStart - length + 1); // shift data into correct position
			data &= mask; // zero all non-important bits in data
     5aa:	46 23       	and	r20, r22
			b &= ~(mask); // zero all important bits in existing byte
			b |= data; // combine data with existing byte
     5ac:	68 2f       	mov	r22, r24
     5ae:	64 2b       	or	r22, r20
     5b0:	69 83       	std	Y+1, r22	; 0x01
			mpu6050_writeByte(regAddr, b);
     5b2:	81 2f       	mov	r24, r17
     5b4:	0e 94 4c 02 	call	0x498	; 0x498 <mpu6050_writeByte>
		}
	}
}
     5b8:	0f 90       	pop	r0
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	1f 91       	pop	r17
     5c0:	0f 91       	pop	r16
     5c2:	ff 90       	pop	r15
     5c4:	ef 90       	pop	r14
     5c6:	08 95       	ret

000005c8 <mpu6050_writeBit>:

/*
 * write one bit to chip register
 */
void mpu6050_writeBit(uint8_t regAddr, uint8_t bitNum, uint8_t data) {
     5c8:	ff 92       	push	r15
     5ca:	0f 93       	push	r16
     5cc:	1f 93       	push	r17
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	1f 92       	push	r1
     5d4:	cd b7       	in	r28, 0x3d	; 61
     5d6:	de b7       	in	r29, 0x3e	; 62
     5d8:	18 2f       	mov	r17, r24
     5da:	06 2f       	mov	r16, r22
     5dc:	f4 2e       	mov	r15, r20
    uint8_t b;
    mpu6050_readByte(regAddr, &b);
     5de:	be 01       	movw	r22, r28
     5e0:	6f 5f       	subi	r22, 0xFF	; 255
     5e2:	7f 4f       	sbci	r23, 0xFF	; 255
     5e4:	0e 94 25 02 	call	0x44a	; 0x44a <mpu6050_readByte>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
     5e8:	ff 20       	and	r15, r15
     5ea:	59 f0       	breq	.+22     	; 0x602 <mpu6050_writeBit+0x3a>
     5ec:	21 e0       	ldi	r18, 0x01	; 1
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	b9 01       	movw	r22, r18
     5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <mpu6050_writeBit+0x30>
     5f4:	66 0f       	add	r22, r22
     5f6:	77 1f       	adc	r23, r23
     5f8:	0a 95       	dec	r16
     5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <mpu6050_writeBit+0x2c>
     5fc:	89 81       	ldd	r24, Y+1	; 0x01
     5fe:	68 2b       	or	r22, r24
     600:	0b c0       	rjmp	.+22     	; 0x618 <mpu6050_writeBit+0x50>
     602:	21 e0       	ldi	r18, 0x01	; 1
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	b9 01       	movw	r22, r18
     608:	02 c0       	rjmp	.+4      	; 0x60e <mpu6050_writeBit+0x46>
     60a:	66 0f       	add	r22, r22
     60c:	77 1f       	adc	r23, r23
     60e:	0a 95       	dec	r16
     610:	e2 f7       	brpl	.-8      	; 0x60a <mpu6050_writeBit+0x42>
     612:	60 95       	com	r22
     614:	89 81       	ldd	r24, Y+1	; 0x01
     616:	68 23       	and	r22, r24
     618:	69 83       	std	Y+1, r22	; 0x01
    mpu6050_writeByte(regAddr, b);
     61a:	81 2f       	mov	r24, r17
     61c:	0e 94 4c 02 	call	0x498	; 0x498 <mpu6050_writeByte>
}
     620:	0f 90       	pop	r0
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	1f 91       	pop	r17
     628:	0f 91       	pop	r16
     62a:	ff 90       	pop	r15
     62c:	08 95       	ret

0000062e <mpu6050_setSleepDisabled>:

/*
 * set sleep disabled
 */
void mpu6050_setSleepDisabled() {
	mpu6050_writeBit(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, 0);
     62e:	40 e0       	ldi	r20, 0x00	; 0
     630:	66 e0       	ldi	r22, 0x06	; 6
     632:	8b e6       	ldi	r24, 0x6B	; 107
     634:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <mpu6050_writeBit>
     638:	08 95       	ret

0000063a <mpu6050_testConnection>:

/*
 * test connectino to chip
 */
uint8_t mpu6050_testConnection() {
	mpu6050_readBits(MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, (uint8_t *)buffer);
     63a:	2f e7       	ldi	r18, 0x7F	; 127
     63c:	33 e0       	ldi	r19, 0x03	; 3
     63e:	46 e0       	ldi	r20, 0x06	; 6
     640:	66 e0       	ldi	r22, 0x06	; 6
     642:	85 e7       	ldi	r24, 0x75	; 117
     644:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <mpu6050_readBits>
	if(buffer[0] == 0x34)
     648:	90 91 7f 03 	lds	r25, 0x037F
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	94 33       	cpi	r25, 0x34	; 52
     650:	09 f0       	breq	.+2      	; 0x654 <mpu6050_testConnection+0x1a>
     652:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	else
		return 0;
}
     654:	08 95       	ret

00000656 <mpu6050_init>:
 * initialize the accel and gyro
 */
void mpu6050_init() {
	#if MPU6050_I2CINIT == 1
	//init i2c
	i2c_init();
     656:	0e 94 33 01 	call	0x266	; 0x266 <i2c_init>
     65a:	25 e3       	ldi	r18, 0x35	; 53
     65c:	2a 95       	dec	r18
     65e:	f1 f7       	brne	.-4      	; 0x65c <mpu6050_init+0x6>
     660:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     662:	8f ef       	ldi	r24, 0xFF	; 255
     664:	91 ee       	ldi	r25, 0xE1	; 225
     666:	24 e0       	ldi	r18, 0x04	; 4
     668:	81 50       	subi	r24, 0x01	; 1
     66a:	90 40       	sbci	r25, 0x00	; 0
     66c:	20 40       	sbci	r18, 0x00	; 0
     66e:	e1 f7       	brne	.-8      	; 0x668 <mpu6050_init+0x12>
     670:	00 c0       	rjmp	.+0      	; 0x672 <mpu6050_init+0x1c>
     672:	00 00       	nop

	//allow mpu6050 chip clocks to start up
	_delay_ms(100);

	//set sleep disabled
	mpu6050_setSleepDisabled();
     674:	0e 94 17 03 	call	0x62e	; 0x62e <mpu6050_setSleepDisabled>
     678:	8f e3       	ldi	r24, 0x3F	; 63
     67a:	9c e9       	ldi	r25, 0x9C	; 156
     67c:	01 97       	sbiw	r24, 0x01	; 1
     67e:	f1 f7       	brne	.-4      	; 0x67c <mpu6050_init+0x26>
     680:	00 c0       	rjmp	.+0      	; 0x682 <mpu6050_init+0x2c>
     682:	00 00       	nop
	_delay_ms(10);

	//set clock source
	//  it is highly recommended that the device be configured to use one of the gyroscopes (or an external clock source)
	//  as the clock reference for improved stability
	mpu6050_writeBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_XGYRO);
     684:	21 e0       	ldi	r18, 0x01	; 1
     686:	43 e0       	ldi	r20, 0x03	; 3
     688:	62 e0       	ldi	r22, 0x02	; 2
     68a:	8b e6       	ldi	r24, 0x6B	; 107
     68c:	0e 94 9b 02 	call	0x536	; 0x536 <mpu6050_writeBits>
	//set DLPF bandwidth to 42Hz
	mpu6050_writeBits(MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, MPU6050_DLPF_BW_42);
     690:	23 e0       	ldi	r18, 0x03	; 3
     692:	43 e0       	ldi	r20, 0x03	; 3
     694:	62 e0       	ldi	r22, 0x02	; 2
     696:	8a e1       	ldi	r24, 0x1A	; 26
     698:	0e 94 9b 02 	call	0x536	; 0x536 <mpu6050_writeBits>
    //set sampe rate
	mpu6050_writeByte(MPU6050_RA_SMPLRT_DIV, 4); //1khz / (1 + 4) = 200Hz
     69c:	64 e0       	ldi	r22, 0x04	; 4
     69e:	89 e1       	ldi	r24, 0x19	; 25
     6a0:	0e 94 4c 02 	call	0x498	; 0x498 <mpu6050_writeByte>
	//set gyro range
	mpu6050_writeBits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS);
     6a4:	21 e0       	ldi	r18, 0x01	; 1
     6a6:	42 e0       	ldi	r20, 0x02	; 2
     6a8:	64 e0       	ldi	r22, 0x04	; 4
     6aa:	8b e1       	ldi	r24, 0x1B	; 27
     6ac:	0e 94 9b 02 	call	0x536	; 0x536 <mpu6050_writeBits>
	//set accel range
	mpu6050_writeBits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, MPU6050_ACCEL_FS);
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	42 e0       	ldi	r20, 0x02	; 2
     6b4:	64 e0       	ldi	r22, 0x04	; 4
     6b6:	8c e1       	ldi	r24, 0x1C	; 28
     6b8:	0e 94 9b 02 	call	0x536	; 0x536 <mpu6050_writeBits>
     6bc:	08 95       	ret

000006be <mpu6050_getRawData>:

//can not accept many request if we alreay have getattitude requests
/*
 * get raw data
 */
void mpu6050_getRawData(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
     6be:	8f 92       	push	r8
     6c0:	9f 92       	push	r9
     6c2:	af 92       	push	r10
     6c4:	bf 92       	push	r11
     6c6:	cf 92       	push	r12
     6c8:	df 92       	push	r13
     6ca:	ef 92       	push	r14
     6cc:	ff 92       	push	r15
     6ce:	0f 93       	push	r16
     6d0:	1f 93       	push	r17
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	4c 01       	movw	r8, r24
     6d8:	5b 01       	movw	r10, r22
     6da:	6a 01       	movw	r12, r20
     6dc:	e9 01       	movw	r28, r18
	mpu6050_readBytes(MPU6050_RA_ACCEL_XOUT_H, 14, (uint8_t *)buffer);
     6de:	4f e7       	ldi	r20, 0x7F	; 127
     6e0:	53 e0       	ldi	r21, 0x03	; 3
     6e2:	6e e0       	ldi	r22, 0x0E	; 14
     6e4:	8b e3       	ldi	r24, 0x3B	; 59
     6e6:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <mpu6050_readBytes>

    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
     6ea:	20 91 7f 03 	lds	r18, 0x037F
     6ee:	80 91 80 03 	lds	r24, 0x0380
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	92 2b       	or	r25, r18
     6f6:	f4 01       	movw	r30, r8
     6f8:	91 83       	std	Z+1, r25	; 0x01
     6fa:	80 83       	st	Z, r24
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
     6fc:	20 91 81 03 	lds	r18, 0x0381
     700:	80 91 82 03 	lds	r24, 0x0382
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	92 2b       	or	r25, r18
     708:	f5 01       	movw	r30, r10
     70a:	91 83       	std	Z+1, r25	; 0x01
     70c:	80 83       	st	Z, r24
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
     70e:	20 91 83 03 	lds	r18, 0x0383
     712:	80 91 84 03 	lds	r24, 0x0384
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	92 2b       	or	r25, r18
     71a:	f6 01       	movw	r30, r12
     71c:	91 83       	std	Z+1, r25	; 0x01
     71e:	80 83       	st	Z, r24
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
     720:	20 91 87 03 	lds	r18, 0x0387
     724:	80 91 88 03 	lds	r24, 0x0388
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	92 2b       	or	r25, r18
     72c:	99 83       	std	Y+1, r25	; 0x01
     72e:	88 83       	st	Y, r24
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
     730:	20 91 89 03 	lds	r18, 0x0389
     734:	80 91 8a 03 	lds	r24, 0x038A
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	92 2b       	or	r25, r18
     73c:	f8 01       	movw	r30, r16
     73e:	91 83       	std	Z+1, r25	; 0x01
     740:	80 83       	st	Z, r24
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
     742:	20 91 8b 03 	lds	r18, 0x038B
     746:	80 91 8c 03 	lds	r24, 0x038C
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	92 2b       	or	r25, r18
     74e:	f7 01       	movw	r30, r14
     750:	91 83       	std	Z+1, r25	; 0x01
     752:	80 83       	st	Z, r24
}
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	1f 91       	pop	r17
     75a:	0f 91       	pop	r16
     75c:	ff 90       	pop	r15
     75e:	ef 90       	pop	r14
     760:	df 90       	pop	r13
     762:	cf 90       	pop	r12
     764:	bf 90       	pop	r11
     766:	af 90       	pop	r10
     768:	9f 90       	pop	r9
     76a:	8f 90       	pop	r8
     76c:	08 95       	ret

0000076e <_Z12timer0Configib>:
void motorconfig(int prescale,bool inverted);


void timer0Config(int prescale,bool inverted)
{
	PRR    &= ~(1<<PRTIM0);
     76e:	20 91 64 00 	lds	r18, 0x0064
     772:	2f 7d       	andi	r18, 0xDF	; 223
     774:	20 93 64 00 	sts	0x0064, r18
	TCCR0A  =  (1<<WGM00);	// Correct phase PWM mode 
     778:	21 e0       	ldi	r18, 0x01	; 1
     77a:	24 bd       	out	0x24, r18	; 36
	//TCCR0A |=  (1<<WGM01);	// fast PWM mode
	TCCR0A |=  (1<<COM0A1);	// Compare match normal mode
     77c:	24 b5       	in	r18, 0x24	; 36
     77e:	20 68       	ori	r18, 0x80	; 128
     780:	24 bd       	out	0x24, r18	; 36
	TCCR0A |=  (1<<COM0B1);	// Compare match normal mode
     782:	24 b5       	in	r18, 0x24	; 36
     784:	20 62       	ori	r18, 0x20	; 32
     786:	24 bd       	out	0x24, r18	; 36
	if(inverted)
     788:	66 23       	and	r22, r22
     78a:	31 f0       	breq	.+12     	; 0x798 <_Z12timer0Configib+0x2a>
	{
		TCCR0A |=  (1<<COM0A0);	// Compare Match inverting mode
     78c:	24 b5       	in	r18, 0x24	; 36
     78e:	20 64       	ori	r18, 0x40	; 64
     790:	24 bd       	out	0x24, r18	; 36
		TCCR0A |=  (1<<COM0B0);	// Compare Match inverting mode
     792:	24 b5       	in	r18, 0x24	; 36
     794:	20 61       	ori	r18, 0x10	; 16
     796:	24 bd       	out	0x24, r18	; 36
	}
	switch (prescale)
     798:	80 34       	cpi	r24, 0x40	; 64
     79a:	91 05       	cpc	r25, r1
     79c:	91 f0       	breq	.+36     	; 0x7c2 <_Z12timer0Configib+0x54>
     79e:	34 f4       	brge	.+12     	; 0x7ac <_Z12timer0Configib+0x3e>
     7a0:	81 30       	cpi	r24, 0x01	; 1
     7a2:	91 05       	cpc	r25, r1
     7a4:	c1 f0       	breq	.+48     	; 0x7d6 <_Z12timer0Configib+0x68>
     7a6:	08 97       	sbiw	r24, 0x08	; 8
     7a8:	79 f0       	breq	.+30     	; 0x7c8 <_Z12timer0Configib+0x5a>
     7aa:	18 c0       	rjmp	.+48     	; 0x7dc <_Z12timer0Configib+0x6e>
     7ac:	81 15       	cp	r24, r1
     7ae:	21 e0       	ldi	r18, 0x01	; 1
     7b0:	92 07       	cpc	r25, r18
     7b2:	71 f0       	breq	.+28     	; 0x7d0 <_Z12timer0Configib+0x62>
     7b4:	81 15       	cp	r24, r1
     7b6:	94 40       	sbci	r25, 0x04	; 4
     7b8:	89 f4       	brne	.+34     	; 0x7dc <_Z12timer0Configib+0x6e>
		break;
		case fastPWM_250:
		TCCR0B |=  (1<<CS02);	
		break;
		case fastPWM_62:
		TCCR0B |=  (1<<CS02);	
     7ba:	85 b5       	in	r24, 0x25	; 37
     7bc:	84 60       	ori	r24, 0x04	; 4
     7be:	85 bd       	out	0x25, r24	; 37
     7c0:	0a c0       	rjmp	.+20     	; 0x7d6 <_Z12timer0Configib+0x68>
		break;
		case fastPWM_8k:
		TCCR0B |=  (1<<CS01);	
		break;
		case fastPWM_1k:
		TCCR0B |=  (1<<CS00);	
     7c2:	85 b5       	in	r24, 0x25	; 37
     7c4:	81 60       	ori	r24, 0x01	; 1
     7c6:	85 bd       	out	0x25, r24	; 37
	{
		case fastPWM_64k:
		TCCR0B |=  (1<<CS00);	
		break;
		case fastPWM_8k:
		TCCR0B |=  (1<<CS01);	
     7c8:	85 b5       	in	r24, 0x25	; 37
     7ca:	82 60       	ori	r24, 0x02	; 2
     7cc:	85 bd       	out	0x25, r24	; 37
		break;
     7ce:	0a c0       	rjmp	.+20     	; 0x7e4 <_Z12timer0Configib+0x76>
		case fastPWM_1k:
		TCCR0B |=  (1<<CS00);	
		TCCR0B |=  (1<<CS01);	
		break;
		case fastPWM_250:
		TCCR0B |=  (1<<CS02);	
     7d0:	85 b5       	in	r24, 0x25	; 37
     7d2:	84 60       	ori	r24, 0x04	; 4
     7d4:	fb cf       	rjmp	.-10     	; 0x7cc <_Z12timer0Configib+0x5e>
		break;
		case fastPWM_62:
		TCCR0B |=  (1<<CS02);	
		TCCR0B |=  (1<<CS00);	
     7d6:	85 b5       	in	r24, 0x25	; 37
     7d8:	81 60       	ori	r24, 0x01	; 1
     7da:	f8 cf       	rjmp	.-16     	; 0x7cc <_Z12timer0Configib+0x5e>
		break;
		default:
		timer0Config(8,inverted);
     7dc:	88 e0       	ldi	r24, 0x08	; 8
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	0e 94 b7 03 	call	0x76e	; 0x76e <_Z12timer0Configib>
	}
	sei();
     7e4:	78 94       	sei
     7e6:	08 95       	ret

000007e8 <_Z12timer2Configib>:
}
void timer2Config(int prescale,bool inverted)
{
	PRR    &= ~(1<<PRTIM2);
     7e8:	20 91 64 00 	lds	r18, 0x0064
     7ec:	2f 7b       	andi	r18, 0xBF	; 191
     7ee:	20 93 64 00 	sts	0x0064, r18
	TCCR2A  = (1<<WGM00);	// Correct phase PWM mode
     7f2:	21 e0       	ldi	r18, 0x01	; 1
     7f4:	20 93 b0 00 	sts	0x00B0, r18
	//TCCR2A |= (1<<WGM01);	//fast PWM mode
	TCCR2A |= (1<<COM0A1);	//Set OC2A on
     7f8:	20 91 b0 00 	lds	r18, 0x00B0
     7fc:	20 68       	ori	r18, 0x80	; 128
     7fe:	20 93 b0 00 	sts	0x00B0, r18
	TCCR2A |= (1<<COM0B1);	// 
     802:	20 91 b0 00 	lds	r18, 0x00B0
     806:	20 62       	ori	r18, 0x20	; 32
     808:	20 93 b0 00 	sts	0x00B0, r18
	if(inverted)
     80c:	66 23       	and	r22, r22
     80e:	51 f0       	breq	.+20     	; 0x824 <_Z12timer2Configib+0x3c>
	{
		TCCR2A |= (1<<COM0A0);	// invertido
     810:	20 91 b0 00 	lds	r18, 0x00B0
     814:	20 64       	ori	r18, 0x40	; 64
     816:	20 93 b0 00 	sts	0x00B0, r18
		TCCR2A |= (1<<COM0B0);	// invertido
     81a:	20 91 b0 00 	lds	r18, 0x00B0
     81e:	20 61       	ori	r18, 0x10	; 16
     820:	20 93 b0 00 	sts	0x00B0, r18
	}
	switch (prescale)
     824:	80 34       	cpi	r24, 0x40	; 64
     826:	91 05       	cpc	r25, r1
     828:	01 f1       	breq	.+64     	; 0x86a <_Z12timer2Configib+0x82>
     82a:	4c f4       	brge	.+18     	; 0x83e <_Z12timer2Configib+0x56>
     82c:	81 30       	cpi	r24, 0x01	; 1
     82e:	91 05       	cpc	r25, r1
     830:	99 f0       	breq	.+38     	; 0x858 <_Z12timer2Configib+0x70>
     832:	08 97       	sbiw	r24, 0x08	; 8
     834:	01 f5       	brne	.+64     	; 0x876 <_Z12timer2Configib+0x8e>
	{
		case fastPWM_64k:
		TCCR2B |=  (1<<CS20);
		break;
		case fastPWM_8k:
		TCCR2B |=  (1<<CS21);
     836:	80 91 b1 00 	lds	r24, 0x00B1
     83a:	82 60       	ori	r24, 0x02	; 2
     83c:	19 c0       	rjmp	.+50     	; 0x870 <_Z12timer2Configib+0x88>
	if(inverted)
	{
		TCCR2A |= (1<<COM0A0);	// invertido
		TCCR2A |= (1<<COM0B0);	// invertido
	}
	switch (prescale)
     83e:	81 15       	cp	r24, r1
     840:	21 e0       	ldi	r18, 0x01	; 1
     842:	92 07       	cpc	r25, r18
     844:	69 f0       	breq	.+26     	; 0x860 <_Z12timer2Configib+0x78>
     846:	81 15       	cp	r24, r1
     848:	94 40       	sbci	r25, 0x04	; 4
     84a:	a9 f4       	brne	.+42     	; 0x876 <_Z12timer2Configib+0x8e>
		case fastPWM_250:
		TCCR2B |=  (1<<CS21);
		TCCR2B |=  (1<<CS22);
		break;
		case fastPWM_62:
		TCCR2B |=  (1<<CS20);
     84c:	80 91 b1 00 	lds	r24, 0x00B1
     850:	81 60       	ori	r24, 0x01	; 1
     852:	80 93 b1 00 	sts	0x00B1, r24
     856:	04 c0       	rjmp	.+8      	; 0x860 <_Z12timer2Configib+0x78>
		TCCR2A |= (1<<COM0B0);	// invertido
	}
	switch (prescale)
	{
		case fastPWM_64k:
		TCCR2B |=  (1<<CS20);
     858:	80 91 b1 00 	lds	r24, 0x00B1
     85c:	81 60       	ori	r24, 0x01	; 1
     85e:	08 c0       	rjmp	.+16     	; 0x870 <_Z12timer2Configib+0x88>
		TCCR2B |=  (1<<CS21);
		TCCR2B |=  (1<<CS22);
		break;
		case fastPWM_62:
		TCCR2B |=  (1<<CS20);
		TCCR2B |=  (1<<CS21);
     860:	80 91 b1 00 	lds	r24, 0x00B1
     864:	82 60       	ori	r24, 0x02	; 2
     866:	80 93 b1 00 	sts	0x00B1, r24
		TCCR2B |=  (1<<CS22);
     86a:	80 91 b1 00 	lds	r24, 0x00B1
     86e:	84 60       	ori	r24, 0x04	; 4
	{
		case fastPWM_64k:
		TCCR2B |=  (1<<CS20);
		break;
		case fastPWM_8k:
		TCCR2B |=  (1<<CS21);
     870:	80 93 b1 00 	sts	0x00B1, r24
		break;
     874:	04 c0       	rjmp	.+8      	; 0x87e <_Z12timer2Configib+0x96>
		case fastPWM_62:
		TCCR2B |=  (1<<CS20);
		TCCR2B |=  (1<<CS21);
		TCCR2B |=  (1<<CS22);
		break;
		default:timer2Config(8,inverted);
     876:	88 e0       	ldi	r24, 0x08	; 8
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <_Z12timer2Configib>
	}
	sei();
     87e:	78 94       	sei
     880:	08 95       	ret

00000882 <_Z11motorConfigib>:
 * \param inverted - set if the pwm wave will be inverted or not
 * 
 * \return void
 */
void motorConfig(int prescale,bool inverted)
{
     882:	1f 93       	push	r17
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	ec 01       	movw	r28, r24
     88a:	16 2f       	mov	r17, r22
	DDRD |= (1<<PD1);
     88c:	51 9a       	sbi	0x0a, 1	; 10
	//set pins pd5,pd6 and pd3,pb3 as output
	DDRD |= (1<<DDD5);//5  OC0B
     88e:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= (1<<DDD6);//6  OC0A
     890:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |= (1<<DDD3);//3  OC2B
     892:	53 9a       	sbi	0x0a, 3	; 10
	DDRB |= (1<<DDB3);//11 OC2A
     894:	23 9a       	sbi	0x04, 3	; 4
	//motor 1 brake
 	PORTD|=(1<<PD5);
     896:	5d 9a       	sbi	0x0b, 5	; 11
 	PORTD|=(1<<PD6);
     898:	5e 9a       	sbi	0x0b, 6	; 11
// 	//motor 2 brake
 	PORTD|=(1<<PD3);
     89a:	5b 9a       	sbi	0x0b, 3	; 11
 	PORTD|=(1<<PB3);
     89c:	5b 9a       	sbi	0x0b, 3	; 11

	timer0Config(prescale,inverted);//start PWM
     89e:	0e 94 b7 03 	call	0x76e	; 0x76e <_Z12timer0Configib>
	timer2Config(prescale,inverted);//start PWM
     8a2:	61 2f       	mov	r22, r17
     8a4:	ce 01       	movw	r24, r28
	//stop();
}
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	1f 91       	pop	r17
// 	//motor 2 brake
 	PORTD|=(1<<PD3);
 	PORTD|=(1<<PB3);

	timer0Config(prescale,inverted);//start PWM
	timer2Config(prescale,inverted);//start PWM
     8ac:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <_Z12timer2Configib>

000008b0 <_Z31CalculateInterruptionParametersf>:
 * \param periodSeconds
 * 
 * \return boolean
 */
boolean CalculateInterruptionParameters(float periodSeconds)
{
     8b0:	8f 92       	push	r8
     8b2:	9f 92       	push	r9
     8b4:	af 92       	push	r10
     8b6:	bf 92       	push	r11
     8b8:	cf 92       	push	r12
     8ba:	df 92       	push	r13
     8bc:	ef 92       	push	r14
     8be:	ff 92       	push	r15
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	4b 01       	movw	r8, r22
     8c6:	5c 01       	movw	r10, r24
	long maxCount=65536L;
	long clockArduinoMega=16000000L;
	float estimatedFrequency;
	float estimatedPrescaler;
	
	estimatedFrequency=(float)maxCount/periodSeconds;
     8c8:	9b 01       	movw	r18, r22
     8ca:	ac 01       	movw	r20, r24
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	80 e8       	ldi	r24, 0x80	; 128
     8d2:	97 e4       	ldi	r25, 0x47	; 71
     8d4:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <__divsf3>
     8d8:	9b 01       	movw	r18, r22
     8da:	ac 01       	movw	r20, r24
	estimatedPrescaler=(float)clockArduinoMega/estimatedFrequency;
     8dc:	60 e0       	ldi	r22, 0x00	; 0
     8de:	74 e2       	ldi	r23, 0x24	; 36
     8e0:	84 e7       	ldi	r24, 0x74	; 116
     8e2:	9b e4       	ldi	r25, 0x4B	; 75
     8e4:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <__divsf3>
     8e8:	6b 01       	movw	r12, r22
     8ea:	7c 01       	movw	r14, r24
	
	if(estimatedPrescaler>0)
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	a9 01       	movw	r20, r18
     8f2:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <__gesf2>
     8f6:	18 16       	cp	r1, r24
     8f8:	0c f0       	brlt	.+2      	; 0x8fc <_Z31CalculateInterruptionParametersf+0x4c>
     8fa:	cb c0       	rjmp	.+406    	; 0xa92 <__stack+0x193>
	{
		if(estimatedPrescaler<=1)
     8fc:	20 e0       	ldi	r18, 0x00	; 0
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	40 e8       	ldi	r20, 0x80	; 128
     902:	5f e3       	ldi	r21, 0x3F	; 63
     904:	c7 01       	movw	r24, r14
     906:	b6 01       	movw	r22, r12
     908:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__cmpsf2>
     90c:	18 16       	cp	r1, r24
     90e:	1c f0       	brlt	.+6      	; 0x916 <__stack+0x17>
		selectedPrescaler=1;
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	34 c0       	rjmp	.+104    	; 0x97e <__stack+0x7f>
		else if(estimatedPrescaler<=8)
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	40 e0       	ldi	r20, 0x00	; 0
     91c:	51 e4       	ldi	r21, 0x41	; 65
     91e:	c7 01       	movw	r24, r14
     920:	b6 01       	movw	r22, r12
     922:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__cmpsf2>
     926:	18 16       	cp	r1, r24
     928:	1c f0       	brlt	.+6      	; 0x930 <__stack+0x31>
		selectedPrescaler=8;
     92a:	88 e0       	ldi	r24, 0x08	; 8
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	27 c0       	rjmp	.+78     	; 0x97e <__stack+0x7f>
		else if(estimatedPrescaler<=64)
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	40 e8       	ldi	r20, 0x80	; 128
     936:	52 e4       	ldi	r21, 0x42	; 66
     938:	c7 01       	movw	r24, r14
     93a:	b6 01       	movw	r22, r12
     93c:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__cmpsf2>
     940:	18 16       	cp	r1, r24
     942:	1c f0       	brlt	.+6      	; 0x94a <__stack+0x4b>
		selectedPrescaler=64;
     944:	80 e4       	ldi	r24, 0x40	; 64
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	1a c0       	rjmp	.+52     	; 0x97e <__stack+0x7f>
		else if(estimatedPrescaler<=256)
     94a:	20 e0       	ldi	r18, 0x00	; 0
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	40 e8       	ldi	r20, 0x80	; 128
     950:	53 e4       	ldi	r21, 0x43	; 67
     952:	c7 01       	movw	r24, r14
     954:	b6 01       	movw	r22, r12
     956:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__cmpsf2>
     95a:	18 16       	cp	r1, r24
     95c:	1c f0       	brlt	.+6      	; 0x964 <__stack+0x65>
		selectedPrescaler=256;
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	0d c0       	rjmp	.+26     	; 0x97e <__stack+0x7f>
		else if(estimatedPrescaler<=1024)
     964:	20 e0       	ldi	r18, 0x00	; 0
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	40 e8       	ldi	r20, 0x80	; 128
     96a:	54 e4       	ldi	r21, 0x44	; 68
     96c:	c7 01       	movw	r24, r14
     96e:	b6 01       	movw	r22, r12
     970:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__cmpsf2>
     974:	18 16       	cp	r1, r24
     976:	0c f4       	brge	.+2      	; 0x97a <__stack+0x7b>
     978:	8c c0       	rjmp	.+280    	; 0xa92 <__stack+0x193>
		selectedPrescaler=1024;
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	94 e0       	ldi	r25, 0x04	; 4
     97e:	90 93 c7 02 	sts	0x02C7, r25
     982:	80 93 c6 02 	sts	0x02C6, r24
			return false; // selectedPrescaler=1024; // Selects maximum prescaler if it should be greater then 1024
		}
	}
	else return false; // selectedPrescaler=1; // Selects minimum prescaler if it is zero or negative
	
	interruptionFrequency=(long)clockArduinoMega/selectedPrescaler;
     986:	c0 91 c6 02 	lds	r28, 0x02C6
     98a:	d0 91 c7 02 	lds	r29, 0x02C7
     98e:	9e 01       	movw	r18, r28
     990:	44 27       	eor	r20, r20
     992:	37 fd       	sbrc	r19, 7
     994:	40 95       	com	r20
     996:	54 2f       	mov	r21, r20
     998:	60 e0       	ldi	r22, 0x00	; 0
     99a:	74 e2       	ldi	r23, 0x24	; 36
     99c:	84 ef       	ldi	r24, 0xF4	; 244
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__divmodsi4>
     9a4:	20 93 cc 02 	sts	0x02CC, r18
     9a8:	30 93 cd 02 	sts	0x02CD, r19
     9ac:	40 93 ce 02 	sts	0x02CE, r20
     9b0:	50 93 cf 02 	sts	0x02CF, r21
	maxPeriodWithPrescaler=(float)maxCount/interruptionFrequency;
     9b4:	ca 01       	movw	r24, r20
     9b6:	b9 01       	movw	r22, r18
     9b8:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__floatsisf>
     9bc:	6b 01       	movw	r12, r22
     9be:	7c 01       	movw	r14, r24
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e0       	ldi	r23, 0x00	; 0
     9c8:	80 e8       	ldi	r24, 0x80	; 128
     9ca:	97 e4       	ldi	r25, 0x47	; 71
     9cc:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <__divsf3>
     9d0:	60 93 d0 02 	sts	0x02D0, r22
     9d4:	70 93 d1 02 	sts	0x02D1, r23
     9d8:	80 93 d2 02 	sts	0x02D2, r24
     9dc:	90 93 d3 02 	sts	0x02D3, r25
	countInterval=(long)((float)periodSeconds*interruptionFrequency);
     9e0:	a7 01       	movw	r20, r14
     9e2:	96 01       	movw	r18, r12
     9e4:	c5 01       	movw	r24, r10
     9e6:	b4 01       	movw	r22, r8
     9e8:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
     9ec:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__fixsfsi>
     9f0:	60 93 c8 02 	sts	0x02C8, r22
     9f4:	70 93 c9 02 	sts	0x02C9, r23
     9f8:	80 93 ca 02 	sts	0x02CA, r24
     9fc:	90 93 cb 02 	sts	0x02CB, r25
	
	// Define valores nas vari�veis globais:
	interruptionPresetValue=maxCount-countInterval;
     a00:	c1 2c       	mov	r12, r1
     a02:	d1 2c       	mov	r13, r1
     a04:	76 01       	movw	r14, r12
     a06:	e3 94       	inc	r14
     a08:	c6 1a       	sub	r12, r22
     a0a:	d7 0a       	sbc	r13, r23
     a0c:	e8 0a       	sbc	r14, r24
     a0e:	f9 0a       	sbc	r15, r25
     a10:	c0 92 c2 02 	sts	0x02C2, r12
     a14:	d0 92 c3 02 	sts	0x02C3, r13
     a18:	e0 92 c4 02 	sts	0x02C4, r14
     a1c:	f0 92 c5 02 	sts	0x02C5, r15
	
	switch(selectedPrescaler)
     a20:	c0 34       	cpi	r28, 0x40	; 64
     a22:	d1 05       	cpc	r29, r1
     a24:	21 f1       	breq	.+72     	; 0xa6e <__stack+0x16f>
     a26:	54 f4       	brge	.+20     	; 0xa3c <__stack+0x13d>
     a28:	c1 30       	cpi	r28, 0x01	; 1
     a2a:	d1 05       	cpc	r29, r1
     a2c:	99 f0       	breq	.+38     	; 0xa54 <__stack+0x155>
     a2e:	28 97       	sbiw	r28, 0x08	; 8
     a30:	91 f5       	brne	.+100    	; 0xa96 <__stack+0x197>
	{
		case 1:
		interruptionPrescalerBits = (1<<CS10);
		break;
		case 8:
		interruptionPrescalerBits = (1<<CS11);
     a32:	82 e0       	ldi	r24, 0x02	; 2
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	a0 e0       	ldi	r26, 0x00	; 0
     a38:	b0 e0       	ldi	r27, 0x00	; 0
     a3a:	22 c0       	rjmp	.+68     	; 0xa80 <__stack+0x181>
	countInterval=(long)((float)periodSeconds*interruptionFrequency);
	
	// Define valores nas vari�veis globais:
	interruptionPresetValue=maxCount-countInterval;
	
	switch(selectedPrescaler)
     a3c:	c1 15       	cp	r28, r1
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	d8 07       	cpc	r29, r24
     a42:	d1 f0       	breq	.+52     	; 0xa78 <__stack+0x179>
     a44:	c1 15       	cp	r28, r1
     a46:	d4 40       	sbci	r29, 0x04	; 4
     a48:	31 f5       	brne	.+76     	; 0xa96 <__stack+0x197>
		break;
		case 256:
		interruptionPrescalerBits = (1<<CS12);
		break;
		case 1024:
		interruptionPrescalerBits = (1<<CS12) | (1<<CS10);
     a4a:	85 e0       	ldi	r24, 0x05	; 5
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	b0 e0       	ldi	r27, 0x00	; 0
     a52:	16 c0       	rjmp	.+44     	; 0xa80 <__stack+0x181>
	interruptionPresetValue=maxCount-countInterval;
	
	switch(selectedPrescaler)
	{
		case 1:
		interruptionPrescalerBits = (1<<CS10);
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	a0 e0       	ldi	r26, 0x00	; 0
     a5a:	b0 e0       	ldi	r27, 0x00	; 0
     a5c:	80 93 be 02 	sts	0x02BE, r24
     a60:	90 93 bf 02 	sts	0x02BF, r25
     a64:	a0 93 c0 02 	sts	0x02C0, r26
     a68:	b0 93 c1 02 	sts	0x02C1, r27
		break;
     a6c:	15 c0       	rjmp	.+42     	; 0xa98 <__stack+0x199>
		case 8:
		interruptionPrescalerBits = (1<<CS11);
		break;
		case 64:
		interruptionPrescalerBits = (1<<CS11) | (1<<CS10);
     a6e:	83 e0       	ldi	r24, 0x03	; 3
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	a0 e0       	ldi	r26, 0x00	; 0
     a74:	b0 e0       	ldi	r27, 0x00	; 0
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__stack+0x181>
		break;
		case 256:
		interruptionPrescalerBits = (1<<CS12);
     a78:	84 e0       	ldi	r24, 0x04	; 4
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
		break;
		case 1024:
		interruptionPrescalerBits = (1<<CS12) | (1<<CS10);
     a80:	80 93 be 02 	sts	0x02BE, r24
     a84:	90 93 bf 02 	sts	0x02BF, r25
     a88:	a0 93 c0 02 	sts	0x02C0, r26
     a8c:	b0 93 c1 02 	sts	0x02C1, r27
     a90:	02 c0       	rjmp	.+4      	; 0xa96 <__stack+0x197>
		else
		{
			return false; // selectedPrescaler=1024; // Selects maximum prescaler if it should be greater then 1024
		}
	}
	else return false; // selectedPrescaler=1; // Selects minimum prescaler if it is zero or negative
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	01 c0       	rjmp	.+2      	; 0xa98 <__stack+0x199>
		case 1024:
		interruptionPrescalerBits = (1<<CS12) | (1<<CS10);
		break;
	}
	
	return true;
     a96:	81 e0       	ldi	r24, 0x01	; 1
}
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	ff 90       	pop	r15
     a9e:	ef 90       	pop	r14
     aa0:	df 90       	pop	r13
     aa2:	cf 90       	pop	r12
     aa4:	bf 90       	pop	r11
     aa6:	af 90       	pop	r10
     aa8:	9f 90       	pop	r9
     aaa:	8f 90       	pop	r8
     aac:	08 95       	ret

00000aae <_Z13initInterruptf>:

/*
 *	Perform all the steps to initialize timer1 overflow interruption with sample time T in seconds
 */
void initInterrupt(float T)
{
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
  // initialize timer1
 // cli();           // disable all interrupts
  TCCR1A=0;
     ab2:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=0;
     ab6:	c1 e8       	ldi	r28, 0x81	; 129
     ab8:	d0 e0       	ldi	r29, 0x00	; 0
     aba:	18 82       	st	Y, r1

  interruptionConfigured=CalculateInterruptionParameters(T);
     abc:	0e 94 58 04 	call	0x8b0	; 0x8b0 <_Z31CalculateInterruptionParametersf>
     ac0:	80 93 d4 02 	sts	0x02D4, r24
  TCNT1 = interruptionPresetValue;
     ac4:	80 91 c2 02 	lds	r24, 0x02C2
     ac8:	90 91 c3 02 	lds	r25, 0x02C3
     acc:	90 93 85 00 	sts	0x0085, r25
     ad0:	80 93 84 00 	sts	0x0084, r24
  TCCR1B |= interruptionPrescalerBits;
     ad4:	88 81       	ld	r24, Y
     ad6:	90 91 be 02 	lds	r25, 0x02BE
     ada:	89 2b       	or	r24, r25
     adc:	88 83       	st	Y, r24
  TIMSK1 |= (1 << TOIE1);       // enable timer overflow interrupt
     ade:	ef e6       	ldi	r30, 0x6F	; 111
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	80 81       	ld	r24, Z
     ae4:	81 60       	ori	r24, 0x01	; 1
     ae6:	80 83       	st	Z, r24
  sei();             // enable all interrupts
     ae8:	78 94       	sei
}
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	08 95       	ret

00000af0 <__vector_13>:
{
	cli();
}

ISR(TIMER1_OVF_vect)          // timer compare interrupt service routine
{
     af0:	1f 92       	push	r1
     af2:	0f 92       	push	r0
     af4:	0f b6       	in	r0, 0x3f	; 63
     af6:	0f 92       	push	r0
     af8:	11 24       	eor	r1, r1
     afa:	2f 93       	push	r18
     afc:	3f 93       	push	r19
     afe:	4f 93       	push	r20
     b00:	5f 93       	push	r21
     b02:	6f 93       	push	r22
     b04:	7f 93       	push	r23
     b06:	8f 93       	push	r24
     b08:	9f 93       	push	r25
     b0a:	af 93       	push	r26
     b0c:	bf 93       	push	r27
     b0e:	ef 93       	push	r30
     b10:	ff 93       	push	r31
  (*interruptPointer)();
     b12:	e0 91 bc 02 	lds	r30, 0x02BC
     b16:	f0 91 bd 02 	lds	r31, 0x02BD
     b1a:	09 95       	icall
}
     b1c:	ff 91       	pop	r31
     b1e:	ef 91       	pop	r30
     b20:	bf 91       	pop	r27
     b22:	af 91       	pop	r26
     b24:	9f 91       	pop	r25
     b26:	8f 91       	pop	r24
     b28:	7f 91       	pop	r23
     b2a:	6f 91       	pop	r22
     b2c:	5f 91       	pop	r21
     b2e:	4f 91       	pop	r20
     b30:	3f 91       	pop	r19
     b32:	2f 91       	pop	r18
     b34:	0f 90       	pop	r0
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	0f 90       	pop	r0
     b3a:	1f 90       	pop	r1
     b3c:	18 95       	reti

00000b3e <_Z5execXff>:
{
	refx=rx;
	refy=ry;
}
int execX(float pos,float w)
{
     b3e:	4f 92       	push	r4
     b40:	5f 92       	push	r5
     b42:	6f 92       	push	r6
     b44:	7f 92       	push	r7
     b46:	8f 92       	push	r8
     b48:	9f 92       	push	r9
     b4a:	af 92       	push	r10
     b4c:	bf 92       	push	r11
     b4e:	cf 92       	push	r12
     b50:	df 92       	push	r13
     b52:	ef 92       	push	r14
     b54:	ff 92       	push	r15
     b56:	29 01       	movw	r4, r18
     b58:	3a 01       	movw	r6, r20
	float erro=0,e=0;
	e=refx-pos;
     b5a:	80 90 b8 02 	lds	r8, 0x02B8
     b5e:	90 90 b9 02 	lds	r9, 0x02B9
     b62:	a0 90 ba 02 	lds	r10, 0x02BA
     b66:	b0 90 bb 02 	lds	r11, 0x02BB
     b6a:	9b 01       	movw	r18, r22
     b6c:	ac 01       	movw	r20, r24
     b6e:	c5 01       	movw	r24, r10
     b70:	b4 01       	movw	r22, r8
     b72:	0e 94 27 0c 	call	0x184e	; 0x184e <__subsf3>
     b76:	6b 01       	movw	r12, r22
     b78:	7c 01       	movw	r14, r24
	// PD control
	#if simple
	return (int)(KP*e-KD*w);
	#else
// 	PD control with Sigmoid function on Kd
 		if (refx!=rx0)
     b7a:	20 91 a8 02 	lds	r18, 0x02A8
     b7e:	30 91 a9 02 	lds	r19, 0x02A9
     b82:	40 91 aa 02 	lds	r20, 0x02AA
     b86:	50 91 ab 02 	lds	r21, 0x02AB
     b8a:	c5 01       	movw	r24, r10
     b8c:	b4 01       	movw	r22, r8
     b8e:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__cmpsf2>
     b92:	88 23       	and	r24, r24
     b94:	81 f0       	breq	.+32     	; 0xbb6 <_Z5execXff+0x78>
 		{
	 		e0=e;
     b96:	c0 92 b0 02 	sts	0x02B0, r12
     b9a:	d0 92 b1 02 	sts	0x02B1, r13
     b9e:	e0 92 b2 02 	sts	0x02B2, r14
     ba2:	f0 92 b3 02 	sts	0x02B3, r15
	 		rx0=refx;
     ba6:	80 92 a8 02 	sts	0x02A8, r8
     baa:	90 92 a9 02 	sts	0x02A9, r9
     bae:	a0 92 aa 02 	sts	0x02AA, r10
     bb2:	b0 92 ab 02 	sts	0x02AB, r11
 		}
 		if (e0==0)
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	a9 01       	movw	r20, r18
     bbc:	60 91 b0 02 	lds	r22, 0x02B0
     bc0:	70 91 b1 02 	lds	r23, 0x02B1
     bc4:	80 91 b2 02 	lds	r24, 0x02B2
     bc8:	90 91 b3 02 	lds	r25, 0x02B3
     bcc:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__cmpsf2>
     bd0:	81 11       	cpse	r24, r1
     bd2:	08 c0       	rjmp	.+16     	; 0xbe4 <_Z5execXff+0xa6>
 		{
	 		e0=e;
     bd4:	c0 92 b0 02 	sts	0x02B0, r12
     bd8:	d0 92 b1 02 	sts	0x02B1, r13
     bdc:	e0 92 b2 02 	sts	0x02B2, r14
     be0:	f0 92 b3 02 	sts	0x02B3, r15
 		}
 		
 		erro=e/e0;
 		
 		sigKD=(1-1/(1+exp(beta*(-abs(e)+gama))))*KD*w;
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	a9 01       	movw	r20, r18
     bea:	c7 01       	movw	r24, r14
     bec:	b6 01       	movw	r22, r12
     bee:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <__gesf2>
     bf2:	18 16       	cp	r1, r24
     bf4:	4c f4       	brge	.+18     	; 0xc08 <_Z5execXff+0xca>
     bf6:	a7 01       	movw	r20, r14
     bf8:	96 01       	movw	r18, r12
     bfa:	60 e0       	ldi	r22, 0x00	; 0
     bfc:	70 e0       	ldi	r23, 0x00	; 0
     bfe:	80 e4       	ldi	r24, 0x40	; 64
     c00:	9f e3       	ldi	r25, 0x3F	; 63
     c02:	0e 94 27 0c 	call	0x184e	; 0x184e <__subsf3>
     c06:	08 c0       	rjmp	.+16     	; 0xc18 <_Z5execXff+0xda>
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	40 e4       	ldi	r20, 0x40	; 64
     c0e:	5f e3       	ldi	r21, 0x3F	; 63
     c10:	c7 01       	movw	r24, r14
     c12:	b6 01       	movw	r22, r12
     c14:	0e 94 28 0c 	call	0x1850	; 0x1850 <__addsf3>
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	40 ea       	ldi	r20, 0xA0	; 160
     c1e:	51 e4       	ldi	r21, 0x41	; 65
     c20:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
     c24:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <exp>
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	40 e8       	ldi	r20, 0x80	; 128
     c2e:	5f e3       	ldi	r21, 0x3F	; 63
     c30:	0e 94 28 0c 	call	0x1850	; 0x1850 <__addsf3>
     c34:	9b 01       	movw	r18, r22
     c36:	ac 01       	movw	r20, r24
     c38:	60 e0       	ldi	r22, 0x00	; 0
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	80 e8       	ldi	r24, 0x80	; 128
     c3e:	9f e3       	ldi	r25, 0x3F	; 63
     c40:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <__divsf3>
     c44:	9b 01       	movw	r18, r22
     c46:	ac 01       	movw	r20, r24
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	80 e8       	ldi	r24, 0x80	; 128
     c4e:	9f e3       	ldi	r25, 0x3F	; 63
     c50:	0e 94 27 0c 	call	0x184e	; 0x184e <__subsf3>
     c54:	2a e9       	ldi	r18, 0x9A	; 154
     c56:	39 e9       	ldi	r19, 0x99	; 153
     c58:	49 ed       	ldi	r20, 0xD9	; 217
     c5a:	50 e4       	ldi	r21, 0x40	; 64
     c5c:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
     c60:	a3 01       	movw	r20, r6
     c62:	92 01       	movw	r18, r4
     c64:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
     c68:	2b 01       	movw	r4, r22
     c6a:	3c 01       	movw	r6, r24
     c6c:	60 93 98 02 	sts	0x0298, r22
     c70:	70 93 99 02 	sts	0x0299, r23
     c74:	80 93 9a 02 	sts	0x029A, r24
     c78:	90 93 9b 02 	sts	0x029B, r25
 		
 		itx=itx+e*T*KI;
     c7c:	2a e0       	ldi	r18, 0x0A	; 10
     c7e:	37 ed       	ldi	r19, 0xD7	; 215
     c80:	43 e2       	ldi	r20, 0x23	; 35
     c82:	5c e3       	ldi	r21, 0x3C	; 60
     c84:	c7 01       	movw	r24, r14
     c86:	b6 01       	movw	r22, r12
     c88:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	40 ea       	ldi	r20, 0xA0	; 160
     c92:	50 e4       	ldi	r21, 0x40	; 64
     c94:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
     c98:	20 91 a0 02 	lds	r18, 0x02A0
     c9c:	30 91 a1 02 	lds	r19, 0x02A1
     ca0:	40 91 a2 02 	lds	r20, 0x02A2
     ca4:	50 91 a3 02 	lds	r21, 0x02A3
     ca8:	0e 94 28 0c 	call	0x1850	; 0x1850 <__addsf3>
     cac:	4b 01       	movw	r8, r22
     cae:	5c 01       	movw	r10, r24
     cb0:	60 93 a0 02 	sts	0x02A0, r22
     cb4:	70 93 a1 02 	sts	0x02A1, r23
     cb8:	80 93 a2 02 	sts	0x02A2, r24
     cbc:	90 93 a3 02 	sts	0x02A3, r25
 		
 		U=e*KP-sigKD+itx;
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	40 eb       	ldi	r20, 0xB0	; 176
     cc6:	51 e4       	ldi	r21, 0x41	; 65
     cc8:	c7 01       	movw	r24, r14
     cca:	b6 01       	movw	r22, r12
     ccc:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
     cd0:	a3 01       	movw	r20, r6
     cd2:	92 01       	movw	r18, r4
     cd4:	0e 94 27 0c 	call	0x184e	; 0x184e <__subsf3>
     cd8:	a5 01       	movw	r20, r10
     cda:	94 01       	movw	r18, r8
     cdc:	0e 94 28 0c 	call	0x1850	; 0x1850 <__addsf3>
     ce0:	60 93 9c 02 	sts	0x029C, r22
     ce4:	70 93 9d 02 	sts	0x029D, r23
     ce8:	80 93 9e 02 	sts	0x029E, r24
     cec:	90 93 9f 02 	sts	0x029F, r25
 		//U2=U1;
 		//U1=U0;
 		//U0=U;
 		//
 		//ud=qgu-qu;
 		return (int)(U);//-ud);
     cf0:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__fixsfsi>
 		#endif
}
     cf4:	cb 01       	movw	r24, r22
     cf6:	ff 90       	pop	r15
     cf8:	ef 90       	pop	r14
     cfa:	df 90       	pop	r13
     cfc:	cf 90       	pop	r12
     cfe:	bf 90       	pop	r11
     d00:	af 90       	pop	r10
     d02:	9f 90       	pop	r9
     d04:	8f 90       	pop	r8
     d06:	7f 90       	pop	r7
     d08:	6f 90       	pop	r6
     d0a:	5f 90       	pop	r5
     d0c:	4f 90       	pop	r4
     d0e:	08 95       	ret

00000d10 <_Z5execYff>:

int execY(float pos,float w)
{
     d10:	4f 92       	push	r4
     d12:	5f 92       	push	r5
     d14:	6f 92       	push	r6
     d16:	7f 92       	push	r7
     d18:	8f 92       	push	r8
     d1a:	9f 92       	push	r9
     d1c:	af 92       	push	r10
     d1e:	bf 92       	push	r11
     d20:	cf 92       	push	r12
     d22:	df 92       	push	r13
     d24:	ef 92       	push	r14
     d26:	ff 92       	push	r15
     d28:	29 01       	movw	r4, r18
     d2a:	3a 01       	movw	r6, r20
	float erro=0,e=0;
	e=refy-pos;
     d2c:	80 90 b4 02 	lds	r8, 0x02B4
     d30:	90 90 b5 02 	lds	r9, 0x02B5
     d34:	a0 90 b6 02 	lds	r10, 0x02B6
     d38:	b0 90 b7 02 	lds	r11, 0x02B7
     d3c:	9b 01       	movw	r18, r22
     d3e:	ac 01       	movw	r20, r24
     d40:	c5 01       	movw	r24, r10
     d42:	b4 01       	movw	r22, r8
     d44:	0e 94 27 0c 	call	0x184e	; 0x184e <__subsf3>
     d48:	6b 01       	movw	r12, r22
     d4a:	7c 01       	movw	r14, r24
	return (int)(KP*(e)-KD*w);
	
	#else
	
	//calculo do erro percentual
	if (refy!=ry0)
     d4c:	20 91 a4 02 	lds	r18, 0x02A4
     d50:	30 91 a5 02 	lds	r19, 0x02A5
     d54:	40 91 a6 02 	lds	r20, 0x02A6
     d58:	50 91 a7 02 	lds	r21, 0x02A7
     d5c:	c5 01       	movw	r24, r10
     d5e:	b4 01       	movw	r22, r8
     d60:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__cmpsf2>
     d64:	88 23       	and	r24, r24
     d66:	81 f0       	breq	.+32     	; 0xd88 <_Z5execYff+0x78>
	{
		e0y=e;
     d68:	c0 92 ac 02 	sts	0x02AC, r12
     d6c:	d0 92 ad 02 	sts	0x02AD, r13
     d70:	e0 92 ae 02 	sts	0x02AE, r14
     d74:	f0 92 af 02 	sts	0x02AF, r15
		ry0=refy;
     d78:	80 92 a4 02 	sts	0x02A4, r8
     d7c:	90 92 a5 02 	sts	0x02A5, r9
     d80:	a0 92 a6 02 	sts	0x02A6, r10
     d84:	b0 92 a7 02 	sts	0x02A7, r11
	}
	if (e0y==0)
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	a9 01       	movw	r20, r18
     d8e:	60 91 ac 02 	lds	r22, 0x02AC
     d92:	70 91 ad 02 	lds	r23, 0x02AD
     d96:	80 91 ae 02 	lds	r24, 0x02AE
     d9a:	90 91 af 02 	lds	r25, 0x02AF
     d9e:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__cmpsf2>
     da2:	81 11       	cpse	r24, r1
     da4:	08 c0       	rjmp	.+16     	; 0xdb6 <_Z5execYff+0xa6>
	{
		e0=e;
     da6:	c0 92 b0 02 	sts	0x02B0, r12
     daa:	d0 92 b1 02 	sts	0x02B1, r13
     dae:	e0 92 b2 02 	sts	0x02B2, r14
     db2:	f0 92 b3 02 	sts	0x02B3, r15
	}
	erro=e/e0y;
	// PD control with Sigmoid function on Kd
	sigKD=(1-1/(1+exp(beta*(-abs(e)+gama))))*KD*w;
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	a9 01       	movw	r20, r18
     dbc:	c7 01       	movw	r24, r14
     dbe:	b6 01       	movw	r22, r12
     dc0:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <__gesf2>
     dc4:	18 16       	cp	r1, r24
     dc6:	4c f4       	brge	.+18     	; 0xdda <_Z5execYff+0xca>
     dc8:	a7 01       	movw	r20, r14
     dca:	96 01       	movw	r18, r12
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	80 e4       	ldi	r24, 0x40	; 64
     dd2:	9f e3       	ldi	r25, 0x3F	; 63
     dd4:	0e 94 27 0c 	call	0x184e	; 0x184e <__subsf3>
     dd8:	08 c0       	rjmp	.+16     	; 0xdea <_Z5execYff+0xda>
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	40 e4       	ldi	r20, 0x40	; 64
     de0:	5f e3       	ldi	r21, 0x3F	; 63
     de2:	c7 01       	movw	r24, r14
     de4:	b6 01       	movw	r22, r12
     de6:	0e 94 28 0c 	call	0x1850	; 0x1850 <__addsf3>
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	40 ea       	ldi	r20, 0xA0	; 160
     df0:	51 e4       	ldi	r21, 0x41	; 65
     df2:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
     df6:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <exp>
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	40 e8       	ldi	r20, 0x80	; 128
     e00:	5f e3       	ldi	r21, 0x3F	; 63
     e02:	0e 94 28 0c 	call	0x1850	; 0x1850 <__addsf3>
     e06:	9b 01       	movw	r18, r22
     e08:	ac 01       	movw	r20, r24
     e0a:	60 e0       	ldi	r22, 0x00	; 0
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	80 e8       	ldi	r24, 0x80	; 128
     e10:	9f e3       	ldi	r25, 0x3F	; 63
     e12:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <__divsf3>
     e16:	9b 01       	movw	r18, r22
     e18:	ac 01       	movw	r20, r24
     e1a:	60 e0       	ldi	r22, 0x00	; 0
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	80 e8       	ldi	r24, 0x80	; 128
     e20:	9f e3       	ldi	r25, 0x3F	; 63
     e22:	0e 94 27 0c 	call	0x184e	; 0x184e <__subsf3>
     e26:	2a e9       	ldi	r18, 0x9A	; 154
     e28:	39 e9       	ldi	r19, 0x99	; 153
     e2a:	49 ed       	ldi	r20, 0xD9	; 217
     e2c:	50 e4       	ldi	r21, 0x40	; 64
     e2e:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
     e32:	a3 01       	movw	r20, r6
     e34:	92 01       	movw	r18, r4
     e36:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
     e3a:	4b 01       	movw	r8, r22
     e3c:	5c 01       	movw	r10, r24
     e3e:	60 93 98 02 	sts	0x0298, r22
     e42:	70 93 99 02 	sts	0x0299, r23
     e46:	80 93 9a 02 	sts	0x029A, r24
     e4a:	90 93 9b 02 	sts	0x029B, r25
	
	//ity=ity+e*T*KI;
	
	U=e*KP-sigKD;//+ity;
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	40 eb       	ldi	r20, 0xB0	; 176
     e54:	51 e4       	ldi	r21, 0x41	; 65
     e56:	c7 01       	movw	r24, r14
     e58:	b6 01       	movw	r22, r12
     e5a:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
     e5e:	a5 01       	movw	r20, r10
     e60:	94 01       	movw	r18, r8
     e62:	0e 94 27 0c 	call	0x184e	; 0x184e <__subsf3>
     e66:	60 93 9c 02 	sts	0x029C, r22
     e6a:	70 93 9d 02 	sts	0x029D, r23
     e6e:	80 93 9e 02 	sts	0x029E, r24
     e72:	90 93 9f 02 	sts	0x029F, r25
//
	//U2y=U1y;
	//U1y=U0y;
	//U0y=U;
	//ud=qgu-qu;
	return (int)(U);//-ud);
     e76:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__fixsfsi>
	#endif
}
     e7a:	cb 01       	movw	r24, r22
     e7c:	ff 90       	pop	r15
     e7e:	ef 90       	pop	r14
     e80:	df 90       	pop	r13
     e82:	cf 90       	pop	r12
     e84:	bf 90       	pop	r11
     e86:	af 90       	pop	r10
     e88:	9f 90       	pop	r9
     e8a:	8f 90       	pop	r8
     e8c:	7f 90       	pop	r7
     e8e:	6f 90       	pop	r6
     e90:	5f 90       	pop	r5
     e92:	4f 90       	pop	r4
     e94:	08 95       	ret

00000e96 <_Z11normalizeUrv>:
	while (!Serial.available());
	Serial.read();
}

void normalizeUr()
{
     e96:	8f 92       	push	r8
     e98:	9f 92       	push	r9
     e9a:	af 92       	push	r10
     e9c:	bf 92       	push	r11
     e9e:	cf 92       	push	r12
     ea0:	df 92       	push	r13
     ea2:	ef 92       	push	r14
     ea4:	ff 92       	push	r15
     ea6:	cf 93       	push	r28
     ea8:	df 93       	push	r29
	u1 = DC_VALUE + ur;
     eaa:	60 91 00 01 	lds	r22, 0x0100
     eae:	70 91 01 01 	lds	r23, 0x0101
     eb2:	88 27       	eor	r24, r24
     eb4:	77 fd       	sbrc	r23, 7
     eb6:	80 95       	com	r24
     eb8:	98 2f       	mov	r25, r24
     eba:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__floatsisf>
     ebe:	6b 01       	movw	r12, r22
     ec0:	7c 01       	movw	r14, r24
     ec2:	80 90 8e 02 	lds	r8, 0x028E
     ec6:	90 90 8f 02 	lds	r9, 0x028F
     eca:	a0 90 90 02 	lds	r10, 0x0290
     ece:	b0 90 91 02 	lds	r11, 0x0291
     ed2:	a5 01       	movw	r20, r10
     ed4:	94 01       	movw	r18, r8
     ed6:	0e 94 28 0c 	call	0x1850	; 0x1850 <__addsf3>
     eda:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__fixsfsi>
     ede:	eb 01       	movw	r28, r22
     ee0:	70 93 95 02 	sts	0x0295, r23
     ee4:	60 93 94 02 	sts	0x0294, r22
	u2 = DC_VALUE - ur;
     ee8:	a5 01       	movw	r20, r10
     eea:	94 01       	movw	r18, r8
     eec:	c7 01       	movw	r24, r14
     eee:	b6 01       	movw	r22, r12
     ef0:	0e 94 27 0c 	call	0x184e	; 0x184e <__subsf3>
     ef4:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__fixsfsi>
     ef8:	9b 01       	movw	r18, r22
     efa:	70 93 93 02 	sts	0x0293, r23
     efe:	60 93 92 02 	sts	0x0292, r22
	if(u1 < MIN_SIGNAL) u1 = MIN_SIGNAL;
     f02:	cf 37       	cpi	r28, 0x7F	; 127
     f04:	d1 05       	cpc	r29, r1
     f06:	1c f4       	brge	.+6      	; 0xf0e <_Z11normalizeUrv+0x78>
     f08:	8f e7       	ldi	r24, 0x7F	; 127
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	06 c0       	rjmp	.+12     	; 0xf1a <_Z11normalizeUrv+0x84>
	else if(u1 > MAX_SIGNAL) u1 = MAX_SIGNAL;
     f0e:	cf 3f       	cpi	r28, 0xFF	; 255
     f10:	d1 05       	cpc	r29, r1
     f12:	39 f0       	breq	.+14     	; 0xf22 <_Z11normalizeUrv+0x8c>
     f14:	34 f0       	brlt	.+12     	; 0xf22 <_Z11normalizeUrv+0x8c>
     f16:	8f ef       	ldi	r24, 0xFF	; 255
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	90 93 95 02 	sts	0x0295, r25
     f1e:	80 93 94 02 	sts	0x0294, r24
	if(u2 < MIN_SIGNAL) u2 = MIN_SIGNAL;
     f22:	2f 37       	cpi	r18, 0x7F	; 127
     f24:	31 05       	cpc	r19, r1
     f26:	1c f4       	brge	.+6      	; 0xf2e <_Z11normalizeUrv+0x98>
     f28:	8f e7       	ldi	r24, 0x7F	; 127
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	06 c0       	rjmp	.+12     	; 0xf3a <_Z11normalizeUrv+0xa4>
	else if(u2 > MAX_SIGNAL) u2 = MAX_SIGNAL;
     f2e:	2f 3f       	cpi	r18, 0xFF	; 255
     f30:	31 05       	cpc	r19, r1
     f32:	39 f0       	breq	.+14     	; 0xf42 <_Z11normalizeUrv+0xac>
     f34:	34 f0       	brlt	.+12     	; 0xf42 <_Z11normalizeUrv+0xac>
     f36:	8f ef       	ldi	r24, 0xFF	; 255
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	90 93 93 02 	sts	0x0293, r25
     f3e:	80 93 92 02 	sts	0x0292, r24
	
	//Serial.println(String(x)+" "+String(y)+" "+String(u1));
	
}
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	ff 90       	pop	r15
     f48:	ef 90       	pop	r14
     f4a:	df 90       	pop	r13
     f4c:	cf 90       	pop	r12
     f4e:	bf 90       	pop	r11
     f50:	af 90       	pop	r10
     f52:	9f 90       	pop	r9
     f54:	8f 90       	pop	r8
     f56:	08 95       	ret

00000f58 <_Z10aplicaCtrlv>:

void aplicaCtrl()
{
     f58:	ef 92       	push	r14
     f5a:	ff 92       	push	r15
     f5c:	0f 93       	push	r16
     f5e:	1f 93       	push	r17
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	62 97       	sbiw	r28, 0x12	; 18
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
	ur=execX(x,dx);
     f74:	20 91 4e 02 	lds	r18, 0x024E
     f78:	30 91 4f 02 	lds	r19, 0x024F
     f7c:	40 91 50 02 	lds	r20, 0x0250
     f80:	50 91 51 02 	lds	r21, 0x0251
     f84:	60 91 52 02 	lds	r22, 0x0252
     f88:	70 91 53 02 	lds	r23, 0x0253
     f8c:	80 91 54 02 	lds	r24, 0x0254
     f90:	90 91 55 02 	lds	r25, 0x0255
     f94:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_Z5execXff>
     f98:	bc 01       	movw	r22, r24
     f9a:	88 27       	eor	r24, r24
     f9c:	77 fd       	sbrc	r23, 7
     f9e:	80 95       	com	r24
     fa0:	98 2f       	mov	r25, r24
     fa2:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__floatsisf>
     fa6:	60 93 8e 02 	sts	0x028E, r22
     faa:	70 93 8f 02 	sts	0x028F, r23
     fae:	80 93 90 02 	sts	0x0290, r24
     fb2:	90 93 91 02 	sts	0x0291, r25
	normalizeUr();
     fb6:	0e 94 4b 07 	call	0xe96	; 0xe96 <_Z11normalizeUrv>
void setSpeed(int motor,int speed)
{
	switch(motor)
	{
		case motorXfront:
		OCR0A=speed;
     fba:	32 e9       	ldi	r19, 0x92	; 146
     fbc:	e3 2e       	mov	r14, r19
     fbe:	32 e0       	ldi	r19, 0x02	; 2
     fc0:	f3 2e       	mov	r15, r19
     fc2:	f7 01       	movw	r30, r14
     fc4:	80 81       	ld	r24, Z
     fc6:	87 bd       	out	0x27, r24	; 39
		break;
		case motorXback:
		OCR0B=speed;
     fc8:	04 e9       	ldi	r16, 0x94	; 148
     fca:	12 e0       	ldi	r17, 0x02	; 2
     fcc:	f8 01       	movw	r30, r16
     fce:	80 81       	ld	r24, Z
     fd0:	88 bd       	out	0x28, r24	; 40
	setSpeed(motorXfront,u2);
	setSpeed(motorXback,u1);
	//Serial.println(String(refx)+" "+String(x));
	ur=execY(y,dy);
     fd2:	20 91 46 02 	lds	r18, 0x0246
     fd6:	30 91 47 02 	lds	r19, 0x0247
     fda:	40 91 48 02 	lds	r20, 0x0248
     fde:	50 91 49 02 	lds	r21, 0x0249
     fe2:	60 91 4a 02 	lds	r22, 0x024A
     fe6:	70 91 4b 02 	lds	r23, 0x024B
     fea:	80 91 4c 02 	lds	r24, 0x024C
     fee:	90 91 4d 02 	lds	r25, 0x024D
     ff2:	0e 94 88 06 	call	0xd10	; 0xd10 <_Z5execYff>
     ff6:	bc 01       	movw	r22, r24
     ff8:	88 27       	eor	r24, r24
     ffa:	77 fd       	sbrc	r23, 7
     ffc:	80 95       	com	r24
     ffe:	98 2f       	mov	r25, r24
    1000:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__floatsisf>
    1004:	60 93 8e 02 	sts	0x028E, r22
    1008:	70 93 8f 02 	sts	0x028F, r23
    100c:	80 93 90 02 	sts	0x0290, r24
    1010:	90 93 91 02 	sts	0x0291, r25
	normalizeUr();
    1014:	0e 94 4b 07 	call	0xe96	; 0xe96 <_Z11normalizeUrv>
		break;
		case motorYfront:
		OCR2A=speed;
    1018:	f7 01       	movw	r30, r14
    101a:	80 81       	ld	r24, Z
    101c:	80 93 b3 00 	sts	0x00B3, r24
		break;
		case motorYback:
		OCR2B=speed;
    1020:	f8 01       	movw	r30, r16
    1022:	80 81       	ld	r24, Z
    1024:	80 93 b4 00 	sts	0x00B4, r24
	setSpeed(motorYfront,u2);
	setSpeed(motorYback,u1);
	Serial.println(String(refy)+" "+String(y));
    1028:	40 91 4a 02 	lds	r20, 0x024A
    102c:	50 91 4b 02 	lds	r21, 0x024B
    1030:	60 91 4c 02 	lds	r22, 0x024C
    1034:	70 91 4d 02 	lds	r23, 0x024D
    1038:	22 e0       	ldi	r18, 0x02	; 2
    103a:	ce 01       	movw	r24, r28
    103c:	01 96       	adiw	r24, 0x01	; 1
    103e:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <_ZN6StringC1Efh>
    1042:	40 91 b4 02 	lds	r20, 0x02B4
    1046:	50 91 b5 02 	lds	r21, 0x02B5
    104a:	60 91 b6 02 	lds	r22, 0x02B6
    104e:	70 91 b7 02 	lds	r23, 0x02B7
    1052:	22 e0       	ldi	r18, 0x02	; 2
    1054:	ce 01       	movw	r24, r28
    1056:	0d 96       	adiw	r24, 0x0d	; 13
    1058:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <_ZN6StringC1Efh>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    105c:	be 01       	movw	r22, r28
    105e:	63 5f       	subi	r22, 0xF3	; 243
    1060:	7f 4f       	sbci	r23, 0xFF	; 255
    1062:	ce 01       	movw	r24, r28
    1064:	07 96       	adiw	r24, 0x07	; 7
    1066:	0e 94 28 14 	call	0x2850	; 0x2850 <_ZN6StringC2ERKS_>
    106a:	67 e7       	ldi	r22, 0x77	; 119
    106c:	71 e0       	ldi	r23, 0x01	; 1
    106e:	ce 01       	movw	r24, r28
    1070:	07 96       	adiw	r24, 0x07	; 7
    1072:	0e 94 75 13 	call	0x26ea	; 0x26ea <_ZplRK15StringSumHelperPKc>
    1076:	be 01       	movw	r22, r28
    1078:	6f 5f       	subi	r22, 0xFF	; 255
    107a:	7f 4f       	sbci	r23, 0xFF	; 255
    107c:	0e 94 91 13 	call	0x2722	; 0x2722 <_ZplRK15StringSumHelperRK6String>
    1080:	bc 01       	movw	r22, r24
    1082:	8d e5       	ldi	r24, 0x5D	; 93
    1084:	93 e0       	ldi	r25, 0x03	; 3
    1086:	0e 94 bd 12 	call	0x257a	; 0x257a <_ZN5Print7printlnERK6String>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    108a:	ce 01       	movw	r24, r28
    108c:	07 96       	adiw	r24, 0x07	; 7
    108e:	0e 94 38 14 	call	0x2870	; 0x2870 <_ZN6StringD2Ev>
    1092:	ce 01       	movw	r24, r28
    1094:	0d 96       	adiw	r24, 0x0d	; 13
    1096:	0e 94 32 14 	call	0x2864	; 0x2864 <_ZN6StringD1Ev>
    109a:	ce 01       	movw	r24, r28
    109c:	01 96       	adiw	r24, 0x01	; 1
    109e:	0e 94 32 14 	call	0x2864	; 0x2864 <_ZN6StringD1Ev>
}
    10a2:	62 96       	adiw	r28, 0x12	; 18
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	f8 94       	cli
    10a8:	de bf       	out	0x3e, r29	; 62
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	cd bf       	out	0x3d, r28	; 61
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	1f 91       	pop	r17
    10b4:	0f 91       	pop	r16
    10b6:	ff 90       	pop	r15
    10b8:	ef 90       	pop	r14
    10ba:	08 95       	ret

000010bc <_Z11sensor_readv>:
	setSpeed(motorXfront,u1);
	setSpeed(motorXback,u2);
}

void sensor_read()
{
    10bc:	4f 92       	push	r4
    10be:	5f 92       	push	r5
    10c0:	6f 92       	push	r6
    10c2:	7f 92       	push	r7
    10c4:	8f 92       	push	r8
    10c6:	9f 92       	push	r9
    10c8:	af 92       	push	r10
    10ca:	bf 92       	push	r11
    10cc:	cf 92       	push	r12
    10ce:	df 92       	push	r13
    10d0:	ef 92       	push	r14
    10d2:	ff 92       	push	r15
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	2c 97       	sbiw	r28, 0x0c	; 12
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	de bf       	out	0x3e, r29	; 62
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	cd bf       	out	0x3d, r28	; 61

	// gyro lido em [rad/s]
	dy  = (-gx-Gx)*toRad;
    10e8:	60 91 5a 02 	lds	r22, 0x025A
    10ec:	70 91 5b 02 	lds	r23, 0x025B
    10f0:	71 95       	neg	r23
    10f2:	61 95       	neg	r22
    10f4:	71 09       	sbc	r23, r1
    10f6:	88 27       	eor	r24, r24
    10f8:	77 fd       	sbrc	r23, 7
    10fa:	80 95       	com	r24
    10fc:	98 2f       	mov	r25, r24
    10fe:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__floatsisf>
    1102:	20 91 72 02 	lds	r18, 0x0272
    1106:	30 91 73 02 	lds	r19, 0x0273
    110a:	40 91 74 02 	lds	r20, 0x0274
    110e:	50 91 75 02 	lds	r21, 0x0275
    1112:	0e 94 27 0c 	call	0x184e	; 0x184e <__subsf3>
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	4a ef       	ldi	r20, 0xFA	; 250
    111c:	53 e4       	ldi	r21, 0x43	; 67
    111e:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
    1122:	23 e3       	ldi	r18, 0x33	; 51
    1124:	33 e3       	ldi	r19, 0x33	; 51
    1126:	45 ee       	ldi	r20, 0xE5	; 229
    1128:	59 e4       	ldi	r21, 0x49	; 73
    112a:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <__divsf3>
    112e:	69 87       	std	Y+9, r22	; 0x09
    1130:	7a 87       	std	Y+10, r23	; 0x0a
    1132:	8b 87       	std	Y+11, r24	; 0x0b
    1134:	9c 87       	std	Y+12, r25	; 0x0c
    1136:	60 93 46 02 	sts	0x0246, r22
    113a:	70 93 47 02 	sts	0x0247, r23
    113e:	80 93 48 02 	sts	0x0248, r24
    1142:	90 93 49 02 	sts	0x0249, r25
	dx  = (gy-Gy)*toRad;
    1146:	60 91 58 02 	lds	r22, 0x0258
    114a:	70 91 59 02 	lds	r23, 0x0259
    114e:	88 27       	eor	r24, r24
    1150:	77 fd       	sbrc	r23, 7
    1152:	80 95       	com	r24
    1154:	98 2f       	mov	r25, r24
    1156:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__floatsisf>
    115a:	20 91 6e 02 	lds	r18, 0x026E
    115e:	30 91 6f 02 	lds	r19, 0x026F
    1162:	40 91 70 02 	lds	r20, 0x0270
    1166:	50 91 71 02 	lds	r21, 0x0271
    116a:	0e 94 27 0c 	call	0x184e	; 0x184e <__subsf3>
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	4a ef       	ldi	r20, 0xFA	; 250
    1174:	53 e4       	ldi	r21, 0x43	; 67
    1176:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
    117a:	23 e3       	ldi	r18, 0x33	; 51
    117c:	33 e3       	ldi	r19, 0x33	; 51
    117e:	45 ee       	ldi	r20, 0xE5	; 229
    1180:	59 e4       	ldi	r21, 0x49	; 73
    1182:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <__divsf3>
    1186:	2b 01       	movw	r4, r22
    1188:	3c 01       	movw	r6, r24
    118a:	60 93 4e 02 	sts	0x024E, r22
    118e:	70 93 4f 02 	sts	0x024F, r23
    1192:	80 93 50 02 	sts	0x0250, r24
    1196:	90 93 51 02 	sts	0x0251, r25
	#if ensaio
	Serial.println(String(dx*1000)+" "+String(ur));
	return;
	#endif
	axF = -(ax-Ax)*gravity;
    119a:	60 91 60 02 	lds	r22, 0x0260
    119e:	70 91 61 02 	lds	r23, 0x0261
    11a2:	88 27       	eor	r24, r24
    11a4:	77 fd       	sbrc	r23, 7
    11a6:	80 95       	com	r24
    11a8:	98 2f       	mov	r25, r24
    11aa:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__floatsisf>
    11ae:	20 91 7e 02 	lds	r18, 0x027E
    11b2:	30 91 7f 02 	lds	r19, 0x027F
    11b6:	40 91 80 02 	lds	r20, 0x0280
    11ba:	50 91 81 02 	lds	r21, 0x0281
    11be:	0e 94 27 0c 	call	0x184e	; 0x184e <__subsf3>
    11c2:	90 58       	subi	r25, 0x80	; 128
    11c4:	23 ec       	ldi	r18, 0xC3	; 195
    11c6:	35 ef       	ldi	r19, 0xF5	; 245
    11c8:	4c e1       	ldi	r20, 0x1C	; 28
    11ca:	51 e4       	ldi	r21, 0x41	; 65
    11cc:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	40 e8       	ldi	r20, 0x80	; 128
    11d6:	58 e3       	ldi	r21, 0x38	; 56
    11d8:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
    11dc:	4b 01       	movw	r8, r22
    11de:	5c 01       	movw	r10, r24
    11e0:	60 93 82 02 	sts	0x0282, r22
    11e4:	70 93 83 02 	sts	0x0283, r23
    11e8:	80 93 84 02 	sts	0x0284, r24
    11ec:	90 93 85 02 	sts	0x0285, r25
	ayF = -(ay-Ay)*gravity;
    11f0:	60 91 5e 02 	lds	r22, 0x025E
    11f4:	70 91 5f 02 	lds	r23, 0x025F
    11f8:	88 27       	eor	r24, r24
    11fa:	77 fd       	sbrc	r23, 7
    11fc:	80 95       	com	r24
    11fe:	98 2f       	mov	r25, r24
    1200:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__floatsisf>
    1204:	20 91 7a 02 	lds	r18, 0x027A
    1208:	30 91 7b 02 	lds	r19, 0x027B
    120c:	40 91 7c 02 	lds	r20, 0x027C
    1210:	50 91 7d 02 	lds	r21, 0x027D
    1214:	0e 94 27 0c 	call	0x184e	; 0x184e <__subsf3>
    1218:	90 58       	subi	r25, 0x80	; 128
    121a:	23 ec       	ldi	r18, 0xC3	; 195
    121c:	35 ef       	ldi	r19, 0xF5	; 245
    121e:	4c e1       	ldi	r20, 0x1C	; 28
    1220:	51 e4       	ldi	r21, 0x41	; 65
    1222:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	40 e8       	ldi	r20, 0x80	; 128
    122c:	58 e3       	ldi	r21, 0x38	; 56
    122e:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
    1232:	6b 01       	movw	r12, r22
    1234:	7c 01       	movw	r14, r24
    1236:	60 93 8a 02 	sts	0x028A, r22
    123a:	70 93 8b 02 	sts	0x028B, r23
    123e:	80 93 8c 02 	sts	0x028C, r24
    1242:	90 93 8d 02 	sts	0x028D, r25
	azF = (az-Az)*gravity;
    1246:	60 91 5c 02 	lds	r22, 0x025C
    124a:	70 91 5d 02 	lds	r23, 0x025D
    124e:	88 27       	eor	r24, r24
    1250:	77 fd       	sbrc	r23, 7
    1252:	80 95       	com	r24
    1254:	98 2f       	mov	r25, r24
    1256:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__floatsisf>
    125a:	20 91 76 02 	lds	r18, 0x0276
    125e:	30 91 77 02 	lds	r19, 0x0277
    1262:	40 91 78 02 	lds	r20, 0x0278
    1266:	50 91 79 02 	lds	r21, 0x0279
    126a:	0e 94 27 0c 	call	0x184e	; 0x184e <__subsf3>
    126e:	23 ec       	ldi	r18, 0xC3	; 195
    1270:	35 ef       	ldi	r19, 0xF5	; 245
    1272:	4c e1       	ldi	r20, 0x1C	; 28
    1274:	51 e4       	ldi	r21, 0x41	; 65
    1276:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	40 e8       	ldi	r20, 0x80	; 128
    1280:	58 e3       	ldi	r21, 0x38	; 56
    1282:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
    1286:	69 83       	std	Y+1, r22	; 0x01
    1288:	7a 83       	std	Y+2, r23	; 0x02
    128a:	8b 83       	std	Y+3, r24	; 0x03
    128c:	9c 83       	std	Y+4, r25	; 0x04
    128e:	60 93 86 02 	sts	0x0286, r22
    1292:	70 93 87 02 	sts	0x0287, r23
    1296:	80 93 88 02 	sts	0x0288, r24
    129a:	90 93 89 02 	sts	0x0289, r25
	xAcc=atan2(axF,hypot(ayF,azF));
    129e:	9b 01       	movw	r18, r22
    12a0:	ac 01       	movw	r20, r24
    12a2:	c7 01       	movw	r24, r14
    12a4:	b6 01       	movw	r22, r12
    12a6:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <hypot>
    12aa:	9b 01       	movw	r18, r22
    12ac:	ac 01       	movw	r20, r24
    12ae:	c5 01       	movw	r24, r10
    12b0:	b4 01       	movw	r22, r8
    12b2:	0e 94 9b 0c 	call	0x1936	; 0x1936 <atan2>
    12b6:	6d 83       	std	Y+5, r22	; 0x05
    12b8:	7e 83       	std	Y+6, r23	; 0x06
    12ba:	8f 83       	std	Y+7, r24	; 0x07
    12bc:	98 87       	std	Y+8, r25	; 0x08
    12be:	60 93 66 02 	sts	0x0266, r22
    12c2:	70 93 67 02 	sts	0x0267, r23
    12c6:	80 93 68 02 	sts	0x0268, r24
    12ca:	90 93 69 02 	sts	0x0269, r25
	x = a_te*(T*dx+x) + (1-a_te)*xAcc;
    12ce:	2a e0       	ldi	r18, 0x0A	; 10
    12d0:	37 ed       	ldi	r19, 0xD7	; 215
    12d2:	43 e2       	ldi	r20, 0x23	; 35
    12d4:	5c e3       	ldi	r21, 0x3C	; 60
    12d6:	c3 01       	movw	r24, r6
    12d8:	b2 01       	movw	r22, r4
    12da:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
    12de:	20 91 52 02 	lds	r18, 0x0252
    12e2:	30 91 53 02 	lds	r19, 0x0253
    12e6:	40 91 54 02 	lds	r20, 0x0254
    12ea:	50 91 55 02 	lds	r21, 0x0255
    12ee:	0e 94 28 0c 	call	0x1850	; 0x1850 <__addsf3>
    12f2:	26 e6       	ldi	r18, 0x66	; 102
    12f4:	36 e6       	ldi	r19, 0x66	; 102
    12f6:	46 e6       	ldi	r20, 0x66	; 102
    12f8:	5f e3       	ldi	r21, 0x3F	; 63
    12fa:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
    12fe:	2b 01       	movw	r4, r22
    1300:	3c 01       	movw	r6, r24
    1302:	20 ed       	ldi	r18, 0xD0	; 208
    1304:	3c ec       	ldi	r19, 0xCC	; 204
    1306:	4c ec       	ldi	r20, 0xCC	; 204
    1308:	5d e3       	ldi	r21, 0x3D	; 61
    130a:	6d 81       	ldd	r22, Y+5	; 0x05
    130c:	7e 81       	ldd	r23, Y+6	; 0x06
    130e:	8f 81       	ldd	r24, Y+7	; 0x07
    1310:	98 85       	ldd	r25, Y+8	; 0x08
    1312:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
    1316:	9b 01       	movw	r18, r22
    1318:	ac 01       	movw	r20, r24
    131a:	c3 01       	movw	r24, r6
    131c:	b2 01       	movw	r22, r4
    131e:	0e 94 28 0c 	call	0x1850	; 0x1850 <__addsf3>
    1322:	60 93 52 02 	sts	0x0252, r22
    1326:	70 93 53 02 	sts	0x0253, r23
    132a:	80 93 54 02 	sts	0x0254, r24
    132e:	90 93 55 02 	sts	0x0255, r25
	//x=(T*dx+x);
	yAcc= atan2(ayF,hypot(axF,azF));
    1332:	29 81       	ldd	r18, Y+1	; 0x01
    1334:	3a 81       	ldd	r19, Y+2	; 0x02
    1336:	4b 81       	ldd	r20, Y+3	; 0x03
    1338:	5c 81       	ldd	r21, Y+4	; 0x04
    133a:	c5 01       	movw	r24, r10
    133c:	b4 01       	movw	r22, r8
    133e:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <hypot>
    1342:	9b 01       	movw	r18, r22
    1344:	ac 01       	movw	r20, r24
    1346:	c7 01       	movw	r24, r14
    1348:	b6 01       	movw	r22, r12
    134a:	0e 94 9b 0c 	call	0x1936	; 0x1936 <atan2>
    134e:	6b 01       	movw	r12, r22
    1350:	7c 01       	movw	r14, r24
    1352:	60 93 62 02 	sts	0x0262, r22
    1356:	70 93 63 02 	sts	0x0263, r23
    135a:	80 93 64 02 	sts	0x0264, r24
    135e:	90 93 65 02 	sts	0x0265, r25
	y = a_te*(T*dy+y) + (1-a_te)*yAcc;
    1362:	2a e0       	ldi	r18, 0x0A	; 10
    1364:	37 ed       	ldi	r19, 0xD7	; 215
    1366:	43 e2       	ldi	r20, 0x23	; 35
    1368:	5c e3       	ldi	r21, 0x3C	; 60
    136a:	69 85       	ldd	r22, Y+9	; 0x09
    136c:	7a 85       	ldd	r23, Y+10	; 0x0a
    136e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1370:	9c 85       	ldd	r25, Y+12	; 0x0c
    1372:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
    1376:	20 91 4a 02 	lds	r18, 0x024A
    137a:	30 91 4b 02 	lds	r19, 0x024B
    137e:	40 91 4c 02 	lds	r20, 0x024C
    1382:	50 91 4d 02 	lds	r21, 0x024D
    1386:	0e 94 28 0c 	call	0x1850	; 0x1850 <__addsf3>
    138a:	26 e6       	ldi	r18, 0x66	; 102
    138c:	36 e6       	ldi	r19, 0x66	; 102
    138e:	46 e6       	ldi	r20, 0x66	; 102
    1390:	5f e3       	ldi	r21, 0x3F	; 63
    1392:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
    1396:	4b 01       	movw	r8, r22
    1398:	5c 01       	movw	r10, r24
    139a:	20 ed       	ldi	r18, 0xD0	; 208
    139c:	3c ec       	ldi	r19, 0xCC	; 204
    139e:	4c ec       	ldi	r20, 0xCC	; 204
    13a0:	5d e3       	ldi	r21, 0x3D	; 61
    13a2:	c7 01       	movw	r24, r14
    13a4:	b6 01       	movw	r22, r12
    13a6:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__mulsf3>
    13aa:	9b 01       	movw	r18, r22
    13ac:	ac 01       	movw	r20, r24
    13ae:	c5 01       	movw	r24, r10
    13b0:	b4 01       	movw	r22, r8
    13b2:	0e 94 28 0c 	call	0x1850	; 0x1850 <__addsf3>
    13b6:	60 93 4a 02 	sts	0x024A, r22
    13ba:	70 93 4b 02 	sts	0x024B, r23
    13be:	80 93 4c 02 	sts	0x024C, r24
    13c2:	90 93 4d 02 	sts	0x024D, r25
	//y=(T*dy+y);
}
    13c6:	2c 96       	adiw	r28, 0x0c	; 12
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	f8 94       	cli
    13cc:	de bf       	out	0x3e, r29	; 62
    13ce:	0f be       	out	0x3f, r0	; 63
    13d0:	cd bf       	out	0x3d, r28	; 61
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	ff 90       	pop	r15
    13d8:	ef 90       	pop	r14
    13da:	df 90       	pop	r13
    13dc:	cf 90       	pop	r12
    13de:	bf 90       	pop	r11
    13e0:	af 90       	pop	r10
    13e2:	9f 90       	pop	r9
    13e4:	8f 90       	pop	r8
    13e6:	7f 90       	pop	r7
    13e8:	6f 90       	pop	r6
    13ea:	5f 90       	pop	r5
    13ec:	4f 90       	pop	r4
    13ee:	08 95       	ret

000013f0 <_Z6z_gyrov>:

void z_gyro()
{
	if(k<kinit)
    13f0:	80 91 96 02 	lds	r24, 0x0296
    13f4:	90 91 97 02 	lds	r25, 0x0297
    13f8:	84 36       	cpi	r24, 0x64	; 100
    13fa:	91 05       	cpc	r25, r1
    13fc:	0c f0       	brlt	.+2      	; 0x1400 <_Z6z_gyrov+0x10>
    13fe:	ad c0       	rjmp	.+346    	; 0x155a <_Z6z_gyrov+0x16a>
	{
		Ax+=ax;
    1400:	60 91 60 02 	lds	r22, 0x0260
    1404:	70 91 61 02 	lds	r23, 0x0261
    1408:	88 27       	eor	r24, r24
    140a:	77 fd       	sbrc	r23, 7
    140c:	80 95       	com	r24
    140e:	98 2f       	mov	r25, r24
    1410:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__floatsisf>
    1414:	9b 01       	movw	r18, r22
    1416:	ac 01       	movw	r20, r24
    1418:	60 91 7e 02 	lds	r22, 0x027E
    141c:	70 91 7f 02 	lds	r23, 0x027F
    1420:	80 91 80 02 	lds	r24, 0x0280
    1424:	90 91 81 02 	lds	r25, 0x0281
    1428:	0e 94 28 0c 	call	0x1850	; 0x1850 <__addsf3>
    142c:	60 93 7e 02 	sts	0x027E, r22
    1430:	70 93 7f 02 	sts	0x027F, r23
    1434:	80 93 80 02 	sts	0x0280, r24
    1438:	90 93 81 02 	sts	0x0281, r25
		Ay+=ay;
    143c:	60 91 5e 02 	lds	r22, 0x025E
    1440:	70 91 5f 02 	lds	r23, 0x025F
    1444:	88 27       	eor	r24, r24
    1446:	77 fd       	sbrc	r23, 7
    1448:	80 95       	com	r24
    144a:	98 2f       	mov	r25, r24
    144c:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__floatsisf>
    1450:	9b 01       	movw	r18, r22
    1452:	ac 01       	movw	r20, r24
    1454:	60 91 7a 02 	lds	r22, 0x027A
    1458:	70 91 7b 02 	lds	r23, 0x027B
    145c:	80 91 7c 02 	lds	r24, 0x027C
    1460:	90 91 7d 02 	lds	r25, 0x027D
    1464:	0e 94 28 0c 	call	0x1850	; 0x1850 <__addsf3>
    1468:	60 93 7a 02 	sts	0x027A, r22
    146c:	70 93 7b 02 	sts	0x027B, r23
    1470:	80 93 7c 02 	sts	0x027C, r24
    1474:	90 93 7d 02 	sts	0x027D, r25
		Az+=az;
    1478:	60 91 5c 02 	lds	r22, 0x025C
    147c:	70 91 5d 02 	lds	r23, 0x025D
    1480:	88 27       	eor	r24, r24
    1482:	77 fd       	sbrc	r23, 7
    1484:	80 95       	com	r24
    1486:	98 2f       	mov	r25, r24
    1488:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__floatsisf>
    148c:	9b 01       	movw	r18, r22
    148e:	ac 01       	movw	r20, r24
    1490:	60 91 76 02 	lds	r22, 0x0276
    1494:	70 91 77 02 	lds	r23, 0x0277
    1498:	80 91 78 02 	lds	r24, 0x0278
    149c:	90 91 79 02 	lds	r25, 0x0279
    14a0:	0e 94 28 0c 	call	0x1850	; 0x1850 <__addsf3>
    14a4:	60 93 76 02 	sts	0x0276, r22
    14a8:	70 93 77 02 	sts	0x0277, r23
    14ac:	80 93 78 02 	sts	0x0278, r24
    14b0:	90 93 79 02 	sts	0x0279, r25
		Gx+=gx;
    14b4:	60 91 5a 02 	lds	r22, 0x025A
    14b8:	70 91 5b 02 	lds	r23, 0x025B
    14bc:	88 27       	eor	r24, r24
    14be:	77 fd       	sbrc	r23, 7
    14c0:	80 95       	com	r24
    14c2:	98 2f       	mov	r25, r24
    14c4:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__floatsisf>
    14c8:	9b 01       	movw	r18, r22
    14ca:	ac 01       	movw	r20, r24
    14cc:	60 91 72 02 	lds	r22, 0x0272
    14d0:	70 91 73 02 	lds	r23, 0x0273
    14d4:	80 91 74 02 	lds	r24, 0x0274
    14d8:	90 91 75 02 	lds	r25, 0x0275
    14dc:	0e 94 28 0c 	call	0x1850	; 0x1850 <__addsf3>
    14e0:	60 93 72 02 	sts	0x0272, r22
    14e4:	70 93 73 02 	sts	0x0273, r23
    14e8:	80 93 74 02 	sts	0x0274, r24
    14ec:	90 93 75 02 	sts	0x0275, r25
		Gy+=gy;
    14f0:	60 91 58 02 	lds	r22, 0x0258
    14f4:	70 91 59 02 	lds	r23, 0x0259
    14f8:	88 27       	eor	r24, r24
    14fa:	77 fd       	sbrc	r23, 7
    14fc:	80 95       	com	r24
    14fe:	98 2f       	mov	r25, r24
    1500:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__floatsisf>
    1504:	9b 01       	movw	r18, r22
    1506:	ac 01       	movw	r20, r24
    1508:	60 91 6e 02 	lds	r22, 0x026E
    150c:	70 91 6f 02 	lds	r23, 0x026F
    1510:	80 91 70 02 	lds	r24, 0x0270
    1514:	90 91 71 02 	lds	r25, 0x0271
    1518:	0e 94 28 0c 	call	0x1850	; 0x1850 <__addsf3>
    151c:	60 93 6e 02 	sts	0x026E, r22
    1520:	70 93 6f 02 	sts	0x026F, r23
    1524:	80 93 70 02 	sts	0x0270, r24
    1528:	90 93 71 02 	sts	0x0271, r25
		Gz+=gz;
    152c:	60 91 56 02 	lds	r22, 0x0256
    1530:	70 91 57 02 	lds	r23, 0x0257
    1534:	88 27       	eor	r24, r24
    1536:	77 fd       	sbrc	r23, 7
    1538:	80 95       	com	r24
    153a:	98 2f       	mov	r25, r24
    153c:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__floatsisf>
    1540:	9b 01       	movw	r18, r22
    1542:	ac 01       	movw	r20, r24
    1544:	60 91 6a 02 	lds	r22, 0x026A
    1548:	70 91 6b 02 	lds	r23, 0x026B
    154c:	80 91 6c 02 	lds	r24, 0x026C
    1550:	90 91 6d 02 	lds	r25, 0x026D
    1554:	0e 94 28 0c 	call	0x1850	; 0x1850 <__addsf3>
    1558:	8c c0       	rjmp	.+280    	; 0x1672 <_Z6z_gyrov+0x282>
	}
	else if (k==kinit)
    155a:	84 36       	cpi	r24, 0x64	; 100
    155c:	91 05       	cpc	r25, r1
    155e:	09 f0       	breq	.+2      	; 0x1562 <_Z6z_gyrov+0x172>
    1560:	90 c0       	rjmp	.+288    	; 0x1682 <_Z6z_gyrov+0x292>
	{
		Serial.println("zerando sensor...");
    1562:	61 e1       	ldi	r22, 0x11	; 17
    1564:	72 e0       	ldi	r23, 0x02	; 2
    1566:	8d e5       	ldi	r24, 0x5D	; 93
    1568:	93 e0       	ldi	r25, 0x03	; 3
    156a:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN5Print7printlnEPKc>
		Ax=Ax/kinit;
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	48 ec       	ldi	r20, 0xC8	; 200
    1574:	52 e4       	ldi	r21, 0x42	; 66
    1576:	60 91 7e 02 	lds	r22, 0x027E
    157a:	70 91 7f 02 	lds	r23, 0x027F
    157e:	80 91 80 02 	lds	r24, 0x0280
    1582:	90 91 81 02 	lds	r25, 0x0281
    1586:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <__divsf3>
    158a:	60 93 7e 02 	sts	0x027E, r22
    158e:	70 93 7f 02 	sts	0x027F, r23
    1592:	80 93 80 02 	sts	0x0280, r24
    1596:	90 93 81 02 	sts	0x0281, r25
		Ay=Ay/kinit;
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	48 ec       	ldi	r20, 0xC8	; 200
    15a0:	52 e4       	ldi	r21, 0x42	; 66
    15a2:	60 91 7a 02 	lds	r22, 0x027A
    15a6:	70 91 7b 02 	lds	r23, 0x027B
    15aa:	80 91 7c 02 	lds	r24, 0x027C
    15ae:	90 91 7d 02 	lds	r25, 0x027D
    15b2:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <__divsf3>
    15b6:	60 93 7a 02 	sts	0x027A, r22
    15ba:	70 93 7b 02 	sts	0x027B, r23
    15be:	80 93 7c 02 	sts	0x027C, r24
    15c2:	90 93 7d 02 	sts	0x027D, r25
		Az=Az/kinit-MPU6050_ACCEL_LSB_2;
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	48 ec       	ldi	r20, 0xC8	; 200
    15cc:	52 e4       	ldi	r21, 0x42	; 66
    15ce:	60 91 76 02 	lds	r22, 0x0276
    15d2:	70 91 77 02 	lds	r23, 0x0277
    15d6:	80 91 78 02 	lds	r24, 0x0278
    15da:	90 91 79 02 	lds	r25, 0x0279
    15de:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <__divsf3>
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	40 e8       	ldi	r20, 0x80	; 128
    15e8:	56 e4       	ldi	r21, 0x46	; 70
    15ea:	0e 94 27 0c 	call	0x184e	; 0x184e <__subsf3>
    15ee:	60 93 76 02 	sts	0x0276, r22
    15f2:	70 93 77 02 	sts	0x0277, r23
    15f6:	80 93 78 02 	sts	0x0278, r24
    15fa:	90 93 79 02 	sts	0x0279, r25
		
		Gx=Gx/kinit;
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	48 ec       	ldi	r20, 0xC8	; 200
    1604:	52 e4       	ldi	r21, 0x42	; 66
    1606:	60 91 72 02 	lds	r22, 0x0272
    160a:	70 91 73 02 	lds	r23, 0x0273
    160e:	80 91 74 02 	lds	r24, 0x0274
    1612:	90 91 75 02 	lds	r25, 0x0275
    1616:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <__divsf3>
    161a:	60 93 72 02 	sts	0x0272, r22
    161e:	70 93 73 02 	sts	0x0273, r23
    1622:	80 93 74 02 	sts	0x0274, r24
    1626:	90 93 75 02 	sts	0x0275, r25
		Gy=Gy/kinit;
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	48 ec       	ldi	r20, 0xC8	; 200
    1630:	52 e4       	ldi	r21, 0x42	; 66
    1632:	60 91 6e 02 	lds	r22, 0x026E
    1636:	70 91 6f 02 	lds	r23, 0x026F
    163a:	80 91 70 02 	lds	r24, 0x0270
    163e:	90 91 71 02 	lds	r25, 0x0271
    1642:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <__divsf3>
    1646:	60 93 6e 02 	sts	0x026E, r22
    164a:	70 93 6f 02 	sts	0x026F, r23
    164e:	80 93 70 02 	sts	0x0270, r24
    1652:	90 93 71 02 	sts	0x0271, r25
		Gz=Gz/kinit;
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	48 ec       	ldi	r20, 0xC8	; 200
    165c:	52 e4       	ldi	r21, 0x42	; 66
    165e:	60 91 6a 02 	lds	r22, 0x026A
    1662:	70 91 6b 02 	lds	r23, 0x026B
    1666:	80 91 6c 02 	lds	r24, 0x026C
    166a:	90 91 6d 02 	lds	r25, 0x026D
    166e:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <__divsf3>
    1672:	60 93 6a 02 	sts	0x026A, r22
    1676:	70 93 6b 02 	sts	0x026B, r23
    167a:	80 93 6c 02 	sts	0x026C, r24
    167e:	90 93 6d 02 	sts	0x026D, r25
    1682:	08 95       	ret

00001684 <_Z9newSamplev>:
void calibraESC();
void identifica();


void newSample()
{
    1684:	ef 92       	push	r14
    1686:	ff 92       	push	r15
    1688:	0f 93       	push	r16
    168a:	1f 93       	push	r17
	TCNT1 = interruptionPresetValue;
    168c:	80 91 c2 02 	lds	r24, 0x02C2
    1690:	90 91 c3 02 	lds	r25, 0x02C3
    1694:	90 93 85 00 	sts	0x0085, r25
    1698:	80 93 84 00 	sts	0x0084, r24
	mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
    169c:	46 e5       	ldi	r20, 0x56	; 86
    169e:	e4 2e       	mov	r14, r20
    16a0:	42 e0       	ldi	r20, 0x02	; 2
    16a2:	f4 2e       	mov	r15, r20
    16a4:	08 e5       	ldi	r16, 0x58	; 88
    16a6:	12 e0       	ldi	r17, 0x02	; 2
    16a8:	2a e5       	ldi	r18, 0x5A	; 90
    16aa:	32 e0       	ldi	r19, 0x02	; 2
    16ac:	4c e5       	ldi	r20, 0x5C	; 92
    16ae:	52 e0       	ldi	r21, 0x02	; 2
    16b0:	6e e5       	ldi	r22, 0x5E	; 94
    16b2:	72 e0       	ldi	r23, 0x02	; 2
    16b4:	80 e6       	ldi	r24, 0x60	; 96
    16b6:	92 e0       	ldi	r25, 0x02	; 2
    16b8:	0e 94 5f 03 	call	0x6be	; 0x6be <mpu6050_getRawData>
	k += 1;
    16bc:	80 91 96 02 	lds	r24, 0x0296
    16c0:	90 91 97 02 	lds	r25, 0x0297
    16c4:	01 96       	adiw	r24, 0x01	; 1
    16c6:	90 93 97 02 	sts	0x0297, r25
    16ca:	80 93 96 02 	sts	0x0296, r24
	if (k<=kinit)
    16ce:	85 36       	cpi	r24, 0x65	; 101
    16d0:	91 05       	cpc	r25, r1
    16d2:	34 f4       	brge	.+12     	; 0x16e0 <_Z9newSamplev+0x5c>
		if(k==1000) setRef(1,0);
		aplicaCtrl();
		#endif
		
	}
}
    16d4:	1f 91       	pop	r17
    16d6:	0f 91       	pop	r16
    16d8:	ff 90       	pop	r15
    16da:	ef 90       	pop	r14
	TCNT1 = interruptionPresetValue;
	mpu6050_getRawData(&ax, &ay, &az, &gx, &gy, &gz);
	k += 1;
	if (k<=kinit)
	{
		z_gyro();
    16dc:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <_Z6z_gyrov>
	}
	else if(k>kmax)
    16e0:	81 34       	cpi	r24, 0x41	; 65
    16e2:	96 40       	sbci	r25, 0x06	; 6
    16e4:	9c f0       	brlt	.+38     	; 0x170c <_Z9newSamplev+0x88>
  TIMSK1 |= (1 << TOIE1);       // enable timer overflow interrupt
  sei();             // enable all interrupts
}
void stopInterrupt()
{
	cli();
    16e6:	f8 94       	cli
	{
		stopInterrupt();
		Serial.println("Fim do programa...");
    16e8:	63 e2       	ldi	r22, 0x23	; 35
    16ea:	72 e0       	ldi	r23, 0x02	; 2
    16ec:	8d e5       	ldi	r24, 0x5D	; 93
    16ee:	93 e0       	ldi	r25, 0x03	; 3
    16f0:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN5Print7printlnEPKc>
void setSpeed(int motor,int speed)
{
	switch(motor)
	{
		case motorXfront:
		OCR0A=speed;
    16f4:	8f e7       	ldi	r24, 0x7F	; 127
    16f6:	87 bd       	out	0x27, r24	; 39
		break;
		case motorXback:
		OCR0B=speed;
    16f8:	88 bd       	out	0x28, r24	; 40
		break;
		case motorYfront:
		OCR2A=speed;
    16fa:	80 93 b3 00 	sts	0x00B3, r24
		break;
		case motorYback:
		OCR2B=speed;
    16fe:	80 93 b4 00 	sts	0x00B4, r24
		if(k==1000) setRef(1,0);
		aplicaCtrl();
		#endif
		
	}
}
    1702:	1f 91       	pop	r17
    1704:	0f 91       	pop	r16
    1706:	ff 90       	pop	r15
    1708:	ef 90       	pop	r14
    170a:	08 95       	ret
		setSpeed(motorYfront,MIN_SIGNAL);
		setSpeed(motorYback,MIN_SIGNAL);
	}
	else
	{
		sensor_read();
    170c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <_Z11sensor_readv>
		#if ensaio
		identifica();
		#else
		if(k==1000) setRef(1,0);
    1710:	80 91 96 02 	lds	r24, 0x0296
    1714:	90 91 97 02 	lds	r25, 0x0297
    1718:	88 3e       	cpi	r24, 0xE8	; 232
    171a:	93 40       	sbci	r25, 0x03	; 3
    171c:	a1 f4       	brne	.+40     	; 0x1746 <_Z9newSamplev+0xc2>



void setRef(float rx,float ry)
{
	refx=rx;
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	a0 e8       	ldi	r26, 0x80	; 128
    1724:	bf e3       	ldi	r27, 0x3F	; 63
    1726:	80 93 b8 02 	sts	0x02B8, r24
    172a:	90 93 b9 02 	sts	0x02B9, r25
    172e:	a0 93 ba 02 	sts	0x02BA, r26
    1732:	b0 93 bb 02 	sts	0x02BB, r27
	refy=ry;
    1736:	10 92 b4 02 	sts	0x02B4, r1
    173a:	10 92 b5 02 	sts	0x02B5, r1
    173e:	10 92 b6 02 	sts	0x02B6, r1
    1742:	10 92 b7 02 	sts	0x02B7, r1
		aplicaCtrl();
		#endif
		
	}
}
    1746:	1f 91       	pop	r17
    1748:	0f 91       	pop	r16
    174a:	ff 90       	pop	r15
    174c:	ef 90       	pop	r14
		sensor_read();
		#if ensaio
		identifica();
		#else
		if(k==1000) setRef(1,0);
		aplicaCtrl();
    174e:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <_Z10aplicaCtrlv>

00001752 <__vector_3>:

/*
 *	Interrupt that handle logical change on pin PB5 attached on the throttle of our RF controller
 */
ISR(PCINT0_vect)
{
    1752:	1f 92       	push	r1
    1754:	0f 92       	push	r0
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	0f 92       	push	r0
    175a:	11 24       	eor	r1, r1
}
    175c:	0f 90       	pop	r0
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	0f 90       	pop	r0
    1762:	1f 90       	pop	r1
    1764:	18 95       	reti

00001766 <__vector_4>:

/*
 *	Interrupt that handle logical change on pin PC5 attached on the pitch of our RF controller
 */
ISR(PCINT1_vect)
{
    1766:	1f 92       	push	r1
    1768:	0f 92       	push	r0
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	0f 92       	push	r0
    176e:	11 24       	eor	r1, r1
}
    1770:	0f 90       	pop	r0
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	0f 90       	pop	r0
    1776:	1f 90       	pop	r1
    1778:	18 95       	reti

0000177a <__vector_5>:

/*
 *	Interrupt that handle logical change on pin PB5 attached on the yaw of our RF controller
 */
ISR(PCINT2_vect)
{
    177a:	1f 92       	push	r1
    177c:	0f 92       	push	r0
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	0f 92       	push	r0
    1782:	11 24       	eor	r1, r1
    1784:	0f 90       	pop	r0
    1786:	0f be       	out	0x3f, r0	; 63
    1788:	0f 90       	pop	r0
    178a:	1f 90       	pop	r1
    178c:	18 95       	reti

0000178e <_GLOBAL__sub_I__Z12timer0Configib>:

#pragma region motor control
#define MAX_SIGNAL 255//2100
#define MIN_SIGNAL 127//980
int DC_VALUE =190;
int u1 = DC_VALUE;
    178e:	80 91 00 01 	lds	r24, 0x0100
    1792:	90 91 01 01 	lds	r25, 0x0101
    1796:	90 93 95 02 	sts	0x0295, r25
    179a:	80 93 94 02 	sts	0x0294, r24
int u2 = DC_VALUE;
    179e:	90 93 93 02 	sts	0x0293, r25
    17a2:	80 93 92 02 	sts	0x0292, r24
    17a6:	08 95       	ret

000017a8 <_Z10calibraESCv>:
	}
}

void calibraESC()
{
	motorConfig(cpPWM_500,false);
    17a8:	60 e0       	ldi	r22, 0x00	; 0
    17aa:	80 e4       	ldi	r24, 0x40	; 64
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	0e 94 41 04 	call	0x882	; 0x882 <_Z11motorConfigib>
void setSpeed(int motor,int speed)
{
	switch(motor)
	{
		case motorXfront:
		OCR0A=speed;
    17b2:	8f e7       	ldi	r24, 0x7F	; 127
    17b4:	87 bd       	out	0x27, r24	; 39
		break;
		case motorXback:
		OCR0B=speed;
    17b6:	88 bd       	out	0x28, r24	; 40
		break;
		case motorYfront:
		OCR2A=speed;
    17b8:	80 93 b3 00 	sts	0x00B3, r24
		break;
		case motorYback:
		OCR2B=speed;
    17bc:	80 93 b4 00 	sts	0x00B4, r24

	setSpeed(motorXfront,MIN_SIGNAL);
	setSpeed(motorXback, MIN_SIGNAL);
	setSpeed(motorYfront,MIN_SIGNAL);
	setSpeed(motorYback, MIN_SIGNAL);
	Serial.flush();
    17c0:	8d e5       	ldi	r24, 0x5D	; 93
    17c2:	93 e0       	ldi	r25, 0x03	; 3
    17c4:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN14HardwareSerial5flushEv>
	Serial.println(F("Wait the bits and send something again...\n amostras=["));
    17c8:	6d ed       	ldi	r22, 0xDD	; 221
    17ca:	70 e0       	ldi	r23, 0x00	; 0
    17cc:	8d e5       	ldi	r24, 0x5D	; 93
    17ce:	93 e0       	ldi	r25, 0x03	; 3
    17d0:	0e 94 a9 12 	call	0x2552	; 0x2552 <_ZN5Print7printlnEPK19__FlashStringHelper>
	while (!Serial.available());
    17d4:	8d e5       	ldi	r24, 0x5D	; 93
    17d6:	93 e0       	ldi	r25, 0x03	; 3
    17d8:	0e 94 27 11 	call	0x224e	; 0x224e <_ZN14HardwareSerial9availableEv>
    17dc:	89 2b       	or	r24, r25
    17de:	d1 f3       	breq	.-12     	; 0x17d4 <_Z10calibraESCv+0x2c>
	Serial.read();
    17e0:	8d e5       	ldi	r24, 0x5D	; 93
    17e2:	93 e0       	ldi	r25, 0x03	; 3
    17e4:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <_ZN14HardwareSerial4readEv>

000017e8 <setup>:
	
}

void setup()
{
	interruptPointer= &newSample;
    17e8:	82 e4       	ldi	r24, 0x42	; 66
    17ea:	9b e0       	ldi	r25, 0x0B	; 11
    17ec:	90 93 bd 02 	sts	0x02BD, r25
    17f0:	80 93 bc 02 	sts	0x02BC, r24
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    17f4:	26 e0       	ldi	r18, 0x06	; 6
    17f6:	40 e0       	ldi	r20, 0x00	; 0
    17f8:	52 ec       	ldi	r21, 0xC2	; 194
    17fa:	61 e0       	ldi	r22, 0x01	; 1
    17fc:	70 e0       	ldi	r23, 0x00	; 0
    17fe:	8d e5       	ldi	r24, 0x5D	; 93
    1800:	93 e0       	ldi	r25, 0x03	; 3
    1802:	0e 94 9b 10 	call	0x2136	; 0x2136 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(UART_BAUD_RATE);
	Serial.flush();
    1806:	8d e5       	ldi	r24, 0x5D	; 93
    1808:	93 e0       	ldi	r25, 0x03	; 3
    180a:	0e 94 84 11 	call	0x2308	; 0x2308 <_ZN14HardwareSerial5flushEv>
	#if ensaio
	Serial.println(F("[ENSAIO] Initializing..."));
	#else
	Serial.println(F("Initializing..."));
    180e:	6d ec       	ldi	r22, 0xCD	; 205
    1810:	70 e0       	ldi	r23, 0x00	; 0
    1812:	8d e5       	ldi	r24, 0x5D	; 93
    1814:	93 e0       	ldi	r25, 0x03	; 3
    1816:	0e 94 a9 12 	call	0x2552	; 0x2552 <_ZN5Print7printlnEPK19__FlashStringHelper>
	#endif
	mpu6050_init();
    181a:	0e 94 2b 03 	call	0x656	; 0x656 <mpu6050_init>
	Serial.println(mpu6050_testConnection()?F("MPU OK") : F("MPU NOK"));
    181e:	0e 94 1d 03 	call	0x63a	; 0x63a <mpu6050_testConnection>
    1822:	88 23       	and	r24, r24
    1824:	19 f0       	breq	.+6      	; 0x182c <setup+0x44>
    1826:	66 ec       	ldi	r22, 0xC6	; 198
    1828:	70 e0       	ldi	r23, 0x00	; 0
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <setup+0x48>
    182c:	6e eb       	ldi	r22, 0xBE	; 190
    182e:	70 e0       	ldi	r23, 0x00	; 0
    1830:	8d e5       	ldi	r24, 0x5D	; 93
    1832:	93 e0       	ldi	r25, 0x03	; 3
    1834:	0e 94 a9 12 	call	0x2552	; 0x2552 <_ZN5Print7printlnEPK19__FlashStringHelper>
	calibraESC();
    1838:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <_Z10calibraESCv>
	initInterrupt(T);
    183c:	6a e0       	ldi	r22, 0x0A	; 10
    183e:	77 ed       	ldi	r23, 0xD7	; 215
    1840:	83 e2       	ldi	r24, 0x23	; 35
    1842:	9c e3       	ldi	r25, 0x3C	; 60
    1844:	0c 94 57 05 	jmp	0xaae	; 0xaae <_Z13initInterruptf>

00001848 <main>:
	PCMSK2 = (1<<PCINT20);							//PD4 pin
}

int main(void)
{
	setup();
    1848:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <setup>
    184c:	ff cf       	rjmp	.-2      	; 0x184c <main+0x4>

0000184e <__subsf3>:
    184e:	50 58       	subi	r21, 0x80	; 128

00001850 <__addsf3>:
    1850:	bb 27       	eor	r27, r27
    1852:	aa 27       	eor	r26, r26
    1854:	0e d0       	rcall	.+28     	; 0x1872 <__addsf3x>
    1856:	2d c2       	rjmp	.+1114   	; 0x1cb2 <__fp_round>
    1858:	1e d2       	rcall	.+1084   	; 0x1c96 <__fp_pscA>
    185a:	30 f0       	brcs	.+12     	; 0x1868 <__addsf3+0x18>
    185c:	23 d2       	rcall	.+1094   	; 0x1ca4 <__fp_pscB>
    185e:	20 f0       	brcs	.+8      	; 0x1868 <__addsf3+0x18>
    1860:	31 f4       	brne	.+12     	; 0x186e <__addsf3+0x1e>
    1862:	9f 3f       	cpi	r25, 0xFF	; 255
    1864:	11 f4       	brne	.+4      	; 0x186a <__addsf3+0x1a>
    1866:	1e f4       	brtc	.+6      	; 0x186e <__addsf3+0x1e>
    1868:	ee c1       	rjmp	.+988    	; 0x1c46 <__fp_nan>
    186a:	0e f4       	brtc	.+2      	; 0x186e <__addsf3+0x1e>
    186c:	e0 95       	com	r30
    186e:	e7 fb       	bst	r30, 7
    1870:	e4 c1       	rjmp	.+968    	; 0x1c3a <__fp_inf>

00001872 <__addsf3x>:
    1872:	e9 2f       	mov	r30, r25
    1874:	2f d2       	rcall	.+1118   	; 0x1cd4 <__fp_split3>
    1876:	80 f3       	brcs	.-32     	; 0x1858 <__addsf3+0x8>
    1878:	ba 17       	cp	r27, r26
    187a:	62 07       	cpc	r22, r18
    187c:	73 07       	cpc	r23, r19
    187e:	84 07       	cpc	r24, r20
    1880:	95 07       	cpc	r25, r21
    1882:	18 f0       	brcs	.+6      	; 0x188a <__addsf3x+0x18>
    1884:	71 f4       	brne	.+28     	; 0x18a2 <__addsf3x+0x30>
    1886:	9e f5       	brtc	.+102    	; 0x18ee <__addsf3x+0x7c>
    1888:	47 c2       	rjmp	.+1166   	; 0x1d18 <__fp_zero>
    188a:	0e f4       	brtc	.+2      	; 0x188e <__addsf3x+0x1c>
    188c:	e0 95       	com	r30
    188e:	0b 2e       	mov	r0, r27
    1890:	ba 2f       	mov	r27, r26
    1892:	a0 2d       	mov	r26, r0
    1894:	0b 01       	movw	r0, r22
    1896:	b9 01       	movw	r22, r18
    1898:	90 01       	movw	r18, r0
    189a:	0c 01       	movw	r0, r24
    189c:	ca 01       	movw	r24, r20
    189e:	a0 01       	movw	r20, r0
    18a0:	11 24       	eor	r1, r1
    18a2:	ff 27       	eor	r31, r31
    18a4:	59 1b       	sub	r21, r25
    18a6:	99 f0       	breq	.+38     	; 0x18ce <__addsf3x+0x5c>
    18a8:	59 3f       	cpi	r21, 0xF9	; 249
    18aa:	50 f4       	brcc	.+20     	; 0x18c0 <__addsf3x+0x4e>
    18ac:	50 3e       	cpi	r21, 0xE0	; 224
    18ae:	68 f1       	brcs	.+90     	; 0x190a <__addsf3x+0x98>
    18b0:	1a 16       	cp	r1, r26
    18b2:	f0 40       	sbci	r31, 0x00	; 0
    18b4:	a2 2f       	mov	r26, r18
    18b6:	23 2f       	mov	r18, r19
    18b8:	34 2f       	mov	r19, r20
    18ba:	44 27       	eor	r20, r20
    18bc:	58 5f       	subi	r21, 0xF8	; 248
    18be:	f3 cf       	rjmp	.-26     	; 0x18a6 <__addsf3x+0x34>
    18c0:	46 95       	lsr	r20
    18c2:	37 95       	ror	r19
    18c4:	27 95       	ror	r18
    18c6:	a7 95       	ror	r26
    18c8:	f0 40       	sbci	r31, 0x00	; 0
    18ca:	53 95       	inc	r21
    18cc:	c9 f7       	brne	.-14     	; 0x18c0 <__addsf3x+0x4e>
    18ce:	7e f4       	brtc	.+30     	; 0x18ee <__addsf3x+0x7c>
    18d0:	1f 16       	cp	r1, r31
    18d2:	ba 0b       	sbc	r27, r26
    18d4:	62 0b       	sbc	r22, r18
    18d6:	73 0b       	sbc	r23, r19
    18d8:	84 0b       	sbc	r24, r20
    18da:	ba f0       	brmi	.+46     	; 0x190a <__addsf3x+0x98>
    18dc:	91 50       	subi	r25, 0x01	; 1
    18de:	a1 f0       	breq	.+40     	; 0x1908 <__addsf3x+0x96>
    18e0:	ff 0f       	add	r31, r31
    18e2:	bb 1f       	adc	r27, r27
    18e4:	66 1f       	adc	r22, r22
    18e6:	77 1f       	adc	r23, r23
    18e8:	88 1f       	adc	r24, r24
    18ea:	c2 f7       	brpl	.-16     	; 0x18dc <__addsf3x+0x6a>
    18ec:	0e c0       	rjmp	.+28     	; 0x190a <__addsf3x+0x98>
    18ee:	ba 0f       	add	r27, r26
    18f0:	62 1f       	adc	r22, r18
    18f2:	73 1f       	adc	r23, r19
    18f4:	84 1f       	adc	r24, r20
    18f6:	48 f4       	brcc	.+18     	; 0x190a <__addsf3x+0x98>
    18f8:	87 95       	ror	r24
    18fa:	77 95       	ror	r23
    18fc:	67 95       	ror	r22
    18fe:	b7 95       	ror	r27
    1900:	f7 95       	ror	r31
    1902:	9e 3f       	cpi	r25, 0xFE	; 254
    1904:	08 f0       	brcs	.+2      	; 0x1908 <__addsf3x+0x96>
    1906:	b3 cf       	rjmp	.-154    	; 0x186e <__addsf3+0x1e>
    1908:	93 95       	inc	r25
    190a:	88 0f       	add	r24, r24
    190c:	08 f0       	brcs	.+2      	; 0x1910 <__addsf3x+0x9e>
    190e:	99 27       	eor	r25, r25
    1910:	ee 0f       	add	r30, r30
    1912:	97 95       	ror	r25
    1914:	87 95       	ror	r24
    1916:	08 95       	ret
    1918:	be d1       	rcall	.+892    	; 0x1c96 <__fp_pscA>
    191a:	58 f0       	brcs	.+22     	; 0x1932 <__addsf3x+0xc0>
    191c:	80 e8       	ldi	r24, 0x80	; 128
    191e:	91 e0       	ldi	r25, 0x01	; 1
    1920:	09 f4       	brne	.+2      	; 0x1924 <__addsf3x+0xb2>
    1922:	9e ef       	ldi	r25, 0xFE	; 254
    1924:	bf d1       	rcall	.+894    	; 0x1ca4 <__fp_pscB>
    1926:	28 f0       	brcs	.+10     	; 0x1932 <__addsf3x+0xc0>
    1928:	40 e8       	ldi	r20, 0x80	; 128
    192a:	51 e0       	ldi	r21, 0x01	; 1
    192c:	59 f4       	brne	.+22     	; 0x1944 <atan2+0xe>
    192e:	5e ef       	ldi	r21, 0xFE	; 254
    1930:	09 c0       	rjmp	.+18     	; 0x1944 <atan2+0xe>
    1932:	89 c1       	rjmp	.+786    	; 0x1c46 <__fp_nan>
    1934:	f1 c1       	rjmp	.+994    	; 0x1d18 <__fp_zero>

00001936 <atan2>:
    1936:	e9 2f       	mov	r30, r25
    1938:	e0 78       	andi	r30, 0x80	; 128
    193a:	cc d1       	rcall	.+920    	; 0x1cd4 <__fp_split3>
    193c:	68 f3       	brcs	.-38     	; 0x1918 <__addsf3x+0xa6>
    193e:	09 2e       	mov	r0, r25
    1940:	05 2a       	or	r0, r21
    1942:	c1 f3       	breq	.-16     	; 0x1934 <__addsf3x+0xc2>
    1944:	26 17       	cp	r18, r22
    1946:	37 07       	cpc	r19, r23
    1948:	48 07       	cpc	r20, r24
    194a:	59 07       	cpc	r21, r25
    194c:	38 f0       	brcs	.+14     	; 0x195c <atan2+0x26>
    194e:	0e 2e       	mov	r0, r30
    1950:	07 f8       	bld	r0, 7
    1952:	e0 25       	eor	r30, r0
    1954:	69 f0       	breq	.+26     	; 0x1970 <atan2+0x3a>
    1956:	e0 25       	eor	r30, r0
    1958:	e0 64       	ori	r30, 0x40	; 64
    195a:	0a c0       	rjmp	.+20     	; 0x1970 <atan2+0x3a>
    195c:	ef 63       	ori	r30, 0x3F	; 63
    195e:	07 f8       	bld	r0, 7
    1960:	00 94       	com	r0
    1962:	07 fa       	bst	r0, 7
    1964:	db 01       	movw	r26, r22
    1966:	b9 01       	movw	r22, r18
    1968:	9d 01       	movw	r18, r26
    196a:	dc 01       	movw	r26, r24
    196c:	ca 01       	movw	r24, r20
    196e:	ad 01       	movw	r20, r26
    1970:	ef 93       	push	r30
    1972:	47 d0       	rcall	.+142    	; 0x1a02 <__divsf3_pse>
    1974:	9e d1       	rcall	.+828    	; 0x1cb2 <__fp_round>
    1976:	0a d0       	rcall	.+20     	; 0x198c <atan>
    1978:	5f 91       	pop	r21
    197a:	55 23       	and	r21, r21
    197c:	31 f0       	breq	.+12     	; 0x198a <atan2+0x54>
    197e:	2b ed       	ldi	r18, 0xDB	; 219
    1980:	3f e0       	ldi	r19, 0x0F	; 15
    1982:	49 e4       	ldi	r20, 0x49	; 73
    1984:	50 fd       	sbrc	r21, 0
    1986:	49 ec       	ldi	r20, 0xC9	; 201
    1988:	63 cf       	rjmp	.-314    	; 0x1850 <__addsf3>
    198a:	08 95       	ret

0000198c <atan>:
    198c:	df 93       	push	r29
    198e:	dd 27       	eor	r29, r29
    1990:	b9 2f       	mov	r27, r25
    1992:	bf 77       	andi	r27, 0x7F	; 127
    1994:	40 e8       	ldi	r20, 0x80	; 128
    1996:	5f e3       	ldi	r21, 0x3F	; 63
    1998:	16 16       	cp	r1, r22
    199a:	17 06       	cpc	r1, r23
    199c:	48 07       	cpc	r20, r24
    199e:	5b 07       	cpc	r21, r27
    19a0:	10 f4       	brcc	.+4      	; 0x19a6 <atan+0x1a>
    19a2:	d9 2f       	mov	r29, r25
    19a4:	25 d2       	rcall	.+1098   	; 0x1df0 <inverse>
    19a6:	9f 93       	push	r25
    19a8:	8f 93       	push	r24
    19aa:	7f 93       	push	r23
    19ac:	6f 93       	push	r22
    19ae:	35 d3       	rcall	.+1642   	; 0x201a <square>
    19b0:	e8 e6       	ldi	r30, 0x68	; 104
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	4b d1       	rcall	.+662    	; 0x1c4c <__fp_powser>
    19b6:	7d d1       	rcall	.+762    	; 0x1cb2 <__fp_round>
    19b8:	2f 91       	pop	r18
    19ba:	3f 91       	pop	r19
    19bc:	4f 91       	pop	r20
    19be:	5f 91       	pop	r21
    19c0:	93 d2       	rcall	.+1318   	; 0x1ee8 <__mulsf3x>
    19c2:	dd 23       	and	r29, r29
    19c4:	49 f0       	breq	.+18     	; 0x19d8 <atan+0x4c>
    19c6:	90 58       	subi	r25, 0x80	; 128
    19c8:	a2 ea       	ldi	r26, 0xA2	; 162
    19ca:	2a ed       	ldi	r18, 0xDA	; 218
    19cc:	3f e0       	ldi	r19, 0x0F	; 15
    19ce:	49 ec       	ldi	r20, 0xC9	; 201
    19d0:	5f e3       	ldi	r21, 0x3F	; 63
    19d2:	d0 78       	andi	r29, 0x80	; 128
    19d4:	5d 27       	eor	r21, r29
    19d6:	4d df       	rcall	.-358    	; 0x1872 <__addsf3x>
    19d8:	df 91       	pop	r29
    19da:	6b c1       	rjmp	.+726    	; 0x1cb2 <__fp_round>

000019dc <__cmpsf2>:
    19dc:	0a d1       	rcall	.+532    	; 0x1bf2 <__fp_cmp>
    19de:	08 f4       	brcc	.+2      	; 0x19e2 <__cmpsf2+0x6>
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	08 95       	ret

000019e4 <__divsf3>:
    19e4:	0c d0       	rcall	.+24     	; 0x19fe <__divsf3x>
    19e6:	65 c1       	rjmp	.+714    	; 0x1cb2 <__fp_round>
    19e8:	5d d1       	rcall	.+698    	; 0x1ca4 <__fp_pscB>
    19ea:	40 f0       	brcs	.+16     	; 0x19fc <__divsf3+0x18>
    19ec:	54 d1       	rcall	.+680    	; 0x1c96 <__fp_pscA>
    19ee:	30 f0       	brcs	.+12     	; 0x19fc <__divsf3+0x18>
    19f0:	21 f4       	brne	.+8      	; 0x19fa <__divsf3+0x16>
    19f2:	5f 3f       	cpi	r21, 0xFF	; 255
    19f4:	19 f0       	breq	.+6      	; 0x19fc <__divsf3+0x18>
    19f6:	21 c1       	rjmp	.+578    	; 0x1c3a <__fp_inf>
    19f8:	51 11       	cpse	r21, r1
    19fa:	8f c1       	rjmp	.+798    	; 0x1d1a <__fp_szero>
    19fc:	24 c1       	rjmp	.+584    	; 0x1c46 <__fp_nan>

000019fe <__divsf3x>:
    19fe:	6a d1       	rcall	.+724    	; 0x1cd4 <__fp_split3>
    1a00:	98 f3       	brcs	.-26     	; 0x19e8 <__divsf3+0x4>

00001a02 <__divsf3_pse>:
    1a02:	99 23       	and	r25, r25
    1a04:	c9 f3       	breq	.-14     	; 0x19f8 <__divsf3+0x14>
    1a06:	55 23       	and	r21, r21
    1a08:	b1 f3       	breq	.-20     	; 0x19f6 <__divsf3+0x12>
    1a0a:	95 1b       	sub	r25, r21
    1a0c:	55 0b       	sbc	r21, r21
    1a0e:	bb 27       	eor	r27, r27
    1a10:	aa 27       	eor	r26, r26
    1a12:	62 17       	cp	r22, r18
    1a14:	73 07       	cpc	r23, r19
    1a16:	84 07       	cpc	r24, r20
    1a18:	38 f0       	brcs	.+14     	; 0x1a28 <__divsf3_pse+0x26>
    1a1a:	9f 5f       	subi	r25, 0xFF	; 255
    1a1c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a1e:	22 0f       	add	r18, r18
    1a20:	33 1f       	adc	r19, r19
    1a22:	44 1f       	adc	r20, r20
    1a24:	aa 1f       	adc	r26, r26
    1a26:	a9 f3       	breq	.-22     	; 0x1a12 <__divsf3_pse+0x10>
    1a28:	33 d0       	rcall	.+102    	; 0x1a90 <__divsf3_pse+0x8e>
    1a2a:	0e 2e       	mov	r0, r30
    1a2c:	3a f0       	brmi	.+14     	; 0x1a3c <__divsf3_pse+0x3a>
    1a2e:	e0 e8       	ldi	r30, 0x80	; 128
    1a30:	30 d0       	rcall	.+96     	; 0x1a92 <__divsf3_pse+0x90>
    1a32:	91 50       	subi	r25, 0x01	; 1
    1a34:	50 40       	sbci	r21, 0x00	; 0
    1a36:	e6 95       	lsr	r30
    1a38:	00 1c       	adc	r0, r0
    1a3a:	ca f7       	brpl	.-14     	; 0x1a2e <__divsf3_pse+0x2c>
    1a3c:	29 d0       	rcall	.+82     	; 0x1a90 <__divsf3_pse+0x8e>
    1a3e:	fe 2f       	mov	r31, r30
    1a40:	27 d0       	rcall	.+78     	; 0x1a90 <__divsf3_pse+0x8e>
    1a42:	66 0f       	add	r22, r22
    1a44:	77 1f       	adc	r23, r23
    1a46:	88 1f       	adc	r24, r24
    1a48:	bb 1f       	adc	r27, r27
    1a4a:	26 17       	cp	r18, r22
    1a4c:	37 07       	cpc	r19, r23
    1a4e:	48 07       	cpc	r20, r24
    1a50:	ab 07       	cpc	r26, r27
    1a52:	b0 e8       	ldi	r27, 0x80	; 128
    1a54:	09 f0       	breq	.+2      	; 0x1a58 <__divsf3_pse+0x56>
    1a56:	bb 0b       	sbc	r27, r27
    1a58:	80 2d       	mov	r24, r0
    1a5a:	bf 01       	movw	r22, r30
    1a5c:	ff 27       	eor	r31, r31
    1a5e:	93 58       	subi	r25, 0x83	; 131
    1a60:	5f 4f       	sbci	r21, 0xFF	; 255
    1a62:	2a f0       	brmi	.+10     	; 0x1a6e <__divsf3_pse+0x6c>
    1a64:	9e 3f       	cpi	r25, 0xFE	; 254
    1a66:	51 05       	cpc	r21, r1
    1a68:	68 f0       	brcs	.+26     	; 0x1a84 <__divsf3_pse+0x82>
    1a6a:	e7 c0       	rjmp	.+462    	; 0x1c3a <__fp_inf>
    1a6c:	56 c1       	rjmp	.+684    	; 0x1d1a <__fp_szero>
    1a6e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a70:	ec f3       	brlt	.-6      	; 0x1a6c <__divsf3_pse+0x6a>
    1a72:	98 3e       	cpi	r25, 0xE8	; 232
    1a74:	dc f3       	brlt	.-10     	; 0x1a6c <__divsf3_pse+0x6a>
    1a76:	86 95       	lsr	r24
    1a78:	77 95       	ror	r23
    1a7a:	67 95       	ror	r22
    1a7c:	b7 95       	ror	r27
    1a7e:	f7 95       	ror	r31
    1a80:	9f 5f       	subi	r25, 0xFF	; 255
    1a82:	c9 f7       	brne	.-14     	; 0x1a76 <__divsf3_pse+0x74>
    1a84:	88 0f       	add	r24, r24
    1a86:	91 1d       	adc	r25, r1
    1a88:	96 95       	lsr	r25
    1a8a:	87 95       	ror	r24
    1a8c:	97 f9       	bld	r25, 7
    1a8e:	08 95       	ret
    1a90:	e1 e0       	ldi	r30, 0x01	; 1
    1a92:	66 0f       	add	r22, r22
    1a94:	77 1f       	adc	r23, r23
    1a96:	88 1f       	adc	r24, r24
    1a98:	bb 1f       	adc	r27, r27
    1a9a:	62 17       	cp	r22, r18
    1a9c:	73 07       	cpc	r23, r19
    1a9e:	84 07       	cpc	r24, r20
    1aa0:	ba 07       	cpc	r27, r26
    1aa2:	20 f0       	brcs	.+8      	; 0x1aac <__divsf3_pse+0xaa>
    1aa4:	62 1b       	sub	r22, r18
    1aa6:	73 0b       	sbc	r23, r19
    1aa8:	84 0b       	sbc	r24, r20
    1aaa:	ba 0b       	sbc	r27, r26
    1aac:	ee 1f       	adc	r30, r30
    1aae:	88 f7       	brcc	.-30     	; 0x1a92 <__divsf3_pse+0x90>
    1ab0:	e0 95       	com	r30
    1ab2:	08 95       	ret
    1ab4:	19 f4       	brne	.+6      	; 0x1abc <__divsf3_pse+0xba>
    1ab6:	0e f0       	brts	.+2      	; 0x1aba <__divsf3_pse+0xb8>
    1ab8:	c0 c0       	rjmp	.+384    	; 0x1c3a <__fp_inf>
    1aba:	2e c1       	rjmp	.+604    	; 0x1d18 <__fp_zero>
    1abc:	c4 c0       	rjmp	.+392    	; 0x1c46 <__fp_nan>

00001abe <exp>:
    1abe:	12 d1       	rcall	.+548    	; 0x1ce4 <__fp_splitA>
    1ac0:	c8 f3       	brcs	.-14     	; 0x1ab4 <__divsf3_pse+0xb2>
    1ac2:	96 38       	cpi	r25, 0x86	; 134
    1ac4:	c0 f7       	brcc	.-16     	; 0x1ab6 <__divsf3_pse+0xb4>
    1ac6:	07 f8       	bld	r0, 7
    1ac8:	0f 92       	push	r0
    1aca:	e8 94       	clt
    1acc:	2b e3       	ldi	r18, 0x3B	; 59
    1ace:	3a ea       	ldi	r19, 0xAA	; 170
    1ad0:	48 eb       	ldi	r20, 0xB8	; 184
    1ad2:	5f e7       	ldi	r21, 0x7F	; 127
    1ad4:	0b d2       	rcall	.+1046   	; 0x1eec <__mulsf3_pse>
    1ad6:	0f 92       	push	r0
    1ad8:	0f 92       	push	r0
    1ada:	0f 92       	push	r0
    1adc:	4d b7       	in	r20, 0x3d	; 61
    1ade:	5e b7       	in	r21, 0x3e	; 62
    1ae0:	0f 92       	push	r0
    1ae2:	c3 d1       	rcall	.+902    	; 0x1e6a <modf>
    1ae4:	e5 e9       	ldi	r30, 0x95	; 149
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	b1 d0       	rcall	.+354    	; 0x1c4c <__fp_powser>
    1aea:	4f 91       	pop	r20
    1aec:	5f 91       	pop	r21
    1aee:	ef 91       	pop	r30
    1af0:	ff 91       	pop	r31
    1af2:	e5 95       	asr	r30
    1af4:	ee 1f       	adc	r30, r30
    1af6:	ff 1f       	adc	r31, r31
    1af8:	49 f0       	breq	.+18     	; 0x1b0c <exp+0x4e>
    1afa:	fe 57       	subi	r31, 0x7E	; 126
    1afc:	e0 68       	ori	r30, 0x80	; 128
    1afe:	44 27       	eor	r20, r20
    1b00:	ee 0f       	add	r30, r30
    1b02:	44 1f       	adc	r20, r20
    1b04:	fa 95       	dec	r31
    1b06:	e1 f7       	brne	.-8      	; 0x1b00 <exp+0x42>
    1b08:	41 95       	neg	r20
    1b0a:	55 0b       	sbc	r21, r21
    1b0c:	7a d1       	rcall	.+756    	; 0x1e02 <ldexp>
    1b0e:	0f 90       	pop	r0
    1b10:	07 fe       	sbrs	r0, 7
    1b12:	6e c1       	rjmp	.+732    	; 0x1df0 <inverse>
    1b14:	08 95       	ret

00001b16 <__fixsfsi>:
    1b16:	04 d0       	rcall	.+8      	; 0x1b20 <__fixunssfsi>
    1b18:	68 94       	set
    1b1a:	b1 11       	cpse	r27, r1
    1b1c:	fe c0       	rjmp	.+508    	; 0x1d1a <__fp_szero>
    1b1e:	08 95       	ret

00001b20 <__fixunssfsi>:
    1b20:	e1 d0       	rcall	.+450    	; 0x1ce4 <__fp_splitA>
    1b22:	88 f0       	brcs	.+34     	; 0x1b46 <__fixunssfsi+0x26>
    1b24:	9f 57       	subi	r25, 0x7F	; 127
    1b26:	90 f0       	brcs	.+36     	; 0x1b4c <__fixunssfsi+0x2c>
    1b28:	b9 2f       	mov	r27, r25
    1b2a:	99 27       	eor	r25, r25
    1b2c:	b7 51       	subi	r27, 0x17	; 23
    1b2e:	a0 f0       	brcs	.+40     	; 0x1b58 <__fixunssfsi+0x38>
    1b30:	d1 f0       	breq	.+52     	; 0x1b66 <__fixunssfsi+0x46>
    1b32:	66 0f       	add	r22, r22
    1b34:	77 1f       	adc	r23, r23
    1b36:	88 1f       	adc	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	1a f0       	brmi	.+6      	; 0x1b42 <__fixunssfsi+0x22>
    1b3c:	ba 95       	dec	r27
    1b3e:	c9 f7       	brne	.-14     	; 0x1b32 <__fixunssfsi+0x12>
    1b40:	12 c0       	rjmp	.+36     	; 0x1b66 <__fixunssfsi+0x46>
    1b42:	b1 30       	cpi	r27, 0x01	; 1
    1b44:	81 f0       	breq	.+32     	; 0x1b66 <__fixunssfsi+0x46>
    1b46:	e8 d0       	rcall	.+464    	; 0x1d18 <__fp_zero>
    1b48:	b1 e0       	ldi	r27, 0x01	; 1
    1b4a:	08 95       	ret
    1b4c:	e5 c0       	rjmp	.+458    	; 0x1d18 <__fp_zero>
    1b4e:	67 2f       	mov	r22, r23
    1b50:	78 2f       	mov	r23, r24
    1b52:	88 27       	eor	r24, r24
    1b54:	b8 5f       	subi	r27, 0xF8	; 248
    1b56:	39 f0       	breq	.+14     	; 0x1b66 <__fixunssfsi+0x46>
    1b58:	b9 3f       	cpi	r27, 0xF9	; 249
    1b5a:	cc f3       	brlt	.-14     	; 0x1b4e <__fixunssfsi+0x2e>
    1b5c:	86 95       	lsr	r24
    1b5e:	77 95       	ror	r23
    1b60:	67 95       	ror	r22
    1b62:	b3 95       	inc	r27
    1b64:	d9 f7       	brne	.-10     	; 0x1b5c <__fixunssfsi+0x3c>
    1b66:	3e f4       	brtc	.+14     	; 0x1b76 <__fixunssfsi+0x56>
    1b68:	90 95       	com	r25
    1b6a:	80 95       	com	r24
    1b6c:	70 95       	com	r23
    1b6e:	61 95       	neg	r22
    1b70:	7f 4f       	sbci	r23, 0xFF	; 255
    1b72:	8f 4f       	sbci	r24, 0xFF	; 255
    1b74:	9f 4f       	sbci	r25, 0xFF	; 255
    1b76:	08 95       	ret

00001b78 <__floatunsisf>:
    1b78:	e8 94       	clt
    1b7a:	09 c0       	rjmp	.+18     	; 0x1b8e <__floatsisf+0x12>

00001b7c <__floatsisf>:
    1b7c:	97 fb       	bst	r25, 7
    1b7e:	3e f4       	brtc	.+14     	; 0x1b8e <__floatsisf+0x12>
    1b80:	90 95       	com	r25
    1b82:	80 95       	com	r24
    1b84:	70 95       	com	r23
    1b86:	61 95       	neg	r22
    1b88:	7f 4f       	sbci	r23, 0xFF	; 255
    1b8a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b8e:	99 23       	and	r25, r25
    1b90:	a9 f0       	breq	.+42     	; 0x1bbc <__floatsisf+0x40>
    1b92:	f9 2f       	mov	r31, r25
    1b94:	96 e9       	ldi	r25, 0x96	; 150
    1b96:	bb 27       	eor	r27, r27
    1b98:	93 95       	inc	r25
    1b9a:	f6 95       	lsr	r31
    1b9c:	87 95       	ror	r24
    1b9e:	77 95       	ror	r23
    1ba0:	67 95       	ror	r22
    1ba2:	b7 95       	ror	r27
    1ba4:	f1 11       	cpse	r31, r1
    1ba6:	f8 cf       	rjmp	.-16     	; 0x1b98 <__floatsisf+0x1c>
    1ba8:	fa f4       	brpl	.+62     	; 0x1be8 <__floatsisf+0x6c>
    1baa:	bb 0f       	add	r27, r27
    1bac:	11 f4       	brne	.+4      	; 0x1bb2 <__floatsisf+0x36>
    1bae:	60 ff       	sbrs	r22, 0
    1bb0:	1b c0       	rjmp	.+54     	; 0x1be8 <__floatsisf+0x6c>
    1bb2:	6f 5f       	subi	r22, 0xFF	; 255
    1bb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb6:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bba:	16 c0       	rjmp	.+44     	; 0x1be8 <__floatsisf+0x6c>
    1bbc:	88 23       	and	r24, r24
    1bbe:	11 f0       	breq	.+4      	; 0x1bc4 <__floatsisf+0x48>
    1bc0:	96 e9       	ldi	r25, 0x96	; 150
    1bc2:	11 c0       	rjmp	.+34     	; 0x1be6 <__floatsisf+0x6a>
    1bc4:	77 23       	and	r23, r23
    1bc6:	21 f0       	breq	.+8      	; 0x1bd0 <__floatsisf+0x54>
    1bc8:	9e e8       	ldi	r25, 0x8E	; 142
    1bca:	87 2f       	mov	r24, r23
    1bcc:	76 2f       	mov	r23, r22
    1bce:	05 c0       	rjmp	.+10     	; 0x1bda <__floatsisf+0x5e>
    1bd0:	66 23       	and	r22, r22
    1bd2:	71 f0       	breq	.+28     	; 0x1bf0 <__floatsisf+0x74>
    1bd4:	96 e8       	ldi	r25, 0x86	; 134
    1bd6:	86 2f       	mov	r24, r22
    1bd8:	70 e0       	ldi	r23, 0x00	; 0
    1bda:	60 e0       	ldi	r22, 0x00	; 0
    1bdc:	2a f0       	brmi	.+10     	; 0x1be8 <__floatsisf+0x6c>
    1bde:	9a 95       	dec	r25
    1be0:	66 0f       	add	r22, r22
    1be2:	77 1f       	adc	r23, r23
    1be4:	88 1f       	adc	r24, r24
    1be6:	da f7       	brpl	.-10     	; 0x1bde <__floatsisf+0x62>
    1be8:	88 0f       	add	r24, r24
    1bea:	96 95       	lsr	r25
    1bec:	87 95       	ror	r24
    1bee:	97 f9       	bld	r25, 7
    1bf0:	08 95       	ret

00001bf2 <__fp_cmp>:
    1bf2:	99 0f       	add	r25, r25
    1bf4:	00 08       	sbc	r0, r0
    1bf6:	55 0f       	add	r21, r21
    1bf8:	aa 0b       	sbc	r26, r26
    1bfa:	e0 e8       	ldi	r30, 0x80	; 128
    1bfc:	fe ef       	ldi	r31, 0xFE	; 254
    1bfe:	16 16       	cp	r1, r22
    1c00:	17 06       	cpc	r1, r23
    1c02:	e8 07       	cpc	r30, r24
    1c04:	f9 07       	cpc	r31, r25
    1c06:	c0 f0       	brcs	.+48     	; 0x1c38 <__fp_cmp+0x46>
    1c08:	12 16       	cp	r1, r18
    1c0a:	13 06       	cpc	r1, r19
    1c0c:	e4 07       	cpc	r30, r20
    1c0e:	f5 07       	cpc	r31, r21
    1c10:	98 f0       	brcs	.+38     	; 0x1c38 <__fp_cmp+0x46>
    1c12:	62 1b       	sub	r22, r18
    1c14:	73 0b       	sbc	r23, r19
    1c16:	84 0b       	sbc	r24, r20
    1c18:	95 0b       	sbc	r25, r21
    1c1a:	39 f4       	brne	.+14     	; 0x1c2a <__fp_cmp+0x38>
    1c1c:	0a 26       	eor	r0, r26
    1c1e:	61 f0       	breq	.+24     	; 0x1c38 <__fp_cmp+0x46>
    1c20:	23 2b       	or	r18, r19
    1c22:	24 2b       	or	r18, r20
    1c24:	25 2b       	or	r18, r21
    1c26:	21 f4       	brne	.+8      	; 0x1c30 <__fp_cmp+0x3e>
    1c28:	08 95       	ret
    1c2a:	0a 26       	eor	r0, r26
    1c2c:	09 f4       	brne	.+2      	; 0x1c30 <__fp_cmp+0x3e>
    1c2e:	a1 40       	sbci	r26, 0x01	; 1
    1c30:	a6 95       	lsr	r26
    1c32:	8f ef       	ldi	r24, 0xFF	; 255
    1c34:	81 1d       	adc	r24, r1
    1c36:	81 1d       	adc	r24, r1
    1c38:	08 95       	ret

00001c3a <__fp_inf>:
    1c3a:	97 f9       	bld	r25, 7
    1c3c:	9f 67       	ori	r25, 0x7F	; 127
    1c3e:	80 e8       	ldi	r24, 0x80	; 128
    1c40:	70 e0       	ldi	r23, 0x00	; 0
    1c42:	60 e0       	ldi	r22, 0x00	; 0
    1c44:	08 95       	ret

00001c46 <__fp_nan>:
    1c46:	9f ef       	ldi	r25, 0xFF	; 255
    1c48:	80 ec       	ldi	r24, 0xC0	; 192
    1c4a:	08 95       	ret

00001c4c <__fp_powser>:
    1c4c:	df 93       	push	r29
    1c4e:	cf 93       	push	r28
    1c50:	1f 93       	push	r17
    1c52:	0f 93       	push	r16
    1c54:	ff 92       	push	r15
    1c56:	ef 92       	push	r14
    1c58:	df 92       	push	r13
    1c5a:	7b 01       	movw	r14, r22
    1c5c:	8c 01       	movw	r16, r24
    1c5e:	68 94       	set
    1c60:	05 c0       	rjmp	.+10     	; 0x1c6c <__fp_powser+0x20>
    1c62:	da 2e       	mov	r13, r26
    1c64:	ef 01       	movw	r28, r30
    1c66:	40 d1       	rcall	.+640    	; 0x1ee8 <__mulsf3x>
    1c68:	fe 01       	movw	r30, r28
    1c6a:	e8 94       	clt
    1c6c:	a5 91       	lpm	r26, Z+
    1c6e:	25 91       	lpm	r18, Z+
    1c70:	35 91       	lpm	r19, Z+
    1c72:	45 91       	lpm	r20, Z+
    1c74:	55 91       	lpm	r21, Z+
    1c76:	ae f3       	brts	.-22     	; 0x1c62 <__fp_powser+0x16>
    1c78:	ef 01       	movw	r28, r30
    1c7a:	fb dd       	rcall	.-1034   	; 0x1872 <__addsf3x>
    1c7c:	fe 01       	movw	r30, r28
    1c7e:	97 01       	movw	r18, r14
    1c80:	a8 01       	movw	r20, r16
    1c82:	da 94       	dec	r13
    1c84:	79 f7       	brne	.-34     	; 0x1c64 <__fp_powser+0x18>
    1c86:	df 90       	pop	r13
    1c88:	ef 90       	pop	r14
    1c8a:	ff 90       	pop	r15
    1c8c:	0f 91       	pop	r16
    1c8e:	1f 91       	pop	r17
    1c90:	cf 91       	pop	r28
    1c92:	df 91       	pop	r29
    1c94:	08 95       	ret

00001c96 <__fp_pscA>:
    1c96:	00 24       	eor	r0, r0
    1c98:	0a 94       	dec	r0
    1c9a:	16 16       	cp	r1, r22
    1c9c:	17 06       	cpc	r1, r23
    1c9e:	18 06       	cpc	r1, r24
    1ca0:	09 06       	cpc	r0, r25
    1ca2:	08 95       	ret

00001ca4 <__fp_pscB>:
    1ca4:	00 24       	eor	r0, r0
    1ca6:	0a 94       	dec	r0
    1ca8:	12 16       	cp	r1, r18
    1caa:	13 06       	cpc	r1, r19
    1cac:	14 06       	cpc	r1, r20
    1cae:	05 06       	cpc	r0, r21
    1cb0:	08 95       	ret

00001cb2 <__fp_round>:
    1cb2:	09 2e       	mov	r0, r25
    1cb4:	03 94       	inc	r0
    1cb6:	00 0c       	add	r0, r0
    1cb8:	11 f4       	brne	.+4      	; 0x1cbe <__fp_round+0xc>
    1cba:	88 23       	and	r24, r24
    1cbc:	52 f0       	brmi	.+20     	; 0x1cd2 <__fp_round+0x20>
    1cbe:	bb 0f       	add	r27, r27
    1cc0:	40 f4       	brcc	.+16     	; 0x1cd2 <__fp_round+0x20>
    1cc2:	bf 2b       	or	r27, r31
    1cc4:	11 f4       	brne	.+4      	; 0x1cca <__fp_round+0x18>
    1cc6:	60 ff       	sbrs	r22, 0
    1cc8:	04 c0       	rjmp	.+8      	; 0x1cd2 <__fp_round+0x20>
    1cca:	6f 5f       	subi	r22, 0xFF	; 255
    1ccc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cce:	8f 4f       	sbci	r24, 0xFF	; 255
    1cd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd2:	08 95       	ret

00001cd4 <__fp_split3>:
    1cd4:	57 fd       	sbrc	r21, 7
    1cd6:	90 58       	subi	r25, 0x80	; 128
    1cd8:	44 0f       	add	r20, r20
    1cda:	55 1f       	adc	r21, r21
    1cdc:	59 f0       	breq	.+22     	; 0x1cf4 <__fp_splitA+0x10>
    1cde:	5f 3f       	cpi	r21, 0xFF	; 255
    1ce0:	71 f0       	breq	.+28     	; 0x1cfe <__fp_splitA+0x1a>
    1ce2:	47 95       	ror	r20

00001ce4 <__fp_splitA>:
    1ce4:	88 0f       	add	r24, r24
    1ce6:	97 fb       	bst	r25, 7
    1ce8:	99 1f       	adc	r25, r25
    1cea:	61 f0       	breq	.+24     	; 0x1d04 <__fp_splitA+0x20>
    1cec:	9f 3f       	cpi	r25, 0xFF	; 255
    1cee:	79 f0       	breq	.+30     	; 0x1d0e <__fp_splitA+0x2a>
    1cf0:	87 95       	ror	r24
    1cf2:	08 95       	ret
    1cf4:	12 16       	cp	r1, r18
    1cf6:	13 06       	cpc	r1, r19
    1cf8:	14 06       	cpc	r1, r20
    1cfa:	55 1f       	adc	r21, r21
    1cfc:	f2 cf       	rjmp	.-28     	; 0x1ce2 <__fp_split3+0xe>
    1cfe:	46 95       	lsr	r20
    1d00:	f1 df       	rcall	.-30     	; 0x1ce4 <__fp_splitA>
    1d02:	08 c0       	rjmp	.+16     	; 0x1d14 <__fp_splitA+0x30>
    1d04:	16 16       	cp	r1, r22
    1d06:	17 06       	cpc	r1, r23
    1d08:	18 06       	cpc	r1, r24
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	f1 cf       	rjmp	.-30     	; 0x1cf0 <__fp_splitA+0xc>
    1d0e:	86 95       	lsr	r24
    1d10:	71 05       	cpc	r23, r1
    1d12:	61 05       	cpc	r22, r1
    1d14:	08 94       	sec
    1d16:	08 95       	ret

00001d18 <__fp_zero>:
    1d18:	e8 94       	clt

00001d1a <__fp_szero>:
    1d1a:	bb 27       	eor	r27, r27
    1d1c:	66 27       	eor	r22, r22
    1d1e:	77 27       	eor	r23, r23
    1d20:	cb 01       	movw	r24, r22
    1d22:	97 f9       	bld	r25, 7
    1d24:	08 95       	ret

00001d26 <__gesf2>:
    1d26:	65 df       	rcall	.-310    	; 0x1bf2 <__fp_cmp>
    1d28:	08 f4       	brcc	.+2      	; 0x1d2c <__gesf2+0x6>
    1d2a:	8f ef       	ldi	r24, 0xFF	; 255
    1d2c:	08 95       	ret
    1d2e:	b3 df       	rcall	.-154    	; 0x1c96 <__fp_pscA>
    1d30:	19 f0       	breq	.+6      	; 0x1d38 <__gesf2+0x12>
    1d32:	b8 df       	rcall	.-144    	; 0x1ca4 <__fp_pscB>
    1d34:	09 f0       	breq	.+2      	; 0x1d38 <__gesf2+0x12>
    1d36:	87 cf       	rjmp	.-242    	; 0x1c46 <__fp_nan>
    1d38:	80 cf       	rjmp	.-256    	; 0x1c3a <__fp_inf>
    1d3a:	b9 01       	movw	r22, r18
    1d3c:	ca 01       	movw	r24, r20
    1d3e:	70 c1       	rjmp	.+736    	; 0x2020 <__fp_mpack>

00001d40 <hypot>:
    1d40:	9f 77       	andi	r25, 0x7F	; 127
    1d42:	5f 77       	andi	r21, 0x7F	; 127
    1d44:	c7 df       	rcall	.-114    	; 0x1cd4 <__fp_split3>
    1d46:	98 f3       	brcs	.-26     	; 0x1d2e <__gesf2+0x8>
    1d48:	99 23       	and	r25, r25
    1d4a:	b9 f3       	breq	.-18     	; 0x1d3a <__gesf2+0x14>
    1d4c:	55 23       	and	r21, r21
    1d4e:	b9 f3       	breq	.-18     	; 0x1d3e <__gesf2+0x18>
    1d50:	ff 27       	eor	r31, r31
    1d52:	95 17       	cp	r25, r21
    1d54:	58 f4       	brcc	.+22     	; 0x1d6c <hypot+0x2c>
    1d56:	e5 2f       	mov	r30, r21
    1d58:	e9 1b       	sub	r30, r25
    1d5a:	ed 30       	cpi	r30, 0x0D	; 13
    1d5c:	70 f7       	brcc	.-36     	; 0x1d3a <__gesf2+0x14>
    1d5e:	5e 3b       	cpi	r21, 0xBE	; 190
    1d60:	10 f0       	brcs	.+4      	; 0x1d66 <hypot+0x26>
    1d62:	f1 e4       	ldi	r31, 0x41	; 65
    1d64:	1c c0       	rjmp	.+56     	; 0x1d9e <hypot+0x5e>
    1d66:	90 34       	cpi	r25, 0x40	; 64
    1d68:	e0 f4       	brcc	.+56     	; 0x1da2 <hypot+0x62>
    1d6a:	0a c0       	rjmp	.+20     	; 0x1d80 <hypot+0x40>
    1d6c:	e9 2f       	mov	r30, r25
    1d6e:	e5 1b       	sub	r30, r21
    1d70:	ed 30       	cpi	r30, 0x0D	; 13
    1d72:	28 f7       	brcc	.-54     	; 0x1d3e <__gesf2+0x18>
    1d74:	9e 3b       	cpi	r25, 0xBE	; 190
    1d76:	10 f0       	brcs	.+4      	; 0x1d7c <hypot+0x3c>
    1d78:	f1 e4       	ldi	r31, 0x41	; 65
    1d7a:	11 c0       	rjmp	.+34     	; 0x1d9e <hypot+0x5e>
    1d7c:	50 34       	cpi	r21, 0x40	; 64
    1d7e:	88 f4       	brcc	.+34     	; 0x1da2 <hypot+0x62>
    1d80:	f9 ea       	ldi	r31, 0xA9	; 169
    1d82:	88 23       	and	r24, r24
    1d84:	2a f0       	brmi	.+10     	; 0x1d90 <hypot+0x50>
    1d86:	9a 95       	dec	r25
    1d88:	66 0f       	add	r22, r22
    1d8a:	77 1f       	adc	r23, r23
    1d8c:	88 1f       	adc	r24, r24
    1d8e:	da f7       	brpl	.-10     	; 0x1d86 <hypot+0x46>
    1d90:	44 23       	and	r20, r20
    1d92:	2a f0       	brmi	.+10     	; 0x1d9e <hypot+0x5e>
    1d94:	5a 95       	dec	r21
    1d96:	22 0f       	add	r18, r18
    1d98:	33 1f       	adc	r19, r19
    1d9a:	44 1f       	adc	r20, r20
    1d9c:	da f7       	brpl	.-10     	; 0x1d94 <hypot+0x54>
    1d9e:	9f 1b       	sub	r25, r31
    1da0:	5f 1b       	sub	r21, r31
    1da2:	ff 93       	push	r31
    1da4:	1f 93       	push	r17
    1da6:	0f 93       	push	r16
    1da8:	ff 92       	push	r15
    1daa:	ef 92       	push	r14
    1dac:	79 01       	movw	r14, r18
    1dae:	8a 01       	movw	r16, r20
    1db0:	bb 27       	eor	r27, r27
    1db2:	ab 2f       	mov	r26, r27
    1db4:	9b 01       	movw	r18, r22
    1db6:	ac 01       	movw	r20, r24
    1db8:	99 d0       	rcall	.+306    	; 0x1eec <__mulsf3_pse>
    1dba:	97 01       	movw	r18, r14
    1dbc:	a8 01       	movw	r20, r16
    1dbe:	bf 93       	push	r27
    1dc0:	7b 01       	movw	r14, r22
    1dc2:	8c 01       	movw	r16, r24
    1dc4:	aa 27       	eor	r26, r26
    1dc6:	ba 2f       	mov	r27, r26
    1dc8:	b9 01       	movw	r22, r18
    1dca:	ca 01       	movw	r24, r20
    1dcc:	8f d0       	rcall	.+286    	; 0x1eec <__mulsf3_pse>
    1dce:	af 91       	pop	r26
    1dd0:	97 01       	movw	r18, r14
    1dd2:	a8 01       	movw	r20, r16
    1dd4:	ef 90       	pop	r14
    1dd6:	ff 90       	pop	r15
    1dd8:	0f 91       	pop	r16
    1dda:	1f 91       	pop	r17
    1ddc:	4a dd       	rcall	.-1388   	; 0x1872 <__addsf3x>
    1dde:	69 df       	rcall	.-302    	; 0x1cb2 <__fp_round>
    1de0:	de d0       	rcall	.+444    	; 0x1f9e <sqrt>
    1de2:	4f 91       	pop	r20
    1de4:	40 ff       	sbrs	r20, 0
    1de6:	08 95       	ret
    1de8:	55 27       	eor	r21, r21
    1dea:	47 fd       	sbrc	r20, 7
    1dec:	50 95       	com	r21
    1dee:	09 c0       	rjmp	.+18     	; 0x1e02 <ldexp>

00001df0 <inverse>:
    1df0:	9b 01       	movw	r18, r22
    1df2:	ac 01       	movw	r20, r24
    1df4:	60 e0       	ldi	r22, 0x00	; 0
    1df6:	70 e0       	ldi	r23, 0x00	; 0
    1df8:	80 e8       	ldi	r24, 0x80	; 128
    1dfa:	9f e3       	ldi	r25, 0x3F	; 63
    1dfc:	f3 cd       	rjmp	.-1050   	; 0x19e4 <__divsf3>
    1dfe:	1d cf       	rjmp	.-454    	; 0x1c3a <__fp_inf>
    1e00:	0f c1       	rjmp	.+542    	; 0x2020 <__fp_mpack>

00001e02 <ldexp>:
    1e02:	70 df       	rcall	.-288    	; 0x1ce4 <__fp_splitA>
    1e04:	e8 f3       	brcs	.-6      	; 0x1e00 <inverse+0x10>
    1e06:	99 23       	and	r25, r25
    1e08:	d9 f3       	breq	.-10     	; 0x1e00 <inverse+0x10>
    1e0a:	94 0f       	add	r25, r20
    1e0c:	51 1d       	adc	r21, r1
    1e0e:	bb f3       	brvs	.-18     	; 0x1dfe <inverse+0xe>
    1e10:	91 50       	subi	r25, 0x01	; 1
    1e12:	50 40       	sbci	r21, 0x00	; 0
    1e14:	94 f0       	brlt	.+36     	; 0x1e3a <ldexp+0x38>
    1e16:	59 f0       	breq	.+22     	; 0x1e2e <ldexp+0x2c>
    1e18:	88 23       	and	r24, r24
    1e1a:	32 f0       	brmi	.+12     	; 0x1e28 <ldexp+0x26>
    1e1c:	66 0f       	add	r22, r22
    1e1e:	77 1f       	adc	r23, r23
    1e20:	88 1f       	adc	r24, r24
    1e22:	91 50       	subi	r25, 0x01	; 1
    1e24:	50 40       	sbci	r21, 0x00	; 0
    1e26:	c1 f7       	brne	.-16     	; 0x1e18 <ldexp+0x16>
    1e28:	9e 3f       	cpi	r25, 0xFE	; 254
    1e2a:	51 05       	cpc	r21, r1
    1e2c:	44 f7       	brge	.-48     	; 0x1dfe <inverse+0xe>
    1e2e:	88 0f       	add	r24, r24
    1e30:	91 1d       	adc	r25, r1
    1e32:	96 95       	lsr	r25
    1e34:	87 95       	ror	r24
    1e36:	97 f9       	bld	r25, 7
    1e38:	08 95       	ret
    1e3a:	5f 3f       	cpi	r21, 0xFF	; 255
    1e3c:	ac f0       	brlt	.+42     	; 0x1e68 <ldexp+0x66>
    1e3e:	98 3e       	cpi	r25, 0xE8	; 232
    1e40:	9c f0       	brlt	.+38     	; 0x1e68 <ldexp+0x66>
    1e42:	bb 27       	eor	r27, r27
    1e44:	86 95       	lsr	r24
    1e46:	77 95       	ror	r23
    1e48:	67 95       	ror	r22
    1e4a:	b7 95       	ror	r27
    1e4c:	08 f4       	brcc	.+2      	; 0x1e50 <ldexp+0x4e>
    1e4e:	b1 60       	ori	r27, 0x01	; 1
    1e50:	93 95       	inc	r25
    1e52:	c1 f7       	brne	.-16     	; 0x1e44 <ldexp+0x42>
    1e54:	bb 0f       	add	r27, r27
    1e56:	58 f7       	brcc	.-42     	; 0x1e2e <ldexp+0x2c>
    1e58:	11 f4       	brne	.+4      	; 0x1e5e <ldexp+0x5c>
    1e5a:	60 ff       	sbrs	r22, 0
    1e5c:	e8 cf       	rjmp	.-48     	; 0x1e2e <ldexp+0x2c>
    1e5e:	6f 5f       	subi	r22, 0xFF	; 255
    1e60:	7f 4f       	sbci	r23, 0xFF	; 255
    1e62:	8f 4f       	sbci	r24, 0xFF	; 255
    1e64:	9f 4f       	sbci	r25, 0xFF	; 255
    1e66:	e3 cf       	rjmp	.-58     	; 0x1e2e <ldexp+0x2c>
    1e68:	58 cf       	rjmp	.-336    	; 0x1d1a <__fp_szero>

00001e6a <modf>:
    1e6a:	fa 01       	movw	r30, r20
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	aa 0f       	add	r26, r26
    1e70:	bb 1f       	adc	r27, r27
    1e72:	9b 01       	movw	r18, r22
    1e74:	ac 01       	movw	r20, r24
    1e76:	bf 57       	subi	r27, 0x7F	; 127
    1e78:	28 f4       	brcc	.+10     	; 0x1e84 <modf+0x1a>
    1e7a:	22 27       	eor	r18, r18
    1e7c:	33 27       	eor	r19, r19
    1e7e:	44 27       	eor	r20, r20
    1e80:	50 78       	andi	r21, 0x80	; 128
    1e82:	1f c0       	rjmp	.+62     	; 0x1ec2 <modf+0x58>
    1e84:	b7 51       	subi	r27, 0x17	; 23
    1e86:	88 f4       	brcc	.+34     	; 0x1eaa <modf+0x40>
    1e88:	ab 2f       	mov	r26, r27
    1e8a:	00 24       	eor	r0, r0
    1e8c:	46 95       	lsr	r20
    1e8e:	37 95       	ror	r19
    1e90:	27 95       	ror	r18
    1e92:	01 1c       	adc	r0, r1
    1e94:	a3 95       	inc	r26
    1e96:	d2 f3       	brmi	.-12     	; 0x1e8c <modf+0x22>
    1e98:	00 20       	and	r0, r0
    1e9a:	69 f0       	breq	.+26     	; 0x1eb6 <modf+0x4c>
    1e9c:	22 0f       	add	r18, r18
    1e9e:	33 1f       	adc	r19, r19
    1ea0:	44 1f       	adc	r20, r20
    1ea2:	b3 95       	inc	r27
    1ea4:	da f3       	brmi	.-10     	; 0x1e9c <modf+0x32>
    1ea6:	0d d0       	rcall	.+26     	; 0x1ec2 <modf+0x58>
    1ea8:	d2 cc       	rjmp	.-1628   	; 0x184e <__subsf3>
    1eaa:	61 30       	cpi	r22, 0x01	; 1
    1eac:	71 05       	cpc	r23, r1
    1eae:	a0 e8       	ldi	r26, 0x80	; 128
    1eb0:	8a 07       	cpc	r24, r26
    1eb2:	b9 46       	sbci	r27, 0x69	; 105
    1eb4:	30 f4       	brcc	.+12     	; 0x1ec2 <modf+0x58>
    1eb6:	9b 01       	movw	r18, r22
    1eb8:	ac 01       	movw	r20, r24
    1eba:	66 27       	eor	r22, r22
    1ebc:	77 27       	eor	r23, r23
    1ebe:	88 27       	eor	r24, r24
    1ec0:	90 78       	andi	r25, 0x80	; 128
    1ec2:	30 96       	adiw	r30, 0x00	; 0
    1ec4:	21 f0       	breq	.+8      	; 0x1ece <modf+0x64>
    1ec6:	20 83       	st	Z, r18
    1ec8:	31 83       	std	Z+1, r19	; 0x01
    1eca:	42 83       	std	Z+2, r20	; 0x02
    1ecc:	53 83       	std	Z+3, r21	; 0x03
    1ece:	08 95       	ret

00001ed0 <__mulsf3>:
    1ed0:	0b d0       	rcall	.+22     	; 0x1ee8 <__mulsf3x>
    1ed2:	ef ce       	rjmp	.-546    	; 0x1cb2 <__fp_round>
    1ed4:	e0 de       	rcall	.-576    	; 0x1c96 <__fp_pscA>
    1ed6:	28 f0       	brcs	.+10     	; 0x1ee2 <__mulsf3+0x12>
    1ed8:	e5 de       	rcall	.-566    	; 0x1ca4 <__fp_pscB>
    1eda:	18 f0       	brcs	.+6      	; 0x1ee2 <__mulsf3+0x12>
    1edc:	95 23       	and	r25, r21
    1ede:	09 f0       	breq	.+2      	; 0x1ee2 <__mulsf3+0x12>
    1ee0:	ac ce       	rjmp	.-680    	; 0x1c3a <__fp_inf>
    1ee2:	b1 ce       	rjmp	.-670    	; 0x1c46 <__fp_nan>
    1ee4:	11 24       	eor	r1, r1
    1ee6:	19 cf       	rjmp	.-462    	; 0x1d1a <__fp_szero>

00001ee8 <__mulsf3x>:
    1ee8:	f5 de       	rcall	.-534    	; 0x1cd4 <__fp_split3>
    1eea:	a0 f3       	brcs	.-24     	; 0x1ed4 <__mulsf3+0x4>

00001eec <__mulsf3_pse>:
    1eec:	95 9f       	mul	r25, r21
    1eee:	d1 f3       	breq	.-12     	; 0x1ee4 <__mulsf3+0x14>
    1ef0:	95 0f       	add	r25, r21
    1ef2:	50 e0       	ldi	r21, 0x00	; 0
    1ef4:	55 1f       	adc	r21, r21
    1ef6:	62 9f       	mul	r22, r18
    1ef8:	f0 01       	movw	r30, r0
    1efa:	72 9f       	mul	r23, r18
    1efc:	bb 27       	eor	r27, r27
    1efe:	f0 0d       	add	r31, r0
    1f00:	b1 1d       	adc	r27, r1
    1f02:	63 9f       	mul	r22, r19
    1f04:	aa 27       	eor	r26, r26
    1f06:	f0 0d       	add	r31, r0
    1f08:	b1 1d       	adc	r27, r1
    1f0a:	aa 1f       	adc	r26, r26
    1f0c:	64 9f       	mul	r22, r20
    1f0e:	66 27       	eor	r22, r22
    1f10:	b0 0d       	add	r27, r0
    1f12:	a1 1d       	adc	r26, r1
    1f14:	66 1f       	adc	r22, r22
    1f16:	82 9f       	mul	r24, r18
    1f18:	22 27       	eor	r18, r18
    1f1a:	b0 0d       	add	r27, r0
    1f1c:	a1 1d       	adc	r26, r1
    1f1e:	62 1f       	adc	r22, r18
    1f20:	73 9f       	mul	r23, r19
    1f22:	b0 0d       	add	r27, r0
    1f24:	a1 1d       	adc	r26, r1
    1f26:	62 1f       	adc	r22, r18
    1f28:	83 9f       	mul	r24, r19
    1f2a:	a0 0d       	add	r26, r0
    1f2c:	61 1d       	adc	r22, r1
    1f2e:	22 1f       	adc	r18, r18
    1f30:	74 9f       	mul	r23, r20
    1f32:	33 27       	eor	r19, r19
    1f34:	a0 0d       	add	r26, r0
    1f36:	61 1d       	adc	r22, r1
    1f38:	23 1f       	adc	r18, r19
    1f3a:	84 9f       	mul	r24, r20
    1f3c:	60 0d       	add	r22, r0
    1f3e:	21 1d       	adc	r18, r1
    1f40:	82 2f       	mov	r24, r18
    1f42:	76 2f       	mov	r23, r22
    1f44:	6a 2f       	mov	r22, r26
    1f46:	11 24       	eor	r1, r1
    1f48:	9f 57       	subi	r25, 0x7F	; 127
    1f4a:	50 40       	sbci	r21, 0x00	; 0
    1f4c:	8a f0       	brmi	.+34     	; 0x1f70 <__mulsf3_pse+0x84>
    1f4e:	e1 f0       	breq	.+56     	; 0x1f88 <__mulsf3_pse+0x9c>
    1f50:	88 23       	and	r24, r24
    1f52:	4a f0       	brmi	.+18     	; 0x1f66 <__mulsf3_pse+0x7a>
    1f54:	ee 0f       	add	r30, r30
    1f56:	ff 1f       	adc	r31, r31
    1f58:	bb 1f       	adc	r27, r27
    1f5a:	66 1f       	adc	r22, r22
    1f5c:	77 1f       	adc	r23, r23
    1f5e:	88 1f       	adc	r24, r24
    1f60:	91 50       	subi	r25, 0x01	; 1
    1f62:	50 40       	sbci	r21, 0x00	; 0
    1f64:	a9 f7       	brne	.-22     	; 0x1f50 <__mulsf3_pse+0x64>
    1f66:	9e 3f       	cpi	r25, 0xFE	; 254
    1f68:	51 05       	cpc	r21, r1
    1f6a:	70 f0       	brcs	.+28     	; 0x1f88 <__mulsf3_pse+0x9c>
    1f6c:	66 ce       	rjmp	.-820    	; 0x1c3a <__fp_inf>
    1f6e:	d5 ce       	rjmp	.-598    	; 0x1d1a <__fp_szero>
    1f70:	5f 3f       	cpi	r21, 0xFF	; 255
    1f72:	ec f3       	brlt	.-6      	; 0x1f6e <__mulsf3_pse+0x82>
    1f74:	98 3e       	cpi	r25, 0xE8	; 232
    1f76:	dc f3       	brlt	.-10     	; 0x1f6e <__mulsf3_pse+0x82>
    1f78:	86 95       	lsr	r24
    1f7a:	77 95       	ror	r23
    1f7c:	67 95       	ror	r22
    1f7e:	b7 95       	ror	r27
    1f80:	f7 95       	ror	r31
    1f82:	e7 95       	ror	r30
    1f84:	9f 5f       	subi	r25, 0xFF	; 255
    1f86:	c1 f7       	brne	.-16     	; 0x1f78 <__mulsf3_pse+0x8c>
    1f88:	fe 2b       	or	r31, r30
    1f8a:	88 0f       	add	r24, r24
    1f8c:	91 1d       	adc	r25, r1
    1f8e:	96 95       	lsr	r25
    1f90:	87 95       	ror	r24
    1f92:	97 f9       	bld	r25, 7
    1f94:	08 95       	ret
    1f96:	11 f4       	brne	.+4      	; 0x1f9c <__mulsf3_pse+0xb0>
    1f98:	0e f4       	brtc	.+2      	; 0x1f9c <__mulsf3_pse+0xb0>
    1f9a:	55 ce       	rjmp	.-854    	; 0x1c46 <__fp_nan>
    1f9c:	41 c0       	rjmp	.+130    	; 0x2020 <__fp_mpack>

00001f9e <sqrt>:
    1f9e:	a2 de       	rcall	.-700    	; 0x1ce4 <__fp_splitA>
    1fa0:	d0 f3       	brcs	.-12     	; 0x1f96 <__mulsf3_pse+0xaa>
    1fa2:	99 23       	and	r25, r25
    1fa4:	d9 f3       	breq	.-10     	; 0x1f9c <__mulsf3_pse+0xb0>
    1fa6:	ce f3       	brts	.-14     	; 0x1f9a <__mulsf3_pse+0xae>
    1fa8:	9f 57       	subi	r25, 0x7F	; 127
    1faa:	55 0b       	sbc	r21, r21
    1fac:	87 ff       	sbrs	r24, 7
    1fae:	46 d0       	rcall	.+140    	; 0x203c <__fp_norm2>
    1fb0:	00 24       	eor	r0, r0
    1fb2:	a0 e6       	ldi	r26, 0x60	; 96
    1fb4:	40 ea       	ldi	r20, 0xA0	; 160
    1fb6:	90 01       	movw	r18, r0
    1fb8:	80 58       	subi	r24, 0x80	; 128
    1fba:	56 95       	lsr	r21
    1fbc:	97 95       	ror	r25
    1fbe:	28 f4       	brcc	.+10     	; 0x1fca <sqrt+0x2c>
    1fc0:	80 5c       	subi	r24, 0xC0	; 192
    1fc2:	66 0f       	add	r22, r22
    1fc4:	77 1f       	adc	r23, r23
    1fc6:	88 1f       	adc	r24, r24
    1fc8:	20 f0       	brcs	.+8      	; 0x1fd2 <sqrt+0x34>
    1fca:	26 17       	cp	r18, r22
    1fcc:	37 07       	cpc	r19, r23
    1fce:	48 07       	cpc	r20, r24
    1fd0:	30 f4       	brcc	.+12     	; 0x1fde <sqrt+0x40>
    1fd2:	62 1b       	sub	r22, r18
    1fd4:	73 0b       	sbc	r23, r19
    1fd6:	84 0b       	sbc	r24, r20
    1fd8:	20 29       	or	r18, r0
    1fda:	31 29       	or	r19, r1
    1fdc:	4a 2b       	or	r20, r26
    1fde:	a6 95       	lsr	r26
    1fe0:	17 94       	ror	r1
    1fe2:	07 94       	ror	r0
    1fe4:	20 25       	eor	r18, r0
    1fe6:	31 25       	eor	r19, r1
    1fe8:	4a 27       	eor	r20, r26
    1fea:	58 f7       	brcc	.-42     	; 0x1fc2 <sqrt+0x24>
    1fec:	66 0f       	add	r22, r22
    1fee:	77 1f       	adc	r23, r23
    1ff0:	88 1f       	adc	r24, r24
    1ff2:	20 f0       	brcs	.+8      	; 0x1ffc <sqrt+0x5e>
    1ff4:	26 17       	cp	r18, r22
    1ff6:	37 07       	cpc	r19, r23
    1ff8:	48 07       	cpc	r20, r24
    1ffa:	30 f4       	brcc	.+12     	; 0x2008 <sqrt+0x6a>
    1ffc:	62 0b       	sbc	r22, r18
    1ffe:	73 0b       	sbc	r23, r19
    2000:	84 0b       	sbc	r24, r20
    2002:	20 0d       	add	r18, r0
    2004:	31 1d       	adc	r19, r1
    2006:	41 1d       	adc	r20, r1
    2008:	a0 95       	com	r26
    200a:	81 f7       	brne	.-32     	; 0x1fec <sqrt+0x4e>
    200c:	b9 01       	movw	r22, r18
    200e:	84 2f       	mov	r24, r20
    2010:	91 58       	subi	r25, 0x81	; 129
    2012:	88 0f       	add	r24, r24
    2014:	96 95       	lsr	r25
    2016:	87 95       	ror	r24
    2018:	08 95       	ret

0000201a <square>:
    201a:	9b 01       	movw	r18, r22
    201c:	ac 01       	movw	r20, r24
    201e:	58 cf       	rjmp	.-336    	; 0x1ed0 <__mulsf3>

00002020 <__fp_mpack>:
    2020:	9f 3f       	cpi	r25, 0xFF	; 255
    2022:	31 f0       	breq	.+12     	; 0x2030 <__fp_mpack_finite+0xc>

00002024 <__fp_mpack_finite>:
    2024:	91 50       	subi	r25, 0x01	; 1
    2026:	20 f4       	brcc	.+8      	; 0x2030 <__fp_mpack_finite+0xc>
    2028:	87 95       	ror	r24
    202a:	77 95       	ror	r23
    202c:	67 95       	ror	r22
    202e:	b7 95       	ror	r27
    2030:	88 0f       	add	r24, r24
    2032:	91 1d       	adc	r25, r1
    2034:	96 95       	lsr	r25
    2036:	87 95       	ror	r24
    2038:	97 f9       	bld	r25, 7
    203a:	08 95       	ret

0000203c <__fp_norm2>:
    203c:	91 50       	subi	r25, 0x01	; 1
    203e:	50 40       	sbci	r21, 0x00	; 0
    2040:	66 0f       	add	r22, r22
    2042:	77 1f       	adc	r23, r23
    2044:	88 1f       	adc	r24, r24
    2046:	d2 f7       	brpl	.-12     	; 0x203c <__fp_norm2>
    2048:	08 95       	ret

0000204a <__vector_18>:
    204a:	1f 92       	push	r1
    204c:	0f 92       	push	r0
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	0f 92       	push	r0
    2052:	11 24       	eor	r1, r1
    2054:	2f 93       	push	r18
    2056:	3f 93       	push	r19
    2058:	4f 93       	push	r20
    205a:	8f 93       	push	r24
    205c:	9f 93       	push	r25
    205e:	ef 93       	push	r30
    2060:	ff 93       	push	r31
    2062:	80 91 c0 00 	lds	r24, 0x00C0
    2066:	82 fd       	sbrc	r24, 2
    2068:	1d c0       	rjmp	.+58     	; 0x20a4 <__vector_18+0x5a>
    206a:	40 91 c6 00 	lds	r20, 0x00C6
    206e:	20 91 15 03 	lds	r18, 0x0315
    2072:	30 91 16 03 	lds	r19, 0x0316
    2076:	2f 5f       	subi	r18, 0xFF	; 255
    2078:	3f 4f       	sbci	r19, 0xFF	; 255
    207a:	2f 73       	andi	r18, 0x3F	; 63
    207c:	30 70       	andi	r19, 0x00	; 0
    207e:	80 91 17 03 	lds	r24, 0x0317
    2082:	90 91 18 03 	lds	r25, 0x0318
    2086:	28 17       	cp	r18, r24
    2088:	39 07       	cpc	r19, r25
    208a:	71 f0       	breq	.+28     	; 0x20a8 <__vector_18+0x5e>
    208c:	e0 91 15 03 	lds	r30, 0x0315
    2090:	f0 91 16 03 	lds	r31, 0x0316
    2094:	eb 52       	subi	r30, 0x2B	; 43
    2096:	fd 4f       	sbci	r31, 0xFD	; 253
    2098:	40 83       	st	Z, r20
    209a:	30 93 16 03 	sts	0x0316, r19
    209e:	20 93 15 03 	sts	0x0315, r18
    20a2:	02 c0       	rjmp	.+4      	; 0x20a8 <__vector_18+0x5e>
    20a4:	80 91 c6 00 	lds	r24, 0x00C6
    20a8:	ff 91       	pop	r31
    20aa:	ef 91       	pop	r30
    20ac:	9f 91       	pop	r25
    20ae:	8f 91       	pop	r24
    20b0:	4f 91       	pop	r20
    20b2:	3f 91       	pop	r19
    20b4:	2f 91       	pop	r18
    20b6:	0f 90       	pop	r0
    20b8:	0f be       	out	0x3f, r0	; 63
    20ba:	0f 90       	pop	r0
    20bc:	1f 90       	pop	r1
    20be:	18 95       	reti

000020c0 <__vector_19>:
    20c0:	1f 92       	push	r1
    20c2:	0f 92       	push	r0
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	0f 92       	push	r0
    20c8:	11 24       	eor	r1, r1
    20ca:	2f 93       	push	r18
    20cc:	3f 93       	push	r19
    20ce:	8f 93       	push	r24
    20d0:	9f 93       	push	r25
    20d2:	ef 93       	push	r30
    20d4:	ff 93       	push	r31
    20d6:	20 91 59 03 	lds	r18, 0x0359
    20da:	30 91 5a 03 	lds	r19, 0x035A
    20de:	80 91 5b 03 	lds	r24, 0x035B
    20e2:	90 91 5c 03 	lds	r25, 0x035C
    20e6:	28 17       	cp	r18, r24
    20e8:	39 07       	cpc	r19, r25
    20ea:	31 f4       	brne	.+12     	; 0x20f8 <__vector_19+0x38>
    20ec:	80 91 c1 00 	lds	r24, 0x00C1
    20f0:	8f 7d       	andi	r24, 0xDF	; 223
    20f2:	80 93 c1 00 	sts	0x00C1, r24
    20f6:	14 c0       	rjmp	.+40     	; 0x2120 <__vector_19+0x60>
    20f8:	e0 91 5b 03 	lds	r30, 0x035B
    20fc:	f0 91 5c 03 	lds	r31, 0x035C
    2100:	e7 5e       	subi	r30, 0xE7	; 231
    2102:	fc 4f       	sbci	r31, 0xFC	; 252
    2104:	20 81       	ld	r18, Z
    2106:	80 91 5b 03 	lds	r24, 0x035B
    210a:	90 91 5c 03 	lds	r25, 0x035C
    210e:	01 96       	adiw	r24, 0x01	; 1
    2110:	8f 73       	andi	r24, 0x3F	; 63
    2112:	90 70       	andi	r25, 0x00	; 0
    2114:	90 93 5c 03 	sts	0x035C, r25
    2118:	80 93 5b 03 	sts	0x035B, r24
    211c:	20 93 c6 00 	sts	0x00C6, r18
    2120:	ff 91       	pop	r31
    2122:	ef 91       	pop	r30
    2124:	9f 91       	pop	r25
    2126:	8f 91       	pop	r24
    2128:	3f 91       	pop	r19
    212a:	2f 91       	pop	r18
    212c:	0f 90       	pop	r0
    212e:	0f be       	out	0x3f, r0	; 63
    2130:	0f 90       	pop	r0
    2132:	1f 90       	pop	r1
    2134:	18 95       	reti

00002136 <_ZN14HardwareSerial5beginEmh>:
    2136:	af 92       	push	r10
    2138:	bf 92       	push	r11
    213a:	cf 92       	push	r12
    213c:	df 92       	push	r13
    213e:	ef 92       	push	r14
    2140:	ff 92       	push	r15
    2142:	0f 93       	push	r16
    2144:	1f 93       	push	r17
    2146:	cf 93       	push	r28
    2148:	df 93       	push	r29
    214a:	ec 01       	movw	r28, r24
    214c:	7a 01       	movw	r14, r20
    214e:	8b 01       	movw	r16, r22
    2150:	c2 2e       	mov	r12, r18
    2152:	dd 24       	eor	r13, r13
    2154:	40 30       	cpi	r20, 0x00	; 0
    2156:	81 ee       	ldi	r24, 0xE1	; 225
    2158:	58 07       	cpc	r21, r24
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	68 07       	cpc	r22, r24
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	78 07       	cpc	r23, r24
    2162:	11 f0       	breq	.+4      	; 0x2168 <_ZN14HardwareSerial5beginEmh+0x32>
    2164:	dd 24       	eor	r13, r13
    2166:	d3 94       	inc	r13
    2168:	71 e0       	ldi	r23, 0x01	; 1
    216a:	a7 2e       	mov	r10, r23
    216c:	b1 2c       	mov	r11, r1
    216e:	ec 89       	ldd	r30, Y+20	; 0x14
    2170:	fd 89       	ldd	r31, Y+21	; 0x15
    2172:	dd 20       	and	r13, r13
    2174:	69 f0       	breq	.+26     	; 0x2190 <_ZN14HardwareSerial5beginEmh+0x5a>
    2176:	c5 01       	movw	r24, r10
    2178:	08 a0       	ldd	r0, Y+32	; 0x20
    217a:	02 c0       	rjmp	.+4      	; 0x2180 <_ZN14HardwareSerial5beginEmh+0x4a>
    217c:	88 0f       	add	r24, r24
    217e:	99 1f       	adc	r25, r25
    2180:	0a 94       	dec	r0
    2182:	e2 f7       	brpl	.-8      	; 0x217c <_ZN14HardwareSerial5beginEmh+0x46>
    2184:	80 83       	st	Z, r24
    2186:	60 e0       	ldi	r22, 0x00	; 0
    2188:	79 e0       	ldi	r23, 0x09	; 9
    218a:	8d e3       	ldi	r24, 0x3D	; 61
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	05 c0       	rjmp	.+10     	; 0x219a <_ZN14HardwareSerial5beginEmh+0x64>
    2190:	10 82       	st	Z, r1
    2192:	60 e8       	ldi	r22, 0x80	; 128
    2194:	74 e8       	ldi	r23, 0x84	; 132
    2196:	8e e1       	ldi	r24, 0x1E	; 30
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	a8 01       	movw	r20, r16
    219c:	97 01       	movw	r18, r14
    219e:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__udivmodsi4>
    21a2:	21 50       	subi	r18, 0x01	; 1
    21a4:	30 40       	sbci	r19, 0x00	; 0
    21a6:	40 40       	sbci	r20, 0x00	; 0
    21a8:	50 40       	sbci	r21, 0x00	; 0
    21aa:	56 95       	lsr	r21
    21ac:	47 95       	ror	r20
    21ae:	37 95       	ror	r19
    21b0:	27 95       	ror	r18
    21b2:	80 e1       	ldi	r24, 0x10	; 16
    21b4:	20 30       	cpi	r18, 0x00	; 0
    21b6:	38 07       	cpc	r19, r24
    21b8:	20 f0       	brcs	.+8      	; 0x21c2 <_ZN14HardwareSerial5beginEmh+0x8c>
    21ba:	dd 20       	and	r13, r13
    21bc:	11 f0       	breq	.+4      	; 0x21c2 <_ZN14HardwareSerial5beginEmh+0x8c>
    21be:	dd 24       	eor	r13, r13
    21c0:	d6 cf       	rjmp	.-84     	; 0x216e <_ZN14HardwareSerial5beginEmh+0x38>
    21c2:	e8 89       	ldd	r30, Y+16	; 0x10
    21c4:	f9 89       	ldd	r31, Y+17	; 0x11
    21c6:	30 83       	st	Z, r19
    21c8:	ea 89       	ldd	r30, Y+18	; 0x12
    21ca:	fb 89       	ldd	r31, Y+19	; 0x13
    21cc:	20 83       	st	Z, r18
    21ce:	e8 8d       	ldd	r30, Y+24	; 0x18
    21d0:	f9 8d       	ldd	r31, Y+25	; 0x19
    21d2:	c0 82       	st	Z, r12
    21d4:	ee 89       	ldd	r30, Y+22	; 0x16
    21d6:	ff 89       	ldd	r31, Y+23	; 0x17
    21d8:	40 81       	ld	r20, Z
    21da:	21 e0       	ldi	r18, 0x01	; 1
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	c9 01       	movw	r24, r18
    21e0:	0c 8c       	ldd	r0, Y+28	; 0x1c
    21e2:	02 c0       	rjmp	.+4      	; 0x21e8 <_ZN14HardwareSerial5beginEmh+0xb2>
    21e4:	88 0f       	add	r24, r24
    21e6:	99 1f       	adc	r25, r25
    21e8:	0a 94       	dec	r0
    21ea:	e2 f7       	brpl	.-8      	; 0x21e4 <_ZN14HardwareSerial5beginEmh+0xae>
    21ec:	48 2b       	or	r20, r24
    21ee:	40 83       	st	Z, r20
    21f0:	ee 89       	ldd	r30, Y+22	; 0x16
    21f2:	ff 89       	ldd	r31, Y+23	; 0x17
    21f4:	40 81       	ld	r20, Z
    21f6:	c9 01       	movw	r24, r18
    21f8:	0d 8c       	ldd	r0, Y+29	; 0x1d
    21fa:	02 c0       	rjmp	.+4      	; 0x2200 <_ZN14HardwareSerial5beginEmh+0xca>
    21fc:	88 0f       	add	r24, r24
    21fe:	99 1f       	adc	r25, r25
    2200:	0a 94       	dec	r0
    2202:	e2 f7       	brpl	.-8      	; 0x21fc <_ZN14HardwareSerial5beginEmh+0xc6>
    2204:	48 2b       	or	r20, r24
    2206:	40 83       	st	Z, r20
    2208:	ee 89       	ldd	r30, Y+22	; 0x16
    220a:	ff 89       	ldd	r31, Y+23	; 0x17
    220c:	40 81       	ld	r20, Z
    220e:	c9 01       	movw	r24, r18
    2210:	0e 8c       	ldd	r0, Y+30	; 0x1e
    2212:	02 c0       	rjmp	.+4      	; 0x2218 <_ZN14HardwareSerial5beginEmh+0xe2>
    2214:	88 0f       	add	r24, r24
    2216:	99 1f       	adc	r25, r25
    2218:	0a 94       	dec	r0
    221a:	e2 f7       	brpl	.-8      	; 0x2214 <_ZN14HardwareSerial5beginEmh+0xde>
    221c:	48 2b       	or	r20, r24
    221e:	40 83       	st	Z, r20
    2220:	ee 89       	ldd	r30, Y+22	; 0x16
    2222:	ff 89       	ldd	r31, Y+23	; 0x17
    2224:	80 81       	ld	r24, Z
    2226:	0f 8c       	ldd	r0, Y+31	; 0x1f
    2228:	02 c0       	rjmp	.+4      	; 0x222e <_ZN14HardwareSerial5beginEmh+0xf8>
    222a:	22 0f       	add	r18, r18
    222c:	33 1f       	adc	r19, r19
    222e:	0a 94       	dec	r0
    2230:	e2 f7       	brpl	.-8      	; 0x222a <_ZN14HardwareSerial5beginEmh+0xf4>
    2232:	20 95       	com	r18
    2234:	28 23       	and	r18, r24
    2236:	20 83       	st	Z, r18
    2238:	df 91       	pop	r29
    223a:	cf 91       	pop	r28
    223c:	1f 91       	pop	r17
    223e:	0f 91       	pop	r16
    2240:	ff 90       	pop	r15
    2242:	ef 90       	pop	r14
    2244:	df 90       	pop	r13
    2246:	cf 90       	pop	r12
    2248:	bf 90       	pop	r11
    224a:	af 90       	pop	r10
    224c:	08 95       	ret

0000224e <_ZN14HardwareSerial9availableEv>:
    224e:	dc 01       	movw	r26, r24
    2250:	1c 96       	adiw	r26, 0x0c	; 12
    2252:	ed 91       	ld	r30, X+
    2254:	fc 91       	ld	r31, X
    2256:	1d 97       	sbiw	r26, 0x0d	; 13
    2258:	e0 5c       	subi	r30, 0xC0	; 192
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	81 91       	ld	r24, Z+
    225e:	91 91       	ld	r25, Z+
    2260:	20 81       	ld	r18, Z
    2262:	31 81       	ldd	r19, Z+1	; 0x01
    2264:	80 5c       	subi	r24, 0xC0	; 192
    2266:	9f 4f       	sbci	r25, 0xFF	; 255
    2268:	82 1b       	sub	r24, r18
    226a:	93 0b       	sbc	r25, r19
    226c:	60 e4       	ldi	r22, 0x40	; 64
    226e:	70 e0       	ldi	r23, 0x00	; 0
    2270:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <__divmodhi4>
    2274:	08 95       	ret

00002276 <_ZN14HardwareSerial4peekEv>:
    2276:	dc 01       	movw	r26, r24
    2278:	1c 96       	adiw	r26, 0x0c	; 12
    227a:	ed 91       	ld	r30, X+
    227c:	fc 91       	ld	r31, X
    227e:	1d 97       	sbiw	r26, 0x0d	; 13
    2280:	e0 5c       	subi	r30, 0xC0	; 192
    2282:	ff 4f       	sbci	r31, 0xFF	; 255
    2284:	20 81       	ld	r18, Z
    2286:	31 81       	ldd	r19, Z+1	; 0x01
    2288:	e0 54       	subi	r30, 0x40	; 64
    228a:	f0 40       	sbci	r31, 0x00	; 0
    228c:	df 01       	movw	r26, r30
    228e:	ae 5b       	subi	r26, 0xBE	; 190
    2290:	bf 4f       	sbci	r27, 0xFF	; 255
    2292:	8d 91       	ld	r24, X+
    2294:	9c 91       	ld	r25, X
    2296:	11 97       	sbiw	r26, 0x01	; 1
    2298:	28 17       	cp	r18, r24
    229a:	39 07       	cpc	r19, r25
    229c:	19 f4       	brne	.+6      	; 0x22a4 <_ZN14HardwareSerial4peekEv+0x2e>
    229e:	2f ef       	ldi	r18, 0xFF	; 255
    22a0:	3f ef       	ldi	r19, 0xFF	; 255
    22a2:	07 c0       	rjmp	.+14     	; 0x22b2 <_ZN14HardwareSerial4peekEv+0x3c>
    22a4:	8d 91       	ld	r24, X+
    22a6:	9c 91       	ld	r25, X
    22a8:	e8 0f       	add	r30, r24
    22aa:	f9 1f       	adc	r31, r25
    22ac:	80 81       	ld	r24, Z
    22ae:	28 2f       	mov	r18, r24
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	c9 01       	movw	r24, r18
    22b4:	08 95       	ret

000022b6 <_ZN14HardwareSerial4readEv>:
    22b6:	dc 01       	movw	r26, r24
    22b8:	1c 96       	adiw	r26, 0x0c	; 12
    22ba:	ed 91       	ld	r30, X+
    22bc:	fc 91       	ld	r31, X
    22be:	1d 97       	sbiw	r26, 0x0d	; 13
    22c0:	e0 5c       	subi	r30, 0xC0	; 192
    22c2:	ff 4f       	sbci	r31, 0xFF	; 255
    22c4:	20 81       	ld	r18, Z
    22c6:	31 81       	ldd	r19, Z+1	; 0x01
    22c8:	e0 54       	subi	r30, 0x40	; 64
    22ca:	f0 40       	sbci	r31, 0x00	; 0
    22cc:	df 01       	movw	r26, r30
    22ce:	ae 5b       	subi	r26, 0xBE	; 190
    22d0:	bf 4f       	sbci	r27, 0xFF	; 255
    22d2:	8d 91       	ld	r24, X+
    22d4:	9c 91       	ld	r25, X
    22d6:	11 97       	sbiw	r26, 0x01	; 1
    22d8:	28 17       	cp	r18, r24
    22da:	39 07       	cpc	r19, r25
    22dc:	19 f4       	brne	.+6      	; 0x22e4 <_ZN14HardwareSerial4readEv+0x2e>
    22de:	2f ef       	ldi	r18, 0xFF	; 255
    22e0:	3f ef       	ldi	r19, 0xFF	; 255
    22e2:	10 c0       	rjmp	.+32     	; 0x2304 <_ZN14HardwareSerial4readEv+0x4e>
    22e4:	8d 91       	ld	r24, X+
    22e6:	9c 91       	ld	r25, X
    22e8:	11 97       	sbiw	r26, 0x01	; 1
    22ea:	e8 0f       	add	r30, r24
    22ec:	f9 1f       	adc	r31, r25
    22ee:	20 81       	ld	r18, Z
    22f0:	8d 91       	ld	r24, X+
    22f2:	9c 91       	ld	r25, X
    22f4:	11 97       	sbiw	r26, 0x01	; 1
    22f6:	01 96       	adiw	r24, 0x01	; 1
    22f8:	8f 73       	andi	r24, 0x3F	; 63
    22fa:	90 70       	andi	r25, 0x00	; 0
    22fc:	11 96       	adiw	r26, 0x01	; 1
    22fe:	9c 93       	st	X, r25
    2300:	8e 93       	st	-X, r24
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	c9 01       	movw	r24, r18
    2306:	08 95       	ret

00002308 <_ZN14HardwareSerial5flushEv>:
    2308:	dc 01       	movw	r26, r24
    230a:	91 96       	adiw	r26, 0x21	; 33
    230c:	8c 91       	ld	r24, X
    230e:	91 97       	sbiw	r26, 0x21	; 33
    2310:	88 23       	and	r24, r24
    2312:	39 f0       	breq	.+14     	; 0x2322 <_ZN14HardwareSerial5flushEv+0x1a>
    2314:	54 96       	adiw	r26, 0x14	; 20
    2316:	ed 91       	ld	r30, X+
    2318:	fc 91       	ld	r31, X
    231a:	55 97       	sbiw	r26, 0x15	; 21
    231c:	80 81       	ld	r24, Z
    231e:	86 ff       	sbrs	r24, 6
    2320:	f9 cf       	rjmp	.-14     	; 0x2314 <_ZN14HardwareSerial5flushEv+0xc>
    2322:	91 96       	adiw	r26, 0x21	; 33
    2324:	1c 92       	st	X, r1
    2326:	08 95       	ret

00002328 <_ZN14HardwareSerial5writeEh>:
    2328:	cf 93       	push	r28
    232a:	df 93       	push	r29
    232c:	ec 01       	movw	r28, r24
    232e:	ee 85       	ldd	r30, Y+14	; 0x0e
    2330:	ff 85       	ldd	r31, Y+15	; 0x0f
    2332:	e0 5c       	subi	r30, 0xC0	; 192
    2334:	ff 4f       	sbci	r31, 0xFF	; 255
    2336:	20 81       	ld	r18, Z
    2338:	31 81       	ldd	r19, Z+1	; 0x01
    233a:	e0 54       	subi	r30, 0x40	; 64
    233c:	f0 40       	sbci	r31, 0x00	; 0
    233e:	2f 5f       	subi	r18, 0xFF	; 255
    2340:	3f 4f       	sbci	r19, 0xFF	; 255
    2342:	2f 73       	andi	r18, 0x3F	; 63
    2344:	30 70       	andi	r19, 0x00	; 0
    2346:	df 01       	movw	r26, r30
    2348:	ae 5b       	subi	r26, 0xBE	; 190
    234a:	bf 4f       	sbci	r27, 0xFF	; 255
    234c:	8d 91       	ld	r24, X+
    234e:	9c 91       	ld	r25, X
    2350:	11 97       	sbiw	r26, 0x01	; 1
    2352:	28 17       	cp	r18, r24
    2354:	39 07       	cpc	r19, r25
    2356:	d1 f3       	breq	.-12     	; 0x234c <_ZN14HardwareSerial5writeEh+0x24>
    2358:	e0 5c       	subi	r30, 0xC0	; 192
    235a:	ff 4f       	sbci	r31, 0xFF	; 255
    235c:	80 81       	ld	r24, Z
    235e:	91 81       	ldd	r25, Z+1	; 0x01
    2360:	e0 54       	subi	r30, 0x40	; 64
    2362:	f0 40       	sbci	r31, 0x00	; 0
    2364:	e8 0f       	add	r30, r24
    2366:	f9 1f       	adc	r31, r25
    2368:	60 83       	st	Z, r22
    236a:	ee 85       	ldd	r30, Y+14	; 0x0e
    236c:	ff 85       	ldd	r31, Y+15	; 0x0f
    236e:	e0 5c       	subi	r30, 0xC0	; 192
    2370:	ff 4f       	sbci	r31, 0xFF	; 255
    2372:	31 83       	std	Z+1, r19	; 0x01
    2374:	20 83       	st	Z, r18
    2376:	ee 89       	ldd	r30, Y+22	; 0x16
    2378:	ff 89       	ldd	r31, Y+23	; 0x17
    237a:	20 81       	ld	r18, Z
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	0f 8c       	ldd	r0, Y+31	; 0x1f
    2382:	02 c0       	rjmp	.+4      	; 0x2388 <_ZN14HardwareSerial5writeEh+0x60>
    2384:	88 0f       	add	r24, r24
    2386:	99 1f       	adc	r25, r25
    2388:	0a 94       	dec	r0
    238a:	e2 f7       	brpl	.-8      	; 0x2384 <_ZN14HardwareSerial5writeEh+0x5c>
    238c:	28 2b       	or	r18, r24
    238e:	20 83       	st	Z, r18
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	89 a3       	std	Y+33, r24	; 0x21
    2394:	ec 89       	ldd	r30, Y+20	; 0x14
    2396:	fd 89       	ldd	r31, Y+21	; 0x15
    2398:	80 81       	ld	r24, Z
    239a:	80 64       	ori	r24, 0x40	; 64
    239c:	80 83       	st	Z, r24
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	df 91       	pop	r29
    23a4:	cf 91       	pop	r28
    23a6:	08 95       	ret

000023a8 <_GLOBAL__I_rx_buffer>:
    23a8:	10 92 60 03 	sts	0x0360, r1
    23ac:	10 92 5f 03 	sts	0x035F, r1
    23b0:	88 ee       	ldi	r24, 0xE8	; 232
    23b2:	93 e0       	ldi	r25, 0x03	; 3
    23b4:	a0 e0       	ldi	r26, 0x00	; 0
    23b6:	b0 e0       	ldi	r27, 0x00	; 0
    23b8:	80 93 61 03 	sts	0x0361, r24
    23bc:	90 93 62 03 	sts	0x0362, r25
    23c0:	a0 93 63 03 	sts	0x0363, r26
    23c4:	b0 93 64 03 	sts	0x0364, r27
    23c8:	8a e3       	ldi	r24, 0x3A	; 58
    23ca:	92 e0       	ldi	r25, 0x02	; 2
    23cc:	90 93 5e 03 	sts	0x035E, r25
    23d0:	80 93 5d 03 	sts	0x035D, r24
    23d4:	85 ed       	ldi	r24, 0xD5	; 213
    23d6:	92 e0       	ldi	r25, 0x02	; 2
    23d8:	90 93 6a 03 	sts	0x036A, r25
    23dc:	80 93 69 03 	sts	0x0369, r24
    23e0:	89 e1       	ldi	r24, 0x19	; 25
    23e2:	93 e0       	ldi	r25, 0x03	; 3
    23e4:	90 93 6c 03 	sts	0x036C, r25
    23e8:	80 93 6b 03 	sts	0x036B, r24
    23ec:	85 ec       	ldi	r24, 0xC5	; 197
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	90 93 6e 03 	sts	0x036E, r25
    23f4:	80 93 6d 03 	sts	0x036D, r24
    23f8:	84 ec       	ldi	r24, 0xC4	; 196
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	90 93 70 03 	sts	0x0370, r25
    2400:	80 93 6f 03 	sts	0x036F, r24
    2404:	80 ec       	ldi	r24, 0xC0	; 192
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	90 93 72 03 	sts	0x0372, r25
    240c:	80 93 71 03 	sts	0x0371, r24
    2410:	81 ec       	ldi	r24, 0xC1	; 193
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	90 93 74 03 	sts	0x0374, r25
    2418:	80 93 73 03 	sts	0x0373, r24
    241c:	82 ec       	ldi	r24, 0xC2	; 194
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	90 93 76 03 	sts	0x0376, r25
    2424:	80 93 75 03 	sts	0x0375, r24
    2428:	86 ec       	ldi	r24, 0xC6	; 198
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	90 93 78 03 	sts	0x0378, r25
    2430:	80 93 77 03 	sts	0x0377, r24
    2434:	84 e0       	ldi	r24, 0x04	; 4
    2436:	80 93 79 03 	sts	0x0379, r24
    243a:	83 e0       	ldi	r24, 0x03	; 3
    243c:	80 93 7a 03 	sts	0x037A, r24
    2440:	87 e0       	ldi	r24, 0x07	; 7
    2442:	80 93 7b 03 	sts	0x037B, r24
    2446:	85 e0       	ldi	r24, 0x05	; 5
    2448:	80 93 7c 03 	sts	0x037C, r24
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	80 93 7d 03 	sts	0x037D, r24
    2452:	08 95       	ret

00002454 <_ZN5Print5writeEPKhj>:
    2454:	cf 92       	push	r12
    2456:	df 92       	push	r13
    2458:	ef 92       	push	r14
    245a:	ff 92       	push	r15
    245c:	0f 93       	push	r16
    245e:	1f 93       	push	r17
    2460:	cf 93       	push	r28
    2462:	df 93       	push	r29
    2464:	7c 01       	movw	r14, r24
    2466:	6b 01       	movw	r12, r22
    2468:	8a 01       	movw	r16, r20
    246a:	c0 e0       	ldi	r28, 0x00	; 0
    246c:	d0 e0       	ldi	r29, 0x00	; 0
    246e:	0f c0       	rjmp	.+30     	; 0x248e <_ZN5Print5writeEPKhj+0x3a>
    2470:	d6 01       	movw	r26, r12
    2472:	6d 91       	ld	r22, X+
    2474:	6d 01       	movw	r12, r26
    2476:	d7 01       	movw	r26, r14
    2478:	ed 91       	ld	r30, X+
    247a:	fc 91       	ld	r31, X
    247c:	01 90       	ld	r0, Z+
    247e:	f0 81       	ld	r31, Z
    2480:	e0 2d       	mov	r30, r0
    2482:	c7 01       	movw	r24, r14
    2484:	09 95       	icall
    2486:	c8 0f       	add	r28, r24
    2488:	d9 1f       	adc	r29, r25
    248a:	01 50       	subi	r16, 0x01	; 1
    248c:	10 40       	sbci	r17, 0x00	; 0
    248e:	01 15       	cp	r16, r1
    2490:	11 05       	cpc	r17, r1
    2492:	71 f7       	brne	.-36     	; 0x2470 <_ZN5Print5writeEPKhj+0x1c>
    2494:	ce 01       	movw	r24, r28
    2496:	df 91       	pop	r29
    2498:	cf 91       	pop	r28
    249a:	1f 91       	pop	r17
    249c:	0f 91       	pop	r16
    249e:	ff 90       	pop	r15
    24a0:	ef 90       	pop	r14
    24a2:	df 90       	pop	r13
    24a4:	cf 90       	pop	r12
    24a6:	08 95       	ret

000024a8 <_ZN5Print5printEPK19__FlashStringHelper>:
    24a8:	ef 92       	push	r14
    24aa:	ff 92       	push	r15
    24ac:	0f 93       	push	r16
    24ae:	1f 93       	push	r17
    24b0:	cf 93       	push	r28
    24b2:	df 93       	push	r29
    24b4:	7c 01       	movw	r14, r24
    24b6:	8b 01       	movw	r16, r22
    24b8:	c0 e0       	ldi	r28, 0x00	; 0
    24ba:	d0 e0       	ldi	r29, 0x00	; 0
    24bc:	f8 01       	movw	r30, r16
    24be:	0f 5f       	subi	r16, 0xFF	; 255
    24c0:	1f 4f       	sbci	r17, 0xFF	; 255
    24c2:	64 91       	lpm	r22, Z
    24c4:	66 23       	and	r22, r22
    24c6:	59 f0       	breq	.+22     	; 0x24de <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    24c8:	d7 01       	movw	r26, r14
    24ca:	ed 91       	ld	r30, X+
    24cc:	fc 91       	ld	r31, X
    24ce:	01 90       	ld	r0, Z+
    24d0:	f0 81       	ld	r31, Z
    24d2:	e0 2d       	mov	r30, r0
    24d4:	c7 01       	movw	r24, r14
    24d6:	09 95       	icall
    24d8:	c8 0f       	add	r28, r24
    24da:	d9 1f       	adc	r29, r25
    24dc:	ef cf       	rjmp	.-34     	; 0x24bc <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    24de:	ce 01       	movw	r24, r28
    24e0:	df 91       	pop	r29
    24e2:	cf 91       	pop	r28
    24e4:	1f 91       	pop	r17
    24e6:	0f 91       	pop	r16
    24e8:	ff 90       	pop	r15
    24ea:	ef 90       	pop	r14
    24ec:	08 95       	ret

000024ee <_ZN5Print5printERK6String>:
    24ee:	cf 93       	push	r28
    24f0:	df 93       	push	r29
    24f2:	fb 01       	movw	r30, r22
    24f4:	ec 01       	movw	r28, r24
    24f6:	a8 81       	ld	r26, Y
    24f8:	b9 81       	ldd	r27, Y+1	; 0x01
    24fa:	60 81       	ld	r22, Z
    24fc:	71 81       	ldd	r23, Z+1	; 0x01
    24fe:	44 81       	ldd	r20, Z+4	; 0x04
    2500:	55 81       	ldd	r21, Z+5	; 0x05
    2502:	12 96       	adiw	r26, 0x02	; 2
    2504:	ed 91       	ld	r30, X+
    2506:	fc 91       	ld	r31, X
    2508:	13 97       	sbiw	r26, 0x03	; 3
    250a:	09 95       	icall
    250c:	df 91       	pop	r29
    250e:	cf 91       	pop	r28
    2510:	08 95       	ret

00002512 <_ZN5Print7printlnEv>:
    2512:	ef 92       	push	r14
    2514:	ff 92       	push	r15
    2516:	0f 93       	push	r16
    2518:	1f 93       	push	r17
    251a:	8c 01       	movw	r16, r24
    251c:	dc 01       	movw	r26, r24
    251e:	ed 91       	ld	r30, X+
    2520:	fc 91       	ld	r31, X
    2522:	01 90       	ld	r0, Z+
    2524:	f0 81       	ld	r31, Z
    2526:	e0 2d       	mov	r30, r0
    2528:	6d e0       	ldi	r22, 0x0D	; 13
    252a:	09 95       	icall
    252c:	7c 01       	movw	r14, r24
    252e:	d8 01       	movw	r26, r16
    2530:	ed 91       	ld	r30, X+
    2532:	fc 91       	ld	r31, X
    2534:	01 90       	ld	r0, Z+
    2536:	f0 81       	ld	r31, Z
    2538:	e0 2d       	mov	r30, r0
    253a:	c8 01       	movw	r24, r16
    253c:	6a e0       	ldi	r22, 0x0A	; 10
    253e:	09 95       	icall
    2540:	9c 01       	movw	r18, r24
    2542:	2e 0d       	add	r18, r14
    2544:	3f 1d       	adc	r19, r15
    2546:	c9 01       	movw	r24, r18
    2548:	1f 91       	pop	r17
    254a:	0f 91       	pop	r16
    254c:	ff 90       	pop	r15
    254e:	ef 90       	pop	r14
    2550:	08 95       	ret

00002552 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    2552:	ef 92       	push	r14
    2554:	ff 92       	push	r15
    2556:	0f 93       	push	r16
    2558:	1f 93       	push	r17
    255a:	7c 01       	movw	r14, r24
    255c:	0e 94 54 12 	call	0x24a8	; 0x24a8 <_ZN5Print5printEPK19__FlashStringHelper>
    2560:	8c 01       	movw	r16, r24
    2562:	c7 01       	movw	r24, r14
    2564:	0e 94 89 12 	call	0x2512	; 0x2512 <_ZN5Print7printlnEv>
    2568:	9c 01       	movw	r18, r24
    256a:	20 0f       	add	r18, r16
    256c:	31 1f       	adc	r19, r17
    256e:	c9 01       	movw	r24, r18
    2570:	1f 91       	pop	r17
    2572:	0f 91       	pop	r16
    2574:	ff 90       	pop	r15
    2576:	ef 90       	pop	r14
    2578:	08 95       	ret

0000257a <_ZN5Print7printlnERK6String>:
    257a:	ef 92       	push	r14
    257c:	ff 92       	push	r15
    257e:	0f 93       	push	r16
    2580:	1f 93       	push	r17
    2582:	7c 01       	movw	r14, r24
    2584:	0e 94 77 12 	call	0x24ee	; 0x24ee <_ZN5Print5printERK6String>
    2588:	8c 01       	movw	r16, r24
    258a:	c7 01       	movw	r24, r14
    258c:	0e 94 89 12 	call	0x2512	; 0x2512 <_ZN5Print7printlnEv>
    2590:	9c 01       	movw	r18, r24
    2592:	20 0f       	add	r18, r16
    2594:	31 1f       	adc	r19, r17
    2596:	c9 01       	movw	r24, r18
    2598:	1f 91       	pop	r17
    259a:	0f 91       	pop	r16
    259c:	ff 90       	pop	r15
    259e:	ef 90       	pop	r14
    25a0:	08 95       	ret

000025a2 <_ZN5Print5writeEPKc>:
    25a2:	cf 93       	push	r28
    25a4:	df 93       	push	r29
    25a6:	ec 01       	movw	r28, r24
    25a8:	61 15       	cp	r22, r1
    25aa:	71 05       	cpc	r23, r1
    25ac:	19 f4       	brne	.+6      	; 0x25b4 <_ZN5Print5writeEPKc+0x12>
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	0f c0       	rjmp	.+30     	; 0x25d2 <_ZN5Print5writeEPKc+0x30>
    25b4:	db 01       	movw	r26, r22
    25b6:	0d 90       	ld	r0, X+
    25b8:	00 20       	and	r0, r0
    25ba:	e9 f7       	brne	.-6      	; 0x25b6 <_ZN5Print5writeEPKc+0x14>
    25bc:	11 97       	sbiw	r26, 0x01	; 1
    25be:	a6 1b       	sub	r26, r22
    25c0:	b7 0b       	sbc	r27, r23
    25c2:	e8 81       	ld	r30, Y
    25c4:	f9 81       	ldd	r31, Y+1	; 0x01
    25c6:	02 80       	ldd	r0, Z+2	; 0x02
    25c8:	f3 81       	ldd	r31, Z+3	; 0x03
    25ca:	e0 2d       	mov	r30, r0
    25cc:	ad 01       	movw	r20, r26
    25ce:	09 95       	icall
    25d0:	9c 01       	movw	r18, r24
    25d2:	c9 01       	movw	r24, r18
    25d4:	df 91       	pop	r29
    25d6:	cf 91       	pop	r28
    25d8:	08 95       	ret

000025da <_ZN5Print7printlnEPKc>:
    25da:	ef 92       	push	r14
    25dc:	ff 92       	push	r15
    25de:	0f 93       	push	r16
    25e0:	1f 93       	push	r17
    25e2:	7c 01       	movw	r14, r24
    25e4:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <_ZN5Print5writeEPKc>
    25e8:	8c 01       	movw	r16, r24
    25ea:	c7 01       	movw	r24, r14
    25ec:	0e 94 89 12 	call	0x2512	; 0x2512 <_ZN5Print7printlnEv>
    25f0:	08 0f       	add	r16, r24
    25f2:	19 1f       	adc	r17, r25
    25f4:	c8 01       	movw	r24, r16
    25f6:	1f 91       	pop	r17
    25f8:	0f 91       	pop	r16
    25fa:	ff 90       	pop	r15
    25fc:	ef 90       	pop	r14
    25fe:	08 95       	ret

00002600 <_ZN6String12changeBufferEj>:
    2600:	0f 93       	push	r16
    2602:	1f 93       	push	r17
    2604:	cf 93       	push	r28
    2606:	df 93       	push	r29
    2608:	ec 01       	movw	r28, r24
    260a:	8b 01       	movw	r16, r22
    260c:	6f 5f       	subi	r22, 0xFF	; 255
    260e:	7f 4f       	sbci	r23, 0xFF	; 255
    2610:	88 81       	ld	r24, Y
    2612:	99 81       	ldd	r25, Y+1	; 0x01
    2614:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <realloc>
    2618:	00 97       	sbiw	r24, 0x00	; 0
    261a:	11 f4       	brne	.+4      	; 0x2620 <_ZN6String12changeBufferEj+0x20>
    261c:	80 e0       	ldi	r24, 0x00	; 0
    261e:	05 c0       	rjmp	.+10     	; 0x262a <_ZN6String12changeBufferEj+0x2a>
    2620:	99 83       	std	Y+1, r25	; 0x01
    2622:	88 83       	st	Y, r24
    2624:	1b 83       	std	Y+3, r17	; 0x03
    2626:	0a 83       	std	Y+2, r16	; 0x02
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	df 91       	pop	r29
    262c:	cf 91       	pop	r28
    262e:	1f 91       	pop	r17
    2630:	0f 91       	pop	r16
    2632:	08 95       	ret

00002634 <_ZN6String7reserveEj>:
    2634:	cf 93       	push	r28
    2636:	df 93       	push	r29
    2638:	ec 01       	movw	r28, r24
    263a:	88 81       	ld	r24, Y
    263c:	99 81       	ldd	r25, Y+1	; 0x01
    263e:	89 2b       	or	r24, r25
    2640:	29 f0       	breq	.+10     	; 0x264c <_ZN6String7reserveEj+0x18>
    2642:	8a 81       	ldd	r24, Y+2	; 0x02
    2644:	9b 81       	ldd	r25, Y+3	; 0x03
    2646:	86 17       	cp	r24, r22
    2648:	97 07       	cpc	r25, r23
    264a:	60 f4       	brcc	.+24     	; 0x2664 <_ZN6String7reserveEj+0x30>
    264c:	ce 01       	movw	r24, r28
    264e:	0e 94 00 13 	call	0x2600	; 0x2600 <_ZN6String12changeBufferEj>
    2652:	88 23       	and	r24, r24
    2654:	41 f0       	breq	.+16     	; 0x2666 <_ZN6String7reserveEj+0x32>
    2656:	8c 81       	ldd	r24, Y+4	; 0x04
    2658:	9d 81       	ldd	r25, Y+5	; 0x05
    265a:	89 2b       	or	r24, r25
    265c:	19 f4       	brne	.+6      	; 0x2664 <_ZN6String7reserveEj+0x30>
    265e:	e8 81       	ld	r30, Y
    2660:	f9 81       	ldd	r31, Y+1	; 0x01
    2662:	10 82       	st	Z, r1
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	df 91       	pop	r29
    2668:	cf 91       	pop	r28
    266a:	08 95       	ret

0000266c <_ZN6String6concatEPKcj>:
    266c:	ef 92       	push	r14
    266e:	ff 92       	push	r15
    2670:	0f 93       	push	r16
    2672:	1f 93       	push	r17
    2674:	cf 93       	push	r28
    2676:	df 93       	push	r29
    2678:	ec 01       	movw	r28, r24
    267a:	7b 01       	movw	r14, r22
    267c:	6c 81       	ldd	r22, Y+4	; 0x04
    267e:	7d 81       	ldd	r23, Y+5	; 0x05
    2680:	e1 14       	cp	r14, r1
    2682:	f1 04       	cpc	r15, r1
    2684:	c1 f0       	breq	.+48     	; 0x26b6 <_ZN6String6concatEPKcj+0x4a>
    2686:	41 15       	cp	r20, r1
    2688:	51 05       	cpc	r21, r1
    268a:	99 f0       	breq	.+38     	; 0x26b2 <_ZN6String6concatEPKcj+0x46>
    268c:	8a 01       	movw	r16, r20
    268e:	06 0f       	add	r16, r22
    2690:	17 1f       	adc	r17, r23
    2692:	b8 01       	movw	r22, r16
    2694:	0e 94 1a 13 	call	0x2634	; 0x2634 <_ZN6String7reserveEj>
    2698:	88 23       	and	r24, r24
    269a:	69 f0       	breq	.+26     	; 0x26b6 <_ZN6String6concatEPKcj+0x4a>
    269c:	88 81       	ld	r24, Y
    269e:	99 81       	ldd	r25, Y+1	; 0x01
    26a0:	2c 81       	ldd	r18, Y+4	; 0x04
    26a2:	3d 81       	ldd	r19, Y+5	; 0x05
    26a4:	82 0f       	add	r24, r18
    26a6:	93 1f       	adc	r25, r19
    26a8:	b7 01       	movw	r22, r14
    26aa:	0e 94 ed 16 	call	0x2dda	; 0x2dda <strcpy>
    26ae:	1d 83       	std	Y+5, r17	; 0x05
    26b0:	0c 83       	std	Y+4, r16	; 0x04
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	01 c0       	rjmp	.+2      	; 0x26b8 <_ZN6String6concatEPKcj+0x4c>
    26b6:	80 e0       	ldi	r24, 0x00	; 0
    26b8:	df 91       	pop	r29
    26ba:	cf 91       	pop	r28
    26bc:	1f 91       	pop	r17
    26be:	0f 91       	pop	r16
    26c0:	ff 90       	pop	r15
    26c2:	ef 90       	pop	r14
    26c4:	08 95       	ret

000026c6 <_ZN6String10invalidateEv>:
    26c6:	cf 93       	push	r28
    26c8:	df 93       	push	r29
    26ca:	ec 01       	movw	r28, r24
    26cc:	88 81       	ld	r24, Y
    26ce:	99 81       	ldd	r25, Y+1	; 0x01
    26d0:	00 97       	sbiw	r24, 0x00	; 0
    26d2:	11 f0       	breq	.+4      	; 0x26d8 <_ZN6String10invalidateEv+0x12>
    26d4:	0e 94 db 14 	call	0x29b6	; 0x29b6 <free>
    26d8:	19 82       	std	Y+1, r1	; 0x01
    26da:	18 82       	st	Y, r1
    26dc:	1d 82       	std	Y+5, r1	; 0x05
    26de:	1c 82       	std	Y+4, r1	; 0x04
    26e0:	1b 82       	std	Y+3, r1	; 0x03
    26e2:	1a 82       	std	Y+2, r1	; 0x02
    26e4:	df 91       	pop	r29
    26e6:	cf 91       	pop	r28
    26e8:	08 95       	ret

000026ea <_ZplRK15StringSumHelperPKc>:
    26ea:	0f 93       	push	r16
    26ec:	1f 93       	push	r17
    26ee:	18 2f       	mov	r17, r24
    26f0:	09 2f       	mov	r16, r25
    26f2:	61 15       	cp	r22, r1
    26f4:	71 05       	cpc	r23, r1
    26f6:	61 f0       	breq	.+24     	; 0x2710 <_ZplRK15StringSumHelperPKc+0x26>
    26f8:	db 01       	movw	r26, r22
    26fa:	0d 90       	ld	r0, X+
    26fc:	00 20       	and	r0, r0
    26fe:	e9 f7       	brne	.-6      	; 0x26fa <_ZplRK15StringSumHelperPKc+0x10>
    2700:	11 97       	sbiw	r26, 0x01	; 1
    2702:	a6 1b       	sub	r26, r22
    2704:	b7 0b       	sbc	r27, r23
    2706:	ad 01       	movw	r20, r26
    2708:	0e 94 36 13 	call	0x266c	; 0x266c <_ZN6String6concatEPKcj>
    270c:	88 23       	and	r24, r24
    270e:	21 f4       	brne	.+8      	; 0x2718 <_ZplRK15StringSumHelperPKc+0x2e>
    2710:	81 2f       	mov	r24, r17
    2712:	90 2f       	mov	r25, r16
    2714:	0e 94 63 13 	call	0x26c6	; 0x26c6 <_ZN6String10invalidateEv>
    2718:	81 2f       	mov	r24, r17
    271a:	90 2f       	mov	r25, r16
    271c:	1f 91       	pop	r17
    271e:	0f 91       	pop	r16
    2720:	08 95       	ret

00002722 <_ZplRK15StringSumHelperRK6String>:
    2722:	0f 93       	push	r16
    2724:	1f 93       	push	r17
    2726:	18 2f       	mov	r17, r24
    2728:	09 2f       	mov	r16, r25
    272a:	fb 01       	movw	r30, r22
    272c:	60 81       	ld	r22, Z
    272e:	71 81       	ldd	r23, Z+1	; 0x01
    2730:	44 81       	ldd	r20, Z+4	; 0x04
    2732:	55 81       	ldd	r21, Z+5	; 0x05
    2734:	0e 94 36 13 	call	0x266c	; 0x266c <_ZN6String6concatEPKcj>
    2738:	88 23       	and	r24, r24
    273a:	21 f4       	brne	.+8      	; 0x2744 <_ZplRK15StringSumHelperRK6String+0x22>
    273c:	81 2f       	mov	r24, r17
    273e:	90 2f       	mov	r25, r16
    2740:	0e 94 63 13 	call	0x26c6	; 0x26c6 <_ZN6String10invalidateEv>
    2744:	81 2f       	mov	r24, r17
    2746:	90 2f       	mov	r25, r16
    2748:	1f 91       	pop	r17
    274a:	0f 91       	pop	r16
    274c:	08 95       	ret

0000274e <_ZN6String4copyEPKcj>:
    274e:	ef 92       	push	r14
    2750:	ff 92       	push	r15
    2752:	0f 93       	push	r16
    2754:	1f 93       	push	r17
    2756:	cf 93       	push	r28
    2758:	df 93       	push	r29
    275a:	ec 01       	movw	r28, r24
    275c:	7b 01       	movw	r14, r22
    275e:	8a 01       	movw	r16, r20
    2760:	ba 01       	movw	r22, r20
    2762:	0e 94 1a 13 	call	0x2634	; 0x2634 <_ZN6String7reserveEj>
    2766:	88 23       	and	r24, r24
    2768:	21 f4       	brne	.+8      	; 0x2772 <_ZN6String4copyEPKcj+0x24>
    276a:	ce 01       	movw	r24, r28
    276c:	0e 94 63 13 	call	0x26c6	; 0x26c6 <_ZN6String10invalidateEv>
    2770:	07 c0       	rjmp	.+14     	; 0x2780 <_ZN6String4copyEPKcj+0x32>
    2772:	1d 83       	std	Y+5, r17	; 0x05
    2774:	0c 83       	std	Y+4, r16	; 0x04
    2776:	88 81       	ld	r24, Y
    2778:	99 81       	ldd	r25, Y+1	; 0x01
    277a:	b7 01       	movw	r22, r14
    277c:	0e 94 ed 16 	call	0x2dda	; 0x2dda <strcpy>
    2780:	ce 01       	movw	r24, r28
    2782:	df 91       	pop	r29
    2784:	cf 91       	pop	r28
    2786:	1f 91       	pop	r17
    2788:	0f 91       	pop	r16
    278a:	ff 90       	pop	r15
    278c:	ef 90       	pop	r14
    278e:	08 95       	ret

00002790 <_ZN6StringaSEPKc>:
    2790:	0f 93       	push	r16
    2792:	1f 93       	push	r17
    2794:	18 2f       	mov	r17, r24
    2796:	09 2f       	mov	r16, r25
    2798:	61 15       	cp	r22, r1
    279a:	71 05       	cpc	r23, r1
    279c:	59 f0       	breq	.+22     	; 0x27b4 <_ZN6StringaSEPKc+0x24>
    279e:	db 01       	movw	r26, r22
    27a0:	0d 90       	ld	r0, X+
    27a2:	00 20       	and	r0, r0
    27a4:	e9 f7       	brne	.-6      	; 0x27a0 <_ZN6StringaSEPKc+0x10>
    27a6:	11 97       	sbiw	r26, 0x01	; 1
    27a8:	a6 1b       	sub	r26, r22
    27aa:	b7 0b       	sbc	r27, r23
    27ac:	ad 01       	movw	r20, r26
    27ae:	0e 94 a7 13 	call	0x274e	; 0x274e <_ZN6String4copyEPKcj>
    27b2:	02 c0       	rjmp	.+4      	; 0x27b8 <_ZN6StringaSEPKc+0x28>
    27b4:	0e 94 63 13 	call	0x26c6	; 0x26c6 <_ZN6String10invalidateEv>
    27b8:	81 2f       	mov	r24, r17
    27ba:	90 2f       	mov	r25, r16
    27bc:	1f 91       	pop	r17
    27be:	0f 91       	pop	r16
    27c0:	08 95       	ret

000027c2 <_ZN6StringC1Efh>:
    27c2:	ef 92       	push	r14
    27c4:	ff 92       	push	r15
    27c6:	0f 93       	push	r16
    27c8:	1f 93       	push	r17
    27ca:	df 93       	push	r29
    27cc:	cf 93       	push	r28
    27ce:	cd b7       	in	r28, 0x3d	; 61
    27d0:	de b7       	in	r29, 0x3e	; 62
    27d2:	a1 97       	sbiw	r28, 0x21	; 33
    27d4:	0f b6       	in	r0, 0x3f	; 63
    27d6:	f8 94       	cli
    27d8:	de bf       	out	0x3e, r29	; 62
    27da:	0f be       	out	0x3f, r0	; 63
    27dc:	cd bf       	out	0x3d, r28	; 61
    27de:	7c 01       	movw	r14, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	ba 01       	movw	r22, r20
    27e4:	f7 01       	movw	r30, r14
    27e6:	11 82       	std	Z+1, r1	; 0x01
    27e8:	10 82       	st	Z, r1
    27ea:	13 82       	std	Z+3, r1	; 0x03
    27ec:	12 82       	std	Z+2, r1	; 0x02
    27ee:	15 82       	std	Z+5, r1	; 0x05
    27f0:	14 82       	std	Z+4, r1	; 0x04
    27f2:	42 2f       	mov	r20, r18
    27f4:	4e 5f       	subi	r20, 0xFE	; 254
    27f6:	8e 01       	movw	r16, r28
    27f8:	0f 5f       	subi	r16, 0xFF	; 255
    27fa:	1f 4f       	sbci	r17, 0xFF	; 255
    27fc:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <dtostrf>
    2800:	bc 01       	movw	r22, r24
    2802:	c7 01       	movw	r24, r14
    2804:	0e 94 c8 13 	call	0x2790	; 0x2790 <_ZN6StringaSEPKc>
    2808:	a1 96       	adiw	r28, 0x21	; 33
    280a:	0f b6       	in	r0, 0x3f	; 63
    280c:	f8 94       	cli
    280e:	de bf       	out	0x3e, r29	; 62
    2810:	0f be       	out	0x3f, r0	; 63
    2812:	cd bf       	out	0x3d, r28	; 61
    2814:	cf 91       	pop	r28
    2816:	df 91       	pop	r29
    2818:	1f 91       	pop	r17
    281a:	0f 91       	pop	r16
    281c:	ff 90       	pop	r15
    281e:	ef 90       	pop	r14
    2820:	08 95       	ret

00002822 <_ZN6StringaSERKS_>:
    2822:	cf 93       	push	r28
    2824:	df 93       	push	r29
    2826:	ec 01       	movw	r28, r24
    2828:	fb 01       	movw	r30, r22
    282a:	86 17       	cp	r24, r22
    282c:	97 07       	cpc	r25, r23
    282e:	61 f0       	breq	.+24     	; 0x2848 <_ZN6StringaSERKS_+0x26>
    2830:	60 81       	ld	r22, Z
    2832:	71 81       	ldd	r23, Z+1	; 0x01
    2834:	61 15       	cp	r22, r1
    2836:	71 05       	cpc	r23, r1
    2838:	29 f0       	breq	.+10     	; 0x2844 <_ZN6StringaSERKS_+0x22>
    283a:	44 81       	ldd	r20, Z+4	; 0x04
    283c:	55 81       	ldd	r21, Z+5	; 0x05
    283e:	0e 94 a7 13 	call	0x274e	; 0x274e <_ZN6String4copyEPKcj>
    2842:	02 c0       	rjmp	.+4      	; 0x2848 <_ZN6StringaSERKS_+0x26>
    2844:	0e 94 63 13 	call	0x26c6	; 0x26c6 <_ZN6String10invalidateEv>
    2848:	ce 01       	movw	r24, r28
    284a:	df 91       	pop	r29
    284c:	cf 91       	pop	r28
    284e:	08 95       	ret

00002850 <_ZN6StringC2ERKS_>:
    2850:	fc 01       	movw	r30, r24
    2852:	11 82       	std	Z+1, r1	; 0x01
    2854:	10 82       	st	Z, r1
    2856:	13 82       	std	Z+3, r1	; 0x03
    2858:	12 82       	std	Z+2, r1	; 0x02
    285a:	15 82       	std	Z+5, r1	; 0x05
    285c:	14 82       	std	Z+4, r1	; 0x04
    285e:	0e 94 11 14 	call	0x2822	; 0x2822 <_ZN6StringaSERKS_>
    2862:	08 95       	ret

00002864 <_ZN6StringD1Ev>:
    2864:	fc 01       	movw	r30, r24
    2866:	80 81       	ld	r24, Z
    2868:	91 81       	ldd	r25, Z+1	; 0x01
    286a:	0e 94 db 14 	call	0x29b6	; 0x29b6 <free>
    286e:	08 95       	ret

00002870 <_ZN6StringD2Ev>:
    2870:	fc 01       	movw	r30, r24
    2872:	80 81       	ld	r24, Z
    2874:	91 81       	ldd	r25, Z+1	; 0x01
    2876:	0e 94 db 14 	call	0x29b6	; 0x29b6 <free>
    287a:	08 95       	ret

0000287c <malloc>:
    287c:	0f 93       	push	r16
    287e:	1f 93       	push	r17
    2880:	cf 93       	push	r28
    2882:	df 93       	push	r29
    2884:	bc 01       	movw	r22, r24
    2886:	82 30       	cpi	r24, 0x02	; 2
    2888:	91 05       	cpc	r25, r1
    288a:	10 f4       	brcc	.+4      	; 0x2890 <malloc+0x14>
    288c:	62 e0       	ldi	r22, 0x02	; 2
    288e:	70 e0       	ldi	r23, 0x00	; 0
    2890:	e0 91 8f 03 	lds	r30, 0x038F
    2894:	f0 91 90 03 	lds	r31, 0x0390
    2898:	40 e0       	ldi	r20, 0x00	; 0
    289a:	50 e0       	ldi	r21, 0x00	; 0
    289c:	a0 e0       	ldi	r26, 0x00	; 0
    289e:	b0 e0       	ldi	r27, 0x00	; 0
    28a0:	24 c0       	rjmp	.+72     	; 0x28ea <malloc+0x6e>
    28a2:	80 81       	ld	r24, Z
    28a4:	91 81       	ldd	r25, Z+1	; 0x01
    28a6:	86 17       	cp	r24, r22
    28a8:	97 07       	cpc	r25, r23
    28aa:	d0 f0       	brcs	.+52     	; 0x28e0 <malloc+0x64>
    28ac:	86 17       	cp	r24, r22
    28ae:	97 07       	cpc	r25, r23
    28b0:	71 f4       	brne	.+28     	; 0x28ce <malloc+0x52>
    28b2:	82 81       	ldd	r24, Z+2	; 0x02
    28b4:	93 81       	ldd	r25, Z+3	; 0x03
    28b6:	10 97       	sbiw	r26, 0x00	; 0
    28b8:	29 f0       	breq	.+10     	; 0x28c4 <malloc+0x48>
    28ba:	13 96       	adiw	r26, 0x03	; 3
    28bc:	9c 93       	st	X, r25
    28be:	8e 93       	st	-X, r24
    28c0:	12 97       	sbiw	r26, 0x02	; 2
    28c2:	2c c0       	rjmp	.+88     	; 0x291c <malloc+0xa0>
    28c4:	90 93 90 03 	sts	0x0390, r25
    28c8:	80 93 8f 03 	sts	0x038F, r24
    28cc:	27 c0       	rjmp	.+78     	; 0x291c <malloc+0xa0>
    28ce:	41 15       	cp	r20, r1
    28d0:	51 05       	cpc	r21, r1
    28d2:	19 f0       	breq	.+6      	; 0x28da <malloc+0x5e>
    28d4:	84 17       	cp	r24, r20
    28d6:	95 07       	cpc	r25, r21
    28d8:	18 f4       	brcc	.+6      	; 0x28e0 <malloc+0x64>
    28da:	8d 01       	movw	r16, r26
    28dc:	ac 01       	movw	r20, r24
    28de:	ef 01       	movw	r28, r30
    28e0:	df 01       	movw	r26, r30
    28e2:	82 81       	ldd	r24, Z+2	; 0x02
    28e4:	93 81       	ldd	r25, Z+3	; 0x03
    28e6:	9c 01       	movw	r18, r24
    28e8:	f9 01       	movw	r30, r18
    28ea:	30 97       	sbiw	r30, 0x00	; 0
    28ec:	d1 f6       	brne	.-76     	; 0x28a2 <malloc+0x26>
    28ee:	41 15       	cp	r20, r1
    28f0:	51 05       	cpc	r21, r1
    28f2:	f9 f0       	breq	.+62     	; 0x2932 <malloc+0xb6>
    28f4:	ca 01       	movw	r24, r20
    28f6:	86 1b       	sub	r24, r22
    28f8:	97 0b       	sbc	r25, r23
    28fa:	84 30       	cpi	r24, 0x04	; 4
    28fc:	91 05       	cpc	r25, r1
    28fe:	80 f4       	brcc	.+32     	; 0x2920 <malloc+0xa4>
    2900:	8a 81       	ldd	r24, Y+2	; 0x02
    2902:	9b 81       	ldd	r25, Y+3	; 0x03
    2904:	01 15       	cp	r16, r1
    2906:	11 05       	cpc	r17, r1
    2908:	21 f0       	breq	.+8      	; 0x2912 <malloc+0x96>
    290a:	f8 01       	movw	r30, r16
    290c:	93 83       	std	Z+3, r25	; 0x03
    290e:	82 83       	std	Z+2, r24	; 0x02
    2910:	04 c0       	rjmp	.+8      	; 0x291a <malloc+0x9e>
    2912:	90 93 90 03 	sts	0x0390, r25
    2916:	80 93 8f 03 	sts	0x038F, r24
    291a:	fe 01       	movw	r30, r28
    291c:	32 96       	adiw	r30, 0x02	; 2
    291e:	45 c0       	rjmp	.+138    	; 0x29aa <malloc+0x12e>
    2920:	fe 01       	movw	r30, r28
    2922:	e8 0f       	add	r30, r24
    2924:	f9 1f       	adc	r31, r25
    2926:	61 93       	st	Z+, r22
    2928:	71 93       	st	Z+, r23
    292a:	02 97       	sbiw	r24, 0x02	; 2
    292c:	99 83       	std	Y+1, r25	; 0x01
    292e:	88 83       	st	Y, r24
    2930:	3c c0       	rjmp	.+120    	; 0x29aa <malloc+0x12e>
    2932:	80 91 8d 03 	lds	r24, 0x038D
    2936:	90 91 8e 03 	lds	r25, 0x038E
    293a:	89 2b       	or	r24, r25
    293c:	41 f4       	brne	.+16     	; 0x294e <malloc+0xd2>
    293e:	80 91 04 01 	lds	r24, 0x0104
    2942:	90 91 05 01 	lds	r25, 0x0105
    2946:	90 93 8e 03 	sts	0x038E, r25
    294a:	80 93 8d 03 	sts	0x038D, r24
    294e:	40 91 06 01 	lds	r20, 0x0106
    2952:	50 91 07 01 	lds	r21, 0x0107
    2956:	41 15       	cp	r20, r1
    2958:	51 05       	cpc	r21, r1
    295a:	41 f4       	brne	.+16     	; 0x296c <malloc+0xf0>
    295c:	4d b7       	in	r20, 0x3d	; 61
    295e:	5e b7       	in	r21, 0x3e	; 62
    2960:	80 91 02 01 	lds	r24, 0x0102
    2964:	90 91 03 01 	lds	r25, 0x0103
    2968:	48 1b       	sub	r20, r24
    296a:	59 0b       	sbc	r21, r25
    296c:	20 91 8d 03 	lds	r18, 0x038D
    2970:	30 91 8e 03 	lds	r19, 0x038E
    2974:	24 17       	cp	r18, r20
    2976:	35 07       	cpc	r19, r21
    2978:	b0 f4       	brcc	.+44     	; 0x29a6 <malloc+0x12a>
    297a:	ca 01       	movw	r24, r20
    297c:	82 1b       	sub	r24, r18
    297e:	93 0b       	sbc	r25, r19
    2980:	86 17       	cp	r24, r22
    2982:	97 07       	cpc	r25, r23
    2984:	80 f0       	brcs	.+32     	; 0x29a6 <malloc+0x12a>
    2986:	ab 01       	movw	r20, r22
    2988:	4e 5f       	subi	r20, 0xFE	; 254
    298a:	5f 4f       	sbci	r21, 0xFF	; 255
    298c:	84 17       	cp	r24, r20
    298e:	95 07       	cpc	r25, r21
    2990:	50 f0       	brcs	.+20     	; 0x29a6 <malloc+0x12a>
    2992:	42 0f       	add	r20, r18
    2994:	53 1f       	adc	r21, r19
    2996:	50 93 8e 03 	sts	0x038E, r21
    299a:	40 93 8d 03 	sts	0x038D, r20
    299e:	f9 01       	movw	r30, r18
    29a0:	61 93       	st	Z+, r22
    29a2:	71 93       	st	Z+, r23
    29a4:	02 c0       	rjmp	.+4      	; 0x29aa <malloc+0x12e>
    29a6:	e0 e0       	ldi	r30, 0x00	; 0
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	cf 01       	movw	r24, r30
    29ac:	df 91       	pop	r29
    29ae:	cf 91       	pop	r28
    29b0:	1f 91       	pop	r17
    29b2:	0f 91       	pop	r16
    29b4:	08 95       	ret

000029b6 <free>:
    29b6:	cf 93       	push	r28
    29b8:	df 93       	push	r29
    29ba:	9c 01       	movw	r18, r24
    29bc:	00 97       	sbiw	r24, 0x00	; 0
    29be:	09 f4       	brne	.+2      	; 0x29c2 <free+0xc>
    29c0:	8f c0       	rjmp	.+286    	; 0x2ae0 <free+0x12a>
    29c2:	ec 01       	movw	r28, r24
    29c4:	22 97       	sbiw	r28, 0x02	; 2
    29c6:	1b 82       	std	Y+3, r1	; 0x03
    29c8:	1a 82       	std	Y+2, r1	; 0x02
    29ca:	60 91 8f 03 	lds	r22, 0x038F
    29ce:	70 91 90 03 	lds	r23, 0x0390
    29d2:	61 15       	cp	r22, r1
    29d4:	71 05       	cpc	r23, r1
    29d6:	81 f4       	brne	.+32     	; 0x29f8 <free+0x42>
    29d8:	88 81       	ld	r24, Y
    29da:	99 81       	ldd	r25, Y+1	; 0x01
    29dc:	82 0f       	add	r24, r18
    29de:	93 1f       	adc	r25, r19
    29e0:	20 91 8d 03 	lds	r18, 0x038D
    29e4:	30 91 8e 03 	lds	r19, 0x038E
    29e8:	28 17       	cp	r18, r24
    29ea:	39 07       	cpc	r19, r25
    29ec:	39 f5       	brne	.+78     	; 0x2a3c <free+0x86>
    29ee:	d0 93 8e 03 	sts	0x038E, r29
    29f2:	c0 93 8d 03 	sts	0x038D, r28
    29f6:	74 c0       	rjmp	.+232    	; 0x2ae0 <free+0x12a>
    29f8:	db 01       	movw	r26, r22
    29fa:	40 e0       	ldi	r20, 0x00	; 0
    29fc:	50 e0       	ldi	r21, 0x00	; 0
    29fe:	ac 17       	cp	r26, r28
    2a00:	bd 07       	cpc	r27, r29
    2a02:	08 f1       	brcs	.+66     	; 0x2a46 <free+0x90>
    2a04:	bb 83       	std	Y+3, r27	; 0x03
    2a06:	aa 83       	std	Y+2, r26	; 0x02
    2a08:	fe 01       	movw	r30, r28
    2a0a:	21 91       	ld	r18, Z+
    2a0c:	31 91       	ld	r19, Z+
    2a0e:	e2 0f       	add	r30, r18
    2a10:	f3 1f       	adc	r31, r19
    2a12:	ae 17       	cp	r26, r30
    2a14:	bf 07       	cpc	r27, r31
    2a16:	79 f4       	brne	.+30     	; 0x2a36 <free+0x80>
    2a18:	8d 91       	ld	r24, X+
    2a1a:	9c 91       	ld	r25, X
    2a1c:	11 97       	sbiw	r26, 0x01	; 1
    2a1e:	28 0f       	add	r18, r24
    2a20:	39 1f       	adc	r19, r25
    2a22:	2e 5f       	subi	r18, 0xFE	; 254
    2a24:	3f 4f       	sbci	r19, 0xFF	; 255
    2a26:	39 83       	std	Y+1, r19	; 0x01
    2a28:	28 83       	st	Y, r18
    2a2a:	12 96       	adiw	r26, 0x02	; 2
    2a2c:	8d 91       	ld	r24, X+
    2a2e:	9c 91       	ld	r25, X
    2a30:	13 97       	sbiw	r26, 0x03	; 3
    2a32:	9b 83       	std	Y+3, r25	; 0x03
    2a34:	8a 83       	std	Y+2, r24	; 0x02
    2a36:	41 15       	cp	r20, r1
    2a38:	51 05       	cpc	r21, r1
    2a3a:	71 f4       	brne	.+28     	; 0x2a58 <free+0xa2>
    2a3c:	d0 93 90 03 	sts	0x0390, r29
    2a40:	c0 93 8f 03 	sts	0x038F, r28
    2a44:	4d c0       	rjmp	.+154    	; 0x2ae0 <free+0x12a>
    2a46:	12 96       	adiw	r26, 0x02	; 2
    2a48:	8d 91       	ld	r24, X+
    2a4a:	9c 91       	ld	r25, X
    2a4c:	13 97       	sbiw	r26, 0x03	; 3
    2a4e:	ad 01       	movw	r20, r26
    2a50:	00 97       	sbiw	r24, 0x00	; 0
    2a52:	11 f0       	breq	.+4      	; 0x2a58 <free+0xa2>
    2a54:	dc 01       	movw	r26, r24
    2a56:	d3 cf       	rjmp	.-90     	; 0x29fe <free+0x48>
    2a58:	da 01       	movw	r26, r20
    2a5a:	13 96       	adiw	r26, 0x03	; 3
    2a5c:	dc 93       	st	X, r29
    2a5e:	ce 93       	st	-X, r28
    2a60:	12 97       	sbiw	r26, 0x02	; 2
    2a62:	fa 01       	movw	r30, r20
    2a64:	21 91       	ld	r18, Z+
    2a66:	31 91       	ld	r19, Z+
    2a68:	e2 0f       	add	r30, r18
    2a6a:	f3 1f       	adc	r31, r19
    2a6c:	ce 17       	cp	r28, r30
    2a6e:	df 07       	cpc	r29, r31
    2a70:	69 f4       	brne	.+26     	; 0x2a8c <free+0xd6>
    2a72:	88 81       	ld	r24, Y
    2a74:	99 81       	ldd	r25, Y+1	; 0x01
    2a76:	28 0f       	add	r18, r24
    2a78:	39 1f       	adc	r19, r25
    2a7a:	2e 5f       	subi	r18, 0xFE	; 254
    2a7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a7e:	fa 01       	movw	r30, r20
    2a80:	31 83       	std	Z+1, r19	; 0x01
    2a82:	20 83       	st	Z, r18
    2a84:	8a 81       	ldd	r24, Y+2	; 0x02
    2a86:	9b 81       	ldd	r25, Y+3	; 0x03
    2a88:	93 83       	std	Z+3, r25	; 0x03
    2a8a:	82 83       	std	Z+2, r24	; 0x02
    2a8c:	e0 e0       	ldi	r30, 0x00	; 0
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	db 01       	movw	r26, r22
    2a92:	12 96       	adiw	r26, 0x02	; 2
    2a94:	8d 91       	ld	r24, X+
    2a96:	9c 91       	ld	r25, X
    2a98:	13 97       	sbiw	r26, 0x03	; 3
    2a9a:	00 97       	sbiw	r24, 0x00	; 0
    2a9c:	19 f0       	breq	.+6      	; 0x2aa4 <free+0xee>
    2a9e:	bc 01       	movw	r22, r24
    2aa0:	fd 01       	movw	r30, r26
    2aa2:	f6 cf       	rjmp	.-20     	; 0x2a90 <free+0xda>
    2aa4:	ab 01       	movw	r20, r22
    2aa6:	4e 5f       	subi	r20, 0xFE	; 254
    2aa8:	5f 4f       	sbci	r21, 0xFF	; 255
    2aaa:	db 01       	movw	r26, r22
    2aac:	8d 91       	ld	r24, X+
    2aae:	9c 91       	ld	r25, X
    2ab0:	84 0f       	add	r24, r20
    2ab2:	95 1f       	adc	r25, r21
    2ab4:	20 91 8d 03 	lds	r18, 0x038D
    2ab8:	30 91 8e 03 	lds	r19, 0x038E
    2abc:	28 17       	cp	r18, r24
    2abe:	39 07       	cpc	r19, r25
    2ac0:	79 f4       	brne	.+30     	; 0x2ae0 <free+0x12a>
    2ac2:	30 97       	sbiw	r30, 0x00	; 0
    2ac4:	29 f4       	brne	.+10     	; 0x2ad0 <free+0x11a>
    2ac6:	10 92 90 03 	sts	0x0390, r1
    2aca:	10 92 8f 03 	sts	0x038F, r1
    2ace:	02 c0       	rjmp	.+4      	; 0x2ad4 <free+0x11e>
    2ad0:	13 82       	std	Z+3, r1	; 0x03
    2ad2:	12 82       	std	Z+2, r1	; 0x02
    2ad4:	42 50       	subi	r20, 0x02	; 2
    2ad6:	50 40       	sbci	r21, 0x00	; 0
    2ad8:	50 93 8e 03 	sts	0x038E, r21
    2adc:	40 93 8d 03 	sts	0x038D, r20
    2ae0:	df 91       	pop	r29
    2ae2:	cf 91       	pop	r28
    2ae4:	08 95       	ret

00002ae6 <realloc>:
    2ae6:	6f 92       	push	r6
    2ae8:	7f 92       	push	r7
    2aea:	8f 92       	push	r8
    2aec:	9f 92       	push	r9
    2aee:	af 92       	push	r10
    2af0:	bf 92       	push	r11
    2af2:	cf 92       	push	r12
    2af4:	df 92       	push	r13
    2af6:	ef 92       	push	r14
    2af8:	ff 92       	push	r15
    2afa:	0f 93       	push	r16
    2afc:	1f 93       	push	r17
    2afe:	cf 93       	push	r28
    2b00:	df 93       	push	r29
    2b02:	8c 01       	movw	r16, r24
    2b04:	00 97       	sbiw	r24, 0x00	; 0
    2b06:	29 f4       	brne	.+10     	; 0x2b12 <realloc+0x2c>
    2b08:	cb 01       	movw	r24, r22
    2b0a:	0e 94 3e 14 	call	0x287c	; 0x287c <malloc>
    2b0e:	8c 01       	movw	r16, r24
    2b10:	bb c0       	rjmp	.+374    	; 0x2c88 <realloc+0x1a2>
    2b12:	8e ef       	ldi	r24, 0xFE	; 254
    2b14:	e8 2e       	mov	r14, r24
    2b16:	8f ef       	ldi	r24, 0xFF	; 255
    2b18:	f8 2e       	mov	r15, r24
    2b1a:	e0 0e       	add	r14, r16
    2b1c:	f1 1e       	adc	r15, r17
    2b1e:	48 01       	movw	r8, r16
    2b20:	86 0e       	add	r8, r22
    2b22:	97 1e       	adc	r9, r23
    2b24:	8e 14       	cp	r8, r14
    2b26:	9f 04       	cpc	r9, r15
    2b28:	08 f4       	brcc	.+2      	; 0x2b2c <realloc+0x46>
    2b2a:	ac c0       	rjmp	.+344    	; 0x2c84 <realloc+0x19e>
    2b2c:	d7 01       	movw	r26, r14
    2b2e:	4d 91       	ld	r20, X+
    2b30:	5c 91       	ld	r21, X
    2b32:	11 97       	sbiw	r26, 0x01	; 1
    2b34:	46 17       	cp	r20, r22
    2b36:	57 07       	cpc	r21, r23
    2b38:	b8 f0       	brcs	.+46     	; 0x2b68 <realloc+0x82>
    2b3a:	45 30       	cpi	r20, 0x05	; 5
    2b3c:	51 05       	cpc	r21, r1
    2b3e:	08 f4       	brcc	.+2      	; 0x2b42 <realloc+0x5c>
    2b40:	a3 c0       	rjmp	.+326    	; 0x2c88 <realloc+0x1a2>
    2b42:	ca 01       	movw	r24, r20
    2b44:	04 97       	sbiw	r24, 0x04	; 4
    2b46:	86 17       	cp	r24, r22
    2b48:	97 07       	cpc	r25, r23
    2b4a:	08 f4       	brcc	.+2      	; 0x2b4e <realloc+0x68>
    2b4c:	9d c0       	rjmp	.+314    	; 0x2c88 <realloc+0x1a2>
    2b4e:	42 50       	subi	r20, 0x02	; 2
    2b50:	50 40       	sbci	r21, 0x00	; 0
    2b52:	46 1b       	sub	r20, r22
    2b54:	57 0b       	sbc	r21, r23
    2b56:	f4 01       	movw	r30, r8
    2b58:	41 93       	st	Z+, r20
    2b5a:	51 93       	st	Z+, r21
    2b5c:	6d 93       	st	X+, r22
    2b5e:	7c 93       	st	X, r23
    2b60:	cf 01       	movw	r24, r30
    2b62:	0e 94 db 14 	call	0x29b6	; 0x29b6 <free>
    2b66:	90 c0       	rjmp	.+288    	; 0x2c88 <realloc+0x1a2>
    2b68:	5b 01       	movw	r10, r22
    2b6a:	a4 1a       	sub	r10, r20
    2b6c:	b5 0a       	sbc	r11, r21
    2b6e:	38 01       	movw	r6, r16
    2b70:	64 0e       	add	r6, r20
    2b72:	75 1e       	adc	r7, r21
    2b74:	a0 91 8f 03 	lds	r26, 0x038F
    2b78:	b0 91 90 03 	lds	r27, 0x0390
    2b7c:	e0 e0       	ldi	r30, 0x00	; 0
    2b7e:	f0 e0       	ldi	r31, 0x00	; 0
    2b80:	cc 24       	eor	r12, r12
    2b82:	dd 24       	eor	r13, r13
    2b84:	47 c0       	rjmp	.+142    	; 0x2c14 <realloc+0x12e>
    2b86:	a6 15       	cp	r26, r6
    2b88:	b7 05       	cpc	r27, r7
    2b8a:	a9 f5       	brne	.+106    	; 0x2bf6 <realloc+0x110>
    2b8c:	cd 91       	ld	r28, X+
    2b8e:	dc 91       	ld	r29, X
    2b90:	11 97       	sbiw	r26, 0x01	; 1
    2b92:	ce 01       	movw	r24, r28
    2b94:	02 96       	adiw	r24, 0x02	; 2
    2b96:	8a 15       	cp	r24, r10
    2b98:	9b 05       	cpc	r25, r11
    2b9a:	68 f1       	brcs	.+90     	; 0x2bf6 <realloc+0x110>
    2b9c:	ce 01       	movw	r24, r28
    2b9e:	8a 19       	sub	r24, r10
    2ba0:	9b 09       	sbc	r25, r11
    2ba2:	02 96       	adiw	r24, 0x02	; 2
    2ba4:	12 96       	adiw	r26, 0x02	; 2
    2ba6:	2c 91       	ld	r18, X
    2ba8:	12 97       	sbiw	r26, 0x02	; 2
    2baa:	13 96       	adiw	r26, 0x03	; 3
    2bac:	3c 91       	ld	r19, X
    2bae:	05 97       	sbiw	r24, 0x05	; 5
    2bb0:	58 f0       	brcs	.+22     	; 0x2bc8 <realloc+0xe2>
    2bb2:	f4 01       	movw	r30, r8
    2bb4:	22 83       	std	Z+2, r18	; 0x02
    2bb6:	33 83       	std	Z+3, r19	; 0x03
    2bb8:	ca 19       	sub	r28, r10
    2bba:	db 09       	sbc	r29, r11
    2bbc:	d1 83       	std	Z+1, r29	; 0x01
    2bbe:	c0 83       	st	Z, r28
    2bc0:	d7 01       	movw	r26, r14
    2bc2:	6d 93       	st	X+, r22
    2bc4:	7c 93       	st	X, r23
    2bc6:	09 c0       	rjmp	.+18     	; 0x2bda <realloc+0xf4>
    2bc8:	4e 5f       	subi	r20, 0xFE	; 254
    2bca:	5f 4f       	sbci	r21, 0xFF	; 255
    2bcc:	4c 0f       	add	r20, r28
    2bce:	5d 1f       	adc	r21, r29
    2bd0:	f7 01       	movw	r30, r14
    2bd2:	51 83       	std	Z+1, r21	; 0x01
    2bd4:	40 83       	st	Z, r20
    2bd6:	c9 01       	movw	r24, r18
    2bd8:	fc 01       	movw	r30, r24
    2bda:	c1 14       	cp	r12, r1
    2bdc:	d1 04       	cpc	r13, r1
    2bde:	31 f0       	breq	.+12     	; 0x2bec <realloc+0x106>
    2be0:	d6 01       	movw	r26, r12
    2be2:	13 96       	adiw	r26, 0x03	; 3
    2be4:	fc 93       	st	X, r31
    2be6:	ee 93       	st	-X, r30
    2be8:	12 97       	sbiw	r26, 0x02	; 2
    2bea:	4e c0       	rjmp	.+156    	; 0x2c88 <realloc+0x1a2>
    2bec:	f0 93 90 03 	sts	0x0390, r31
    2bf0:	e0 93 8f 03 	sts	0x038F, r30
    2bf4:	49 c0       	rjmp	.+146    	; 0x2c88 <realloc+0x1a2>
    2bf6:	8d 91       	ld	r24, X+
    2bf8:	9c 91       	ld	r25, X
    2bfa:	11 97       	sbiw	r26, 0x01	; 1
    2bfc:	e8 17       	cp	r30, r24
    2bfe:	f9 07       	cpc	r31, r25
    2c00:	08 f4       	brcc	.+2      	; 0x2c04 <realloc+0x11e>
    2c02:	fc 01       	movw	r30, r24
    2c04:	6d 01       	movw	r12, r26
    2c06:	12 96       	adiw	r26, 0x02	; 2
    2c08:	8c 91       	ld	r24, X
    2c0a:	12 97       	sbiw	r26, 0x02	; 2
    2c0c:	13 96       	adiw	r26, 0x03	; 3
    2c0e:	9c 91       	ld	r25, X
    2c10:	9c 01       	movw	r18, r24
    2c12:	d9 01       	movw	r26, r18
    2c14:	10 97       	sbiw	r26, 0x00	; 0
    2c16:	09 f0       	breq	.+2      	; 0x2c1a <realloc+0x134>
    2c18:	b6 cf       	rjmp	.-148    	; 0x2b86 <realloc+0xa0>
    2c1a:	80 91 8d 03 	lds	r24, 0x038D
    2c1e:	90 91 8e 03 	lds	r25, 0x038E
    2c22:	86 15       	cp	r24, r6
    2c24:	97 05       	cpc	r25, r7
    2c26:	e9 f4       	brne	.+58     	; 0x2c62 <realloc+0x17c>
    2c28:	e6 17       	cp	r30, r22
    2c2a:	f7 07       	cpc	r31, r23
    2c2c:	d0 f4       	brcc	.+52     	; 0x2c62 <realloc+0x17c>
    2c2e:	20 91 06 01 	lds	r18, 0x0106
    2c32:	30 91 07 01 	lds	r19, 0x0107
    2c36:	21 15       	cp	r18, r1
    2c38:	31 05       	cpc	r19, r1
    2c3a:	41 f4       	brne	.+16     	; 0x2c4c <realloc+0x166>
    2c3c:	2d b7       	in	r18, 0x3d	; 61
    2c3e:	3e b7       	in	r19, 0x3e	; 62
    2c40:	80 91 02 01 	lds	r24, 0x0102
    2c44:	90 91 03 01 	lds	r25, 0x0103
    2c48:	28 1b       	sub	r18, r24
    2c4a:	39 0b       	sbc	r19, r25
    2c4c:	82 16       	cp	r8, r18
    2c4e:	93 06       	cpc	r9, r19
    2c50:	c8 f4       	brcc	.+50     	; 0x2c84 <realloc+0x19e>
    2c52:	90 92 8e 03 	sts	0x038E, r9
    2c56:	80 92 8d 03 	sts	0x038D, r8
    2c5a:	f7 01       	movw	r30, r14
    2c5c:	71 83       	std	Z+1, r23	; 0x01
    2c5e:	60 83       	st	Z, r22
    2c60:	13 c0       	rjmp	.+38     	; 0x2c88 <realloc+0x1a2>
    2c62:	cb 01       	movw	r24, r22
    2c64:	0e 94 3e 14 	call	0x287c	; 0x287c <malloc>
    2c68:	ec 01       	movw	r28, r24
    2c6a:	00 97       	sbiw	r24, 0x00	; 0
    2c6c:	59 f0       	breq	.+22     	; 0x2c84 <realloc+0x19e>
    2c6e:	d7 01       	movw	r26, r14
    2c70:	4d 91       	ld	r20, X+
    2c72:	5c 91       	ld	r21, X
    2c74:	b8 01       	movw	r22, r16
    2c76:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <memcpy>
    2c7a:	c8 01       	movw	r24, r16
    2c7c:	0e 94 db 14 	call	0x29b6	; 0x29b6 <free>
    2c80:	8e 01       	movw	r16, r28
    2c82:	02 c0       	rjmp	.+4      	; 0x2c88 <realloc+0x1a2>
    2c84:	00 e0       	ldi	r16, 0x00	; 0
    2c86:	10 e0       	ldi	r17, 0x00	; 0
    2c88:	c8 01       	movw	r24, r16
    2c8a:	df 91       	pop	r29
    2c8c:	cf 91       	pop	r28
    2c8e:	1f 91       	pop	r17
    2c90:	0f 91       	pop	r16
    2c92:	ff 90       	pop	r15
    2c94:	ef 90       	pop	r14
    2c96:	df 90       	pop	r13
    2c98:	cf 90       	pop	r12
    2c9a:	bf 90       	pop	r11
    2c9c:	af 90       	pop	r10
    2c9e:	9f 90       	pop	r9
    2ca0:	8f 90       	pop	r8
    2ca2:	7f 90       	pop	r7
    2ca4:	6f 90       	pop	r6
    2ca6:	08 95       	ret

00002ca8 <__divmodhi4>:
    2ca8:	97 fb       	bst	r25, 7
    2caa:	07 2e       	mov	r0, r23
    2cac:	16 f4       	brtc	.+4      	; 0x2cb2 <__divmodhi4+0xa>
    2cae:	00 94       	com	r0
    2cb0:	07 d0       	rcall	.+14     	; 0x2cc0 <__divmodhi4_neg1>
    2cb2:	77 fd       	sbrc	r23, 7
    2cb4:	09 d0       	rcall	.+18     	; 0x2cc8 <__divmodhi4_neg2>
    2cb6:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <__udivmodhi4>
    2cba:	07 fc       	sbrc	r0, 7
    2cbc:	05 d0       	rcall	.+10     	; 0x2cc8 <__divmodhi4_neg2>
    2cbe:	3e f4       	brtc	.+14     	; 0x2cce <__divmodhi4_exit>

00002cc0 <__divmodhi4_neg1>:
    2cc0:	90 95       	com	r25
    2cc2:	81 95       	neg	r24
    2cc4:	9f 4f       	sbci	r25, 0xFF	; 255
    2cc6:	08 95       	ret

00002cc8 <__divmodhi4_neg2>:
    2cc8:	70 95       	com	r23
    2cca:	61 95       	neg	r22
    2ccc:	7f 4f       	sbci	r23, 0xFF	; 255

00002cce <__divmodhi4_exit>:
    2cce:	08 95       	ret

00002cd0 <__udivmodsi4>:
    2cd0:	a1 e2       	ldi	r26, 0x21	; 33
    2cd2:	1a 2e       	mov	r1, r26
    2cd4:	aa 1b       	sub	r26, r26
    2cd6:	bb 1b       	sub	r27, r27
    2cd8:	fd 01       	movw	r30, r26
    2cda:	0d c0       	rjmp	.+26     	; 0x2cf6 <__udivmodsi4_ep>

00002cdc <__udivmodsi4_loop>:
    2cdc:	aa 1f       	adc	r26, r26
    2cde:	bb 1f       	adc	r27, r27
    2ce0:	ee 1f       	adc	r30, r30
    2ce2:	ff 1f       	adc	r31, r31
    2ce4:	a2 17       	cp	r26, r18
    2ce6:	b3 07       	cpc	r27, r19
    2ce8:	e4 07       	cpc	r30, r20
    2cea:	f5 07       	cpc	r31, r21
    2cec:	20 f0       	brcs	.+8      	; 0x2cf6 <__udivmodsi4_ep>
    2cee:	a2 1b       	sub	r26, r18
    2cf0:	b3 0b       	sbc	r27, r19
    2cf2:	e4 0b       	sbc	r30, r20
    2cf4:	f5 0b       	sbc	r31, r21

00002cf6 <__udivmodsi4_ep>:
    2cf6:	66 1f       	adc	r22, r22
    2cf8:	77 1f       	adc	r23, r23
    2cfa:	88 1f       	adc	r24, r24
    2cfc:	99 1f       	adc	r25, r25
    2cfe:	1a 94       	dec	r1
    2d00:	69 f7       	brne	.-38     	; 0x2cdc <__udivmodsi4_loop>
    2d02:	60 95       	com	r22
    2d04:	70 95       	com	r23
    2d06:	80 95       	com	r24
    2d08:	90 95       	com	r25
    2d0a:	9b 01       	movw	r18, r22
    2d0c:	ac 01       	movw	r20, r24
    2d0e:	bd 01       	movw	r22, r26
    2d10:	cf 01       	movw	r24, r30
    2d12:	08 95       	ret

00002d14 <__divmodsi4>:
    2d14:	05 2e       	mov	r0, r21
    2d16:	97 fb       	bst	r25, 7
    2d18:	1e f4       	brtc	.+6      	; 0x2d20 <__divmodsi4+0xc>
    2d1a:	00 94       	com	r0
    2d1c:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__negsi2>
    2d20:	57 fd       	sbrc	r21, 7
    2d22:	07 d0       	rcall	.+14     	; 0x2d32 <__divmodsi4_neg2>
    2d24:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__udivmodsi4>
    2d28:	07 fc       	sbrc	r0, 7
    2d2a:	03 d0       	rcall	.+6      	; 0x2d32 <__divmodsi4_neg2>
    2d2c:	4e f4       	brtc	.+18     	; 0x2d40 <__divmodsi4_exit>
    2d2e:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__negsi2>

00002d32 <__divmodsi4_neg2>:
    2d32:	50 95       	com	r21
    2d34:	40 95       	com	r20
    2d36:	30 95       	com	r19
    2d38:	21 95       	neg	r18
    2d3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d3c:	4f 4f       	sbci	r20, 0xFF	; 255
    2d3e:	5f 4f       	sbci	r21, 0xFF	; 255

00002d40 <__divmodsi4_exit>:
    2d40:	08 95       	ret

00002d42 <__negsi2>:
    2d42:	90 95       	com	r25
    2d44:	80 95       	com	r24
    2d46:	70 95       	com	r23
    2d48:	61 95       	neg	r22
    2d4a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d4c:	8f 4f       	sbci	r24, 0xFF	; 255
    2d4e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d50:	08 95       	ret

00002d52 <__udivmodhi4>:
    2d52:	aa 1b       	sub	r26, r26
    2d54:	bb 1b       	sub	r27, r27
    2d56:	51 e1       	ldi	r21, 0x11	; 17
    2d58:	07 c0       	rjmp	.+14     	; 0x2d68 <__udivmodhi4_ep>

00002d5a <__udivmodhi4_loop>:
    2d5a:	aa 1f       	adc	r26, r26
    2d5c:	bb 1f       	adc	r27, r27
    2d5e:	a6 17       	cp	r26, r22
    2d60:	b7 07       	cpc	r27, r23
    2d62:	10 f0       	brcs	.+4      	; 0x2d68 <__udivmodhi4_ep>
    2d64:	a6 1b       	sub	r26, r22
    2d66:	b7 0b       	sbc	r27, r23

00002d68 <__udivmodhi4_ep>:
    2d68:	88 1f       	adc	r24, r24
    2d6a:	99 1f       	adc	r25, r25
    2d6c:	5a 95       	dec	r21
    2d6e:	a9 f7       	brne	.-22     	; 0x2d5a <__udivmodhi4_loop>
    2d70:	80 95       	com	r24
    2d72:	90 95       	com	r25
    2d74:	bc 01       	movw	r22, r24
    2d76:	cd 01       	movw	r24, r26
    2d78:	08 95       	ret

00002d7a <__tablejump2__>:
    2d7a:	ee 0f       	add	r30, r30
    2d7c:	ff 1f       	adc	r31, r31

00002d7e <__tablejump__>:
    2d7e:	05 90       	lpm	r0, Z+
    2d80:	f4 91       	lpm	r31, Z
    2d82:	e0 2d       	mov	r30, r0
    2d84:	09 94       	ijmp

00002d86 <dtostrf>:
    2d86:	ef 92       	push	r14
    2d88:	0f 93       	push	r16
    2d8a:	1f 93       	push	r17
    2d8c:	cf 93       	push	r28
    2d8e:	df 93       	push	r29
    2d90:	e8 01       	movw	r28, r16
    2d92:	47 ff       	sbrs	r20, 7
    2d94:	02 c0       	rjmp	.+4      	; 0x2d9a <dtostrf+0x14>
    2d96:	34 e1       	ldi	r19, 0x14	; 20
    2d98:	01 c0       	rjmp	.+2      	; 0x2d9c <dtostrf+0x16>
    2d9a:	34 e0       	ldi	r19, 0x04	; 4
    2d9c:	e4 2f       	mov	r30, r20
    2d9e:	ff 27       	eor	r31, r31
    2da0:	e7 fd       	sbrc	r30, 7
    2da2:	f0 95       	com	r31
    2da4:	f7 ff       	sbrs	r31, 7
    2da6:	03 c0       	rjmp	.+6      	; 0x2dae <dtostrf+0x28>
    2da8:	f1 95       	neg	r31
    2daa:	e1 95       	neg	r30
    2dac:	f1 09       	sbc	r31, r1
    2dae:	e3 2e       	mov	r14, r19
    2db0:	02 2f       	mov	r16, r18
    2db2:	2e 2f       	mov	r18, r30
    2db4:	ae 01       	movw	r20, r28
    2db6:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <dtoa_prf>
    2dba:	ce 01       	movw	r24, r28
    2dbc:	df 91       	pop	r29
    2dbe:	cf 91       	pop	r28
    2dc0:	1f 91       	pop	r17
    2dc2:	0f 91       	pop	r16
    2dc4:	ef 90       	pop	r14
    2dc6:	08 95       	ret

00002dc8 <memcpy>:
    2dc8:	fb 01       	movw	r30, r22
    2dca:	dc 01       	movw	r26, r24
    2dcc:	02 c0       	rjmp	.+4      	; 0x2dd2 <memcpy+0xa>
    2dce:	01 90       	ld	r0, Z+
    2dd0:	0d 92       	st	X+, r0
    2dd2:	41 50       	subi	r20, 0x01	; 1
    2dd4:	50 40       	sbci	r21, 0x00	; 0
    2dd6:	d8 f7       	brcc	.-10     	; 0x2dce <memcpy+0x6>
    2dd8:	08 95       	ret

00002dda <strcpy>:
    2dda:	fb 01       	movw	r30, r22
    2ddc:	dc 01       	movw	r26, r24
    2dde:	01 90       	ld	r0, Z+
    2de0:	0d 92       	st	X+, r0
    2de2:	00 20       	and	r0, r0
    2de4:	e1 f7       	brne	.-8      	; 0x2dde <strcpy+0x4>
    2de6:	08 95       	ret

00002de8 <dtoa_prf>:
    2de8:	6f 92       	push	r6
    2dea:	7f 92       	push	r7
    2dec:	9f 92       	push	r9
    2dee:	af 92       	push	r10
    2df0:	bf 92       	push	r11
    2df2:	cf 92       	push	r12
    2df4:	df 92       	push	r13
    2df6:	ef 92       	push	r14
    2df8:	ff 92       	push	r15
    2dfa:	0f 93       	push	r16
    2dfc:	1f 93       	push	r17
    2dfe:	cf 93       	push	r28
    2e00:	df 93       	push	r29
    2e02:	cd b7       	in	r28, 0x3d	; 61
    2e04:	de b7       	in	r29, 0x3e	; 62
    2e06:	29 97       	sbiw	r28, 0x09	; 9
    2e08:	0f b6       	in	r0, 0x3f	; 63
    2e0a:	f8 94       	cli
    2e0c:	de bf       	out	0x3e, r29	; 62
    2e0e:	0f be       	out	0x3f, r0	; 63
    2e10:	cd bf       	out	0x3d, r28	; 61
    2e12:	6a 01       	movw	r12, r20
    2e14:	b2 2e       	mov	r11, r18
    2e16:	10 2f       	mov	r17, r16
    2e18:	0c 33       	cpi	r16, 0x3C	; 60
    2e1a:	20 f4       	brcc	.+8      	; 0x2e24 <dtoa_prf+0x3c>
    2e1c:	ff 24       	eor	r15, r15
    2e1e:	f3 94       	inc	r15
    2e20:	f0 0e       	add	r15, r16
    2e22:	02 c0       	rjmp	.+4      	; 0x2e28 <dtoa_prf+0x40>
    2e24:	4c e3       	ldi	r20, 0x3C	; 60
    2e26:	f4 2e       	mov	r15, r20
    2e28:	0f 2d       	mov	r16, r15
    2e2a:	27 e0       	ldi	r18, 0x07	; 7
    2e2c:	ae 01       	movw	r20, r28
    2e2e:	4f 5f       	subi	r20, 0xFF	; 255
    2e30:	5f 4f       	sbci	r21, 0xFF	; 255
    2e32:	0e 94 72 18 	call	0x30e4	; 0x30e4 <__ftoa_engine>
    2e36:	79 81       	ldd	r23, Y+1	; 0x01
    2e38:	27 2f       	mov	r18, r23
    2e3a:	29 70       	andi	r18, 0x09	; 9
    2e3c:	21 30       	cpi	r18, 0x01	; 1
    2e3e:	31 f0       	breq	.+12     	; 0x2e4c <dtoa_prf+0x64>
    2e40:	e1 fc       	sbrc	r14, 1
    2e42:	06 c0       	rjmp	.+12     	; 0x2e50 <dtoa_prf+0x68>
    2e44:	e0 fc       	sbrc	r14, 0
    2e46:	06 c0       	rjmp	.+12     	; 0x2e54 <dtoa_prf+0x6c>
    2e48:	60 e0       	ldi	r22, 0x00	; 0
    2e4a:	05 c0       	rjmp	.+10     	; 0x2e56 <dtoa_prf+0x6e>
    2e4c:	6d e2       	ldi	r22, 0x2D	; 45
    2e4e:	03 c0       	rjmp	.+6      	; 0x2e56 <dtoa_prf+0x6e>
    2e50:	6b e2       	ldi	r22, 0x2B	; 43
    2e52:	01 c0       	rjmp	.+2      	; 0x2e56 <dtoa_prf+0x6e>
    2e54:	60 e2       	ldi	r22, 0x20	; 32
    2e56:	ae 2d       	mov	r26, r14
    2e58:	a0 71       	andi	r26, 0x10	; 16
    2e5a:	73 ff       	sbrs	r23, 3
    2e5c:	36 c0       	rjmp	.+108    	; 0x2eca <dtoa_prf+0xe2>
    2e5e:	66 23       	and	r22, r22
    2e60:	11 f0       	breq	.+4      	; 0x2e66 <dtoa_prf+0x7e>
    2e62:	84 e0       	ldi	r24, 0x04	; 4
    2e64:	01 c0       	rjmp	.+2      	; 0x2e68 <dtoa_prf+0x80>
    2e66:	83 e0       	ldi	r24, 0x03	; 3
    2e68:	8b 15       	cp	r24, r11
    2e6a:	10 f4       	brcc	.+4      	; 0x2e70 <dtoa_prf+0x88>
    2e6c:	b8 1a       	sub	r11, r24
    2e6e:	01 c0       	rjmp	.+2      	; 0x2e72 <dtoa_prf+0x8a>
    2e70:	b1 2c       	mov	r11, r1
    2e72:	a1 11       	cpse	r26, r1
    2e74:	0b c0       	rjmp	.+22     	; 0x2e8c <dtoa_prf+0xa4>
    2e76:	f6 01       	movw	r30, r12
    2e78:	8b 2d       	mov	r24, r11
    2e7a:	90 e2       	ldi	r25, 0x20	; 32
    2e7c:	88 23       	and	r24, r24
    2e7e:	19 f0       	breq	.+6      	; 0x2e86 <dtoa_prf+0x9e>
    2e80:	91 93       	st	Z+, r25
    2e82:	81 50       	subi	r24, 0x01	; 1
    2e84:	fb cf       	rjmp	.-10     	; 0x2e7c <dtoa_prf+0x94>
    2e86:	cb 0c       	add	r12, r11
    2e88:	d1 1c       	adc	r13, r1
    2e8a:	b1 2c       	mov	r11, r1
    2e8c:	66 23       	and	r22, r22
    2e8e:	31 f0       	breq	.+12     	; 0x2e9c <dtoa_prf+0xb4>
    2e90:	f6 01       	movw	r30, r12
    2e92:	60 83       	st	Z, r22
    2e94:	96 01       	movw	r18, r12
    2e96:	2f 5f       	subi	r18, 0xFF	; 255
    2e98:	3f 4f       	sbci	r19, 0xFF	; 255
    2e9a:	69 01       	movw	r12, r18
    2e9c:	c6 01       	movw	r24, r12
    2e9e:	03 96       	adiw	r24, 0x03	; 3
    2ea0:	e2 fe       	sbrs	r14, 2
    2ea2:	05 c0       	rjmp	.+10     	; 0x2eae <dtoa_prf+0xc6>
    2ea4:	2e e4       	ldi	r18, 0x4E	; 78
    2ea6:	f6 01       	movw	r30, r12
    2ea8:	20 83       	st	Z, r18
    2eaa:	31 e4       	ldi	r19, 0x41	; 65
    2eac:	04 c0       	rjmp	.+8      	; 0x2eb6 <dtoa_prf+0xce>
    2eae:	2e e6       	ldi	r18, 0x6E	; 110
    2eb0:	f6 01       	movw	r30, r12
    2eb2:	20 83       	st	Z, r18
    2eb4:	31 e6       	ldi	r19, 0x61	; 97
    2eb6:	31 83       	std	Z+1, r19	; 0x01
    2eb8:	22 83       	std	Z+2, r18	; 0x02
    2eba:	fc 01       	movw	r30, r24
    2ebc:	2b 2d       	mov	r18, r11
    2ebe:	30 e2       	ldi	r19, 0x20	; 32
    2ec0:	22 23       	and	r18, r18
    2ec2:	f1 f1       	breq	.+124    	; 0x2f40 <dtoa_prf+0x158>
    2ec4:	31 93       	st	Z+, r19
    2ec6:	21 50       	subi	r18, 0x01	; 1
    2ec8:	fb cf       	rjmp	.-10     	; 0x2ec0 <dtoa_prf+0xd8>
    2eca:	72 ff       	sbrs	r23, 2
    2ecc:	40 c0       	rjmp	.+128    	; 0x2f4e <dtoa_prf+0x166>
    2ece:	66 23       	and	r22, r22
    2ed0:	11 f0       	breq	.+4      	; 0x2ed6 <dtoa_prf+0xee>
    2ed2:	84 e0       	ldi	r24, 0x04	; 4
    2ed4:	01 c0       	rjmp	.+2      	; 0x2ed8 <dtoa_prf+0xf0>
    2ed6:	83 e0       	ldi	r24, 0x03	; 3
    2ed8:	8b 15       	cp	r24, r11
    2eda:	10 f4       	brcc	.+4      	; 0x2ee0 <dtoa_prf+0xf8>
    2edc:	b8 1a       	sub	r11, r24
    2ede:	01 c0       	rjmp	.+2      	; 0x2ee2 <dtoa_prf+0xfa>
    2ee0:	b1 2c       	mov	r11, r1
    2ee2:	a1 11       	cpse	r26, r1
    2ee4:	0b c0       	rjmp	.+22     	; 0x2efc <dtoa_prf+0x114>
    2ee6:	f6 01       	movw	r30, r12
    2ee8:	8b 2d       	mov	r24, r11
    2eea:	90 e2       	ldi	r25, 0x20	; 32
    2eec:	88 23       	and	r24, r24
    2eee:	19 f0       	breq	.+6      	; 0x2ef6 <dtoa_prf+0x10e>
    2ef0:	91 93       	st	Z+, r25
    2ef2:	81 50       	subi	r24, 0x01	; 1
    2ef4:	fb cf       	rjmp	.-10     	; 0x2eec <dtoa_prf+0x104>
    2ef6:	cb 0c       	add	r12, r11
    2ef8:	d1 1c       	adc	r13, r1
    2efa:	b1 2c       	mov	r11, r1
    2efc:	66 23       	and	r22, r22
    2efe:	31 f0       	breq	.+12     	; 0x2f0c <dtoa_prf+0x124>
    2f00:	f6 01       	movw	r30, r12
    2f02:	60 83       	st	Z, r22
    2f04:	96 01       	movw	r18, r12
    2f06:	2f 5f       	subi	r18, 0xFF	; 255
    2f08:	3f 4f       	sbci	r19, 0xFF	; 255
    2f0a:	69 01       	movw	r12, r18
    2f0c:	c6 01       	movw	r24, r12
    2f0e:	03 96       	adiw	r24, 0x03	; 3
    2f10:	e2 fe       	sbrs	r14, 2
    2f12:	07 c0       	rjmp	.+14     	; 0x2f22 <dtoa_prf+0x13a>
    2f14:	29 e4       	ldi	r18, 0x49	; 73
    2f16:	f6 01       	movw	r30, r12
    2f18:	20 83       	st	Z, r18
    2f1a:	2e e4       	ldi	r18, 0x4E	; 78
    2f1c:	21 83       	std	Z+1, r18	; 0x01
    2f1e:	26 e4       	ldi	r18, 0x46	; 70
    2f20:	06 c0       	rjmp	.+12     	; 0x2f2e <dtoa_prf+0x146>
    2f22:	29 e6       	ldi	r18, 0x69	; 105
    2f24:	f6 01       	movw	r30, r12
    2f26:	20 83       	st	Z, r18
    2f28:	2e e6       	ldi	r18, 0x6E	; 110
    2f2a:	21 83       	std	Z+1, r18	; 0x01
    2f2c:	26 e6       	ldi	r18, 0x66	; 102
    2f2e:	22 83       	std	Z+2, r18	; 0x02
    2f30:	fc 01       	movw	r30, r24
    2f32:	2b 2d       	mov	r18, r11
    2f34:	30 e2       	ldi	r19, 0x20	; 32
    2f36:	22 23       	and	r18, r18
    2f38:	19 f0       	breq	.+6      	; 0x2f40 <dtoa_prf+0x158>
    2f3a:	31 93       	st	Z+, r19
    2f3c:	21 50       	subi	r18, 0x01	; 1
    2f3e:	fb cf       	rjmp	.-10     	; 0x2f36 <dtoa_prf+0x14e>
    2f40:	fc 01       	movw	r30, r24
    2f42:	eb 0d       	add	r30, r11
    2f44:	f1 1d       	adc	r31, r1
    2f46:	10 82       	st	Z, r1
    2f48:	8e ef       	ldi	r24, 0xFE	; 254
    2f4a:	9f ef       	ldi	r25, 0xFF	; 255
    2f4c:	b7 c0       	rjmp	.+366    	; 0x30bc <dtoa_prf+0x2d4>
    2f4e:	b1 e0       	ldi	r27, 0x01	; 1
    2f50:	61 11       	cpse	r22, r1
    2f52:	01 c0       	rjmp	.+2      	; 0x2f56 <dtoa_prf+0x16e>
    2f54:	b0 e0       	ldi	r27, 0x00	; 0
    2f56:	4b 2f       	mov	r20, r27
    2f58:	50 e0       	ldi	r21, 0x00	; 0
    2f5a:	18 16       	cp	r1, r24
    2f5c:	19 06       	cpc	r1, r25
    2f5e:	24 f4       	brge	.+8      	; 0x2f68 <dtoa_prf+0x180>
    2f60:	9c 01       	movw	r18, r24
    2f62:	2f 5f       	subi	r18, 0xFF	; 255
    2f64:	3f 4f       	sbci	r19, 0xFF	; 255
    2f66:	02 c0       	rjmp	.+4      	; 0x2f6c <dtoa_prf+0x184>
    2f68:	21 e0       	ldi	r18, 0x01	; 1
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	24 0f       	add	r18, r20
    2f6e:	35 1f       	adc	r19, r21
    2f70:	11 23       	and	r17, r17
    2f72:	29 f0       	breq	.+10     	; 0x2f7e <dtoa_prf+0x196>
    2f74:	41 2f       	mov	r20, r17
    2f76:	50 e0       	ldi	r21, 0x00	; 0
    2f78:	4f 5f       	subi	r20, 0xFF	; 255
    2f7a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f7c:	02 c0       	rjmp	.+4      	; 0x2f82 <dtoa_prf+0x19a>
    2f7e:	40 e0       	ldi	r20, 0x00	; 0
    2f80:	50 e0       	ldi	r21, 0x00	; 0
    2f82:	42 0f       	add	r20, r18
    2f84:	53 1f       	adc	r21, r19
    2f86:	2b 2d       	mov	r18, r11
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	42 17       	cp	r20, r18
    2f8c:	53 07       	cpc	r21, r19
    2f8e:	14 f4       	brge	.+4      	; 0x2f94 <dtoa_prf+0x1ac>
    2f90:	b4 1a       	sub	r11, r20
    2f92:	01 c0       	rjmp	.+2      	; 0x2f96 <dtoa_prf+0x1ae>
    2f94:	b1 2c       	mov	r11, r1
    2f96:	2e 2d       	mov	r18, r14
    2f98:	28 71       	andi	r18, 0x18	; 24
    2f9a:	59 f4       	brne	.+22     	; 0x2fb2 <dtoa_prf+0x1ca>
    2f9c:	f6 01       	movw	r30, r12
    2f9e:	2b 2d       	mov	r18, r11
    2fa0:	30 e2       	ldi	r19, 0x20	; 32
    2fa2:	22 23       	and	r18, r18
    2fa4:	19 f0       	breq	.+6      	; 0x2fac <dtoa_prf+0x1c4>
    2fa6:	31 93       	st	Z+, r19
    2fa8:	21 50       	subi	r18, 0x01	; 1
    2faa:	fb cf       	rjmp	.-10     	; 0x2fa2 <dtoa_prf+0x1ba>
    2fac:	cb 0c       	add	r12, r11
    2fae:	d1 1c       	adc	r13, r1
    2fb0:	b1 2c       	mov	r11, r1
    2fb2:	bb 23       	and	r27, r27
    2fb4:	31 f0       	breq	.+12     	; 0x2fc2 <dtoa_prf+0x1da>
    2fb6:	f6 01       	movw	r30, r12
    2fb8:	60 83       	st	Z, r22
    2fba:	96 01       	movw	r18, r12
    2fbc:	2f 5f       	subi	r18, 0xFF	; 255
    2fbe:	3f 4f       	sbci	r19, 0xFF	; 255
    2fc0:	69 01       	movw	r12, r18
    2fc2:	a1 11       	cpse	r26, r1
    2fc4:	0b c0       	rjmp	.+22     	; 0x2fdc <dtoa_prf+0x1f4>
    2fc6:	f6 01       	movw	r30, r12
    2fc8:	2b 2d       	mov	r18, r11
    2fca:	30 e3       	ldi	r19, 0x30	; 48
    2fcc:	22 23       	and	r18, r18
    2fce:	19 f0       	breq	.+6      	; 0x2fd6 <dtoa_prf+0x1ee>
    2fd0:	31 93       	st	Z+, r19
    2fd2:	21 50       	subi	r18, 0x01	; 1
    2fd4:	fb cf       	rjmp	.-10     	; 0x2fcc <dtoa_prf+0x1e4>
    2fd6:	cb 0c       	add	r12, r11
    2fd8:	d1 1c       	adc	r13, r1
    2fda:	b1 2c       	mov	r11, r1
    2fdc:	f8 0e       	add	r15, r24
    2fde:	0a 81       	ldd	r16, Y+2	; 0x02
    2fe0:	37 2f       	mov	r19, r23
    2fe2:	30 71       	andi	r19, 0x10	; 16
    2fe4:	a3 2e       	mov	r10, r19
    2fe6:	74 ff       	sbrs	r23, 4
    2fe8:	03 c0       	rjmp	.+6      	; 0x2ff0 <dtoa_prf+0x208>
    2fea:	01 33       	cpi	r16, 0x31	; 49
    2fec:	09 f4       	brne	.+2      	; 0x2ff0 <dtoa_prf+0x208>
    2fee:	fa 94       	dec	r15
    2ff0:	1f 14       	cp	r1, r15
    2ff2:	2c f4       	brge	.+10     	; 0x2ffe <dtoa_prf+0x216>
    2ff4:	2f 2d       	mov	r18, r15
    2ff6:	29 30       	cpi	r18, 0x09	; 9
    2ff8:	18 f0       	brcs	.+6      	; 0x3000 <dtoa_prf+0x218>
    2ffa:	28 e0       	ldi	r18, 0x08	; 8
    2ffc:	01 c0       	rjmp	.+2      	; 0x3000 <dtoa_prf+0x218>
    2ffe:	21 e0       	ldi	r18, 0x01	; 1
    3000:	68 2f       	mov	r22, r24
    3002:	39 2f       	mov	r19, r25
    3004:	97 ff       	sbrs	r25, 7
    3006:	02 c0       	rjmp	.+4      	; 0x300c <dtoa_prf+0x224>
    3008:	60 e0       	ldi	r22, 0x00	; 0
    300a:	30 e0       	ldi	r19, 0x00	; 0
    300c:	46 2f       	mov	r20, r22
    300e:	53 2f       	mov	r21, r19
    3010:	61 2c       	mov	r6, r1
    3012:	71 2c       	mov	r7, r1
    3014:	3e e2       	ldi	r19, 0x2E	; 46
    3016:	93 2e       	mov	r9, r19
    3018:	bc 01       	movw	r22, r24
    301a:	62 1b       	sub	r22, r18
    301c:	71 09       	sbc	r23, r1
    301e:	9b 01       	movw	r18, r22
    3020:	dc 01       	movw	r26, r24
    3022:	a4 1b       	sub	r26, r20
    3024:	b5 0b       	sbc	r27, r21
    3026:	e1 e0       	ldi	r30, 0x01	; 1
    3028:	f0 e0       	ldi	r31, 0x00	; 0
    302a:	ec 0f       	add	r30, r28
    302c:	fd 1f       	adc	r31, r29
    302e:	ae 0f       	add	r26, r30
    3030:	bf 1f       	adc	r27, r31
    3032:	e1 2e       	mov	r14, r17
    3034:	f1 2c       	mov	r15, r1
    3036:	f1 94       	neg	r15
    3038:	e1 94       	neg	r14
    303a:	f1 08       	sbc	r15, r1
    303c:	4f 3f       	cpi	r20, 0xFF	; 255
    303e:	ff ef       	ldi	r31, 0xFF	; 255
    3040:	5f 07       	cpc	r21, r31
    3042:	31 f4       	brne	.+12     	; 0x3050 <dtoa_prf+0x268>
    3044:	f6 01       	movw	r30, r12
    3046:	90 82       	st	Z, r9
    3048:	b6 01       	movw	r22, r12
    304a:	6f 5f       	subi	r22, 0xFF	; 255
    304c:	7f 4f       	sbci	r23, 0xFF	; 255
    304e:	6b 01       	movw	r12, r22
    3050:	84 17       	cp	r24, r20
    3052:	95 07       	cpc	r25, r21
    3054:	4c f0       	brlt	.+18     	; 0x3068 <dtoa_prf+0x280>
    3056:	24 17       	cp	r18, r20
    3058:	35 07       	cpc	r19, r21
    305a:	34 f4       	brge	.+12     	; 0x3068 <dtoa_prf+0x280>
    305c:	bd 01       	movw	r22, r26
    305e:	66 0d       	add	r22, r6
    3060:	77 1d       	adc	r23, r7
    3062:	fb 01       	movw	r30, r22
    3064:	11 81       	ldd	r17, Z+1	; 0x01
    3066:	01 c0       	rjmp	.+2      	; 0x306a <dtoa_prf+0x282>
    3068:	10 e3       	ldi	r17, 0x30	; 48
    306a:	41 50       	subi	r20, 0x01	; 1
    306c:	51 09       	sbc	r21, r1
    306e:	ff ef       	ldi	r31, 0xFF	; 255
    3070:	6f 1a       	sub	r6, r31
    3072:	7f 0a       	sbc	r7, r31
    3074:	b6 01       	movw	r22, r12
    3076:	6f 5f       	subi	r22, 0xFF	; 255
    3078:	7f 4f       	sbci	r23, 0xFF	; 255
    307a:	4e 15       	cp	r20, r14
    307c:	5f 05       	cpc	r21, r15
    307e:	24 f0       	brlt	.+8      	; 0x3088 <dtoa_prf+0x2a0>
    3080:	f6 01       	movw	r30, r12
    3082:	10 83       	st	Z, r17
    3084:	6b 01       	movw	r12, r22
    3086:	da cf       	rjmp	.-76     	; 0x303c <dtoa_prf+0x254>
    3088:	48 17       	cp	r20, r24
    308a:	59 07       	cpc	r21, r25
    308c:	39 f4       	brne	.+14     	; 0x309c <dtoa_prf+0x2b4>
    308e:	06 33       	cpi	r16, 0x36	; 54
    3090:	20 f4       	brcc	.+8      	; 0x309a <dtoa_prf+0x2b2>
    3092:	05 33       	cpi	r16, 0x35	; 53
    3094:	19 f4       	brne	.+6      	; 0x309c <dtoa_prf+0x2b4>
    3096:	a1 10       	cpse	r10, r1
    3098:	01 c0       	rjmp	.+2      	; 0x309c <dtoa_prf+0x2b4>
    309a:	11 e3       	ldi	r17, 0x31	; 49
    309c:	f6 01       	movw	r30, r12
    309e:	10 83       	st	Z, r17
    30a0:	fb 01       	movw	r30, r22
    30a2:	8b 2d       	mov	r24, r11
    30a4:	90 e2       	ldi	r25, 0x20	; 32
    30a6:	88 23       	and	r24, r24
    30a8:	19 f0       	breq	.+6      	; 0x30b0 <dtoa_prf+0x2c8>
    30aa:	91 93       	st	Z+, r25
    30ac:	81 50       	subi	r24, 0x01	; 1
    30ae:	fb cf       	rjmp	.-10     	; 0x30a6 <dtoa_prf+0x2be>
    30b0:	fb 01       	movw	r30, r22
    30b2:	eb 0d       	add	r30, r11
    30b4:	f1 1d       	adc	r31, r1
    30b6:	10 82       	st	Z, r1
    30b8:	80 e0       	ldi	r24, 0x00	; 0
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	29 96       	adiw	r28, 0x09	; 9
    30be:	0f b6       	in	r0, 0x3f	; 63
    30c0:	f8 94       	cli
    30c2:	de bf       	out	0x3e, r29	; 62
    30c4:	0f be       	out	0x3f, r0	; 63
    30c6:	cd bf       	out	0x3d, r28	; 61
    30c8:	df 91       	pop	r29
    30ca:	cf 91       	pop	r28
    30cc:	1f 91       	pop	r17
    30ce:	0f 91       	pop	r16
    30d0:	ff 90       	pop	r15
    30d2:	ef 90       	pop	r14
    30d4:	df 90       	pop	r13
    30d6:	cf 90       	pop	r12
    30d8:	bf 90       	pop	r11
    30da:	af 90       	pop	r10
    30dc:	9f 90       	pop	r9
    30de:	7f 90       	pop	r7
    30e0:	6f 90       	pop	r6
    30e2:	08 95       	ret

000030e4 <__ftoa_engine>:
    30e4:	28 30       	cpi	r18, 0x08	; 8
    30e6:	08 f0       	brcs	.+2      	; 0x30ea <__ftoa_engine+0x6>
    30e8:	27 e0       	ldi	r18, 0x07	; 7
    30ea:	33 27       	eor	r19, r19
    30ec:	da 01       	movw	r26, r20
    30ee:	99 0f       	add	r25, r25
    30f0:	31 1d       	adc	r19, r1
    30f2:	87 fd       	sbrc	r24, 7
    30f4:	91 60       	ori	r25, 0x01	; 1
    30f6:	00 96       	adiw	r24, 0x00	; 0
    30f8:	61 05       	cpc	r22, r1
    30fa:	71 05       	cpc	r23, r1
    30fc:	39 f4       	brne	.+14     	; 0x310c <__ftoa_engine+0x28>
    30fe:	32 60       	ori	r19, 0x02	; 2
    3100:	2e 5f       	subi	r18, 0xFE	; 254
    3102:	3d 93       	st	X+, r19
    3104:	30 e3       	ldi	r19, 0x30	; 48
    3106:	2a 95       	dec	r18
    3108:	e1 f7       	brne	.-8      	; 0x3102 <__ftoa_engine+0x1e>
    310a:	08 95       	ret
    310c:	9f 3f       	cpi	r25, 0xFF	; 255
    310e:	30 f0       	brcs	.+12     	; 0x311c <__ftoa_engine+0x38>
    3110:	80 38       	cpi	r24, 0x80	; 128
    3112:	71 05       	cpc	r23, r1
    3114:	61 05       	cpc	r22, r1
    3116:	09 f0       	breq	.+2      	; 0x311a <__ftoa_engine+0x36>
    3118:	3c 5f       	subi	r19, 0xFC	; 252
    311a:	3c 5f       	subi	r19, 0xFC	; 252
    311c:	3d 93       	st	X+, r19
    311e:	91 30       	cpi	r25, 0x01	; 1
    3120:	08 f0       	brcs	.+2      	; 0x3124 <__ftoa_engine+0x40>
    3122:	80 68       	ori	r24, 0x80	; 128
    3124:	91 1d       	adc	r25, r1
    3126:	df 93       	push	r29
    3128:	cf 93       	push	r28
    312a:	1f 93       	push	r17
    312c:	0f 93       	push	r16
    312e:	ff 92       	push	r15
    3130:	ef 92       	push	r14
    3132:	19 2f       	mov	r17, r25
    3134:	98 7f       	andi	r25, 0xF8	; 248
    3136:	96 95       	lsr	r25
    3138:	e9 2f       	mov	r30, r25
    313a:	96 95       	lsr	r25
    313c:	96 95       	lsr	r25
    313e:	e9 0f       	add	r30, r25
    3140:	ff 27       	eor	r31, r31
    3142:	e3 59       	subi	r30, 0x93	; 147
    3144:	fe 4f       	sbci	r31, 0xFE	; 254
    3146:	99 27       	eor	r25, r25
    3148:	33 27       	eor	r19, r19
    314a:	ee 24       	eor	r14, r14
    314c:	ff 24       	eor	r15, r15
    314e:	a7 01       	movw	r20, r14
    3150:	e7 01       	movw	r28, r14
    3152:	05 90       	lpm	r0, Z+
    3154:	08 94       	sec
    3156:	07 94       	ror	r0
    3158:	28 f4       	brcc	.+10     	; 0x3164 <__ftoa_engine+0x80>
    315a:	36 0f       	add	r19, r22
    315c:	e7 1e       	adc	r14, r23
    315e:	f8 1e       	adc	r15, r24
    3160:	49 1f       	adc	r20, r25
    3162:	51 1d       	adc	r21, r1
    3164:	66 0f       	add	r22, r22
    3166:	77 1f       	adc	r23, r23
    3168:	88 1f       	adc	r24, r24
    316a:	99 1f       	adc	r25, r25
    316c:	06 94       	lsr	r0
    316e:	a1 f7       	brne	.-24     	; 0x3158 <__ftoa_engine+0x74>
    3170:	05 90       	lpm	r0, Z+
    3172:	07 94       	ror	r0
    3174:	28 f4       	brcc	.+10     	; 0x3180 <__ftoa_engine+0x9c>
    3176:	e7 0e       	add	r14, r23
    3178:	f8 1e       	adc	r15, r24
    317a:	49 1f       	adc	r20, r25
    317c:	56 1f       	adc	r21, r22
    317e:	c1 1d       	adc	r28, r1
    3180:	77 0f       	add	r23, r23
    3182:	88 1f       	adc	r24, r24
    3184:	99 1f       	adc	r25, r25
    3186:	66 1f       	adc	r22, r22
    3188:	06 94       	lsr	r0
    318a:	a1 f7       	brne	.-24     	; 0x3174 <__ftoa_engine+0x90>
    318c:	05 90       	lpm	r0, Z+
    318e:	07 94       	ror	r0
    3190:	28 f4       	brcc	.+10     	; 0x319c <__ftoa_engine+0xb8>
    3192:	f8 0e       	add	r15, r24
    3194:	49 1f       	adc	r20, r25
    3196:	56 1f       	adc	r21, r22
    3198:	c7 1f       	adc	r28, r23
    319a:	d1 1d       	adc	r29, r1
    319c:	88 0f       	add	r24, r24
    319e:	99 1f       	adc	r25, r25
    31a0:	66 1f       	adc	r22, r22
    31a2:	77 1f       	adc	r23, r23
    31a4:	06 94       	lsr	r0
    31a6:	a1 f7       	brne	.-24     	; 0x3190 <__ftoa_engine+0xac>
    31a8:	05 90       	lpm	r0, Z+
    31aa:	07 94       	ror	r0
    31ac:	20 f4       	brcc	.+8      	; 0x31b6 <__ftoa_engine+0xd2>
    31ae:	49 0f       	add	r20, r25
    31b0:	56 1f       	adc	r21, r22
    31b2:	c7 1f       	adc	r28, r23
    31b4:	d8 1f       	adc	r29, r24
    31b6:	99 0f       	add	r25, r25
    31b8:	66 1f       	adc	r22, r22
    31ba:	77 1f       	adc	r23, r23
    31bc:	88 1f       	adc	r24, r24
    31be:	06 94       	lsr	r0
    31c0:	a9 f7       	brne	.-22     	; 0x31ac <__ftoa_engine+0xc8>
    31c2:	84 91       	lpm	r24, Z
    31c4:	10 95       	com	r17
    31c6:	17 70       	andi	r17, 0x07	; 7
    31c8:	41 f0       	breq	.+16     	; 0x31da <__ftoa_engine+0xf6>
    31ca:	d6 95       	lsr	r29
    31cc:	c7 95       	ror	r28
    31ce:	57 95       	ror	r21
    31d0:	47 95       	ror	r20
    31d2:	f7 94       	ror	r15
    31d4:	e7 94       	ror	r14
    31d6:	1a 95       	dec	r17
    31d8:	c1 f7       	brne	.-16     	; 0x31ca <__ftoa_engine+0xe6>
    31da:	e3 e1       	ldi	r30, 0x13	; 19
    31dc:	f1 e0       	ldi	r31, 0x01	; 1
    31de:	68 94       	set
    31e0:	15 90       	lpm	r1, Z+
    31e2:	15 91       	lpm	r17, Z+
    31e4:	35 91       	lpm	r19, Z+
    31e6:	65 91       	lpm	r22, Z+
    31e8:	95 91       	lpm	r25, Z+
    31ea:	05 90       	lpm	r0, Z+
    31ec:	7f e2       	ldi	r23, 0x2F	; 47
    31ee:	73 95       	inc	r23
    31f0:	e1 18       	sub	r14, r1
    31f2:	f1 0a       	sbc	r15, r17
    31f4:	43 0b       	sbc	r20, r19
    31f6:	56 0b       	sbc	r21, r22
    31f8:	c9 0b       	sbc	r28, r25
    31fa:	d0 09       	sbc	r29, r0
    31fc:	c0 f7       	brcc	.-16     	; 0x31ee <__ftoa_engine+0x10a>
    31fe:	e1 0c       	add	r14, r1
    3200:	f1 1e       	adc	r15, r17
    3202:	43 1f       	adc	r20, r19
    3204:	56 1f       	adc	r21, r22
    3206:	c9 1f       	adc	r28, r25
    3208:	d0 1d       	adc	r29, r0
    320a:	7e f4       	brtc	.+30     	; 0x322a <__ftoa_engine+0x146>
    320c:	70 33       	cpi	r23, 0x30	; 48
    320e:	11 f4       	brne	.+4      	; 0x3214 <__ftoa_engine+0x130>
    3210:	8a 95       	dec	r24
    3212:	e6 cf       	rjmp	.-52     	; 0x31e0 <__ftoa_engine+0xfc>
    3214:	e8 94       	clt
    3216:	01 50       	subi	r16, 0x01	; 1
    3218:	30 f0       	brcs	.+12     	; 0x3226 <__ftoa_engine+0x142>
    321a:	08 0f       	add	r16, r24
    321c:	0a f4       	brpl	.+2      	; 0x3220 <__ftoa_engine+0x13c>
    321e:	00 27       	eor	r16, r16
    3220:	02 17       	cp	r16, r18
    3222:	08 f4       	brcc	.+2      	; 0x3226 <__ftoa_engine+0x142>
    3224:	20 2f       	mov	r18, r16
    3226:	23 95       	inc	r18
    3228:	02 2f       	mov	r16, r18
    322a:	7a 33       	cpi	r23, 0x3A	; 58
    322c:	28 f0       	brcs	.+10     	; 0x3238 <__ftoa_engine+0x154>
    322e:	79 e3       	ldi	r23, 0x39	; 57
    3230:	7d 93       	st	X+, r23
    3232:	2a 95       	dec	r18
    3234:	e9 f7       	brne	.-6      	; 0x3230 <__ftoa_engine+0x14c>
    3236:	10 c0       	rjmp	.+32     	; 0x3258 <__ftoa_engine+0x174>
    3238:	7d 93       	st	X+, r23
    323a:	2a 95       	dec	r18
    323c:	89 f6       	brne	.-94     	; 0x31e0 <__ftoa_engine+0xfc>
    323e:	06 94       	lsr	r0
    3240:	97 95       	ror	r25
    3242:	67 95       	ror	r22
    3244:	37 95       	ror	r19
    3246:	17 95       	ror	r17
    3248:	17 94       	ror	r1
    324a:	e1 18       	sub	r14, r1
    324c:	f1 0a       	sbc	r15, r17
    324e:	43 0b       	sbc	r20, r19
    3250:	56 0b       	sbc	r21, r22
    3252:	c9 0b       	sbc	r28, r25
    3254:	d0 09       	sbc	r29, r0
    3256:	98 f0       	brcs	.+38     	; 0x327e <__ftoa_engine+0x19a>
    3258:	23 95       	inc	r18
    325a:	7e 91       	ld	r23, -X
    325c:	73 95       	inc	r23
    325e:	7a 33       	cpi	r23, 0x3A	; 58
    3260:	08 f0       	brcs	.+2      	; 0x3264 <__ftoa_engine+0x180>
    3262:	70 e3       	ldi	r23, 0x30	; 48
    3264:	7c 93       	st	X, r23
    3266:	20 13       	cpse	r18, r16
    3268:	b8 f7       	brcc	.-18     	; 0x3258 <__ftoa_engine+0x174>
    326a:	7e 91       	ld	r23, -X
    326c:	70 61       	ori	r23, 0x10	; 16
    326e:	7d 93       	st	X+, r23
    3270:	30 f0       	brcs	.+12     	; 0x327e <__ftoa_engine+0x19a>
    3272:	83 95       	inc	r24
    3274:	71 e3       	ldi	r23, 0x31	; 49
    3276:	7d 93       	st	X+, r23
    3278:	70 e3       	ldi	r23, 0x30	; 48
    327a:	2a 95       	dec	r18
    327c:	e1 f7       	brne	.-8      	; 0x3276 <__ftoa_engine+0x192>
    327e:	11 24       	eor	r1, r1
    3280:	ef 90       	pop	r14
    3282:	ff 90       	pop	r15
    3284:	0f 91       	pop	r16
    3286:	1f 91       	pop	r17
    3288:	cf 91       	pop	r28
    328a:	df 91       	pop	r29
    328c:	99 27       	eor	r25, r25
    328e:	87 fd       	sbrc	r24, 7
    3290:	90 95       	com	r25
    3292:	08 95       	ret

00003294 <_exit>:
    3294:	f8 94       	cli

00003296 <__stop_program>:
    3296:	ff cf       	rjmp	.-2      	; 0x3296 <__stop_program>
